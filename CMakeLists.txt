PROJECT(MARATIS)

## Let's use a reasonable modern version
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(CMAKE_HAS_SORT 1)
SET(CMAKE_MODULE_PATH 
  ${MARATIS_SOURCE_DIR}/CMake
  ${MARATIS_SOURCE_DIR}/CMake/Utils
  ${MARATIS_SOURCE_DIR}/CMake/Packages
  ${CMAKE_MODULE_PATH}
)

## Disallow in-source builds
INCLUDE(OutOfSourceBuild)

## Add some useful macros
INCLUDE(FindPkgMacros)

## Documentation tool
FIND_PACKAGE(Doxygen 1.8.3)

## Set version and info
SET(MARATIS_MAJOR_VERSION 3)
SET(MARATIS_MINOR_VERSION 21)
SET(MARATIS_PATCH_VERSION 0)

SET(MARATIS_PACKAGE "Maratis")
SET(MARATIS_VENDOR "Anael Seghezzi")
SET(MARATIS_VERSION "${MARATIS_MAJOR_VERSION}.${MARATIS_MINOR_VERSION}.${MARATIS_PATCH_VERSION}")
SET(MARATIS_COPYRIGHT "Copyright (c) 2003-2014, ${MARATIS_VENDOR}.")

MESSAGE(STATUS "${MARATIS_PACKAGE} ${MARATIS_VERSION}")

## Packaging
SET(CPACK_PACKAGE_NAME "${MARATIS_PACKAGE}")
SET(CPACK_PACKAGE_VENDOR "${MARATIS_VENDOR}")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Maratis editor and game engine.")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
SET(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
SET(CPACK_PACKAGE_ICON "${CMAKE_CURRENT_SOURCE_DIR}/Data/Installer/maratis-icon-55x55.png")
SET(CPACK_PACKAGE_VERSION_MAJOR "${MARATIS_MAJOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_MINOR "${MARATIS_MINOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_PATCH "${MARATIS_PATCH_VERSION}")
INCLUDE(CPack)

## Set install path
SET(MARATIS_INSTALL_DIR Maratis)

## Set build flags
IF(WIN32 AND NOT ANDROID)
  FIND_PACKAGE(OpenGL REQUIRED)
  SET(FREETYPE_LIBRARY "freetype")
  SET(OPENAL_LIBRARY "OpenAL32")
  SET(ZLIB_LIBRARY "zlib")
  SET(MARATIS_BUILD_FLAGS "")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MARATIS_BUILD_FLAGS} /EHsc /nologo /GR /FC /DWIN32 /D_MBCS")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /Z7 /W4 /Od /MDd /D_DEBUG /D__Debug__")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /W1 /O2 /Ot /MD /DNDEBUG")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MARATIS_BUILD_FLAGS} /EHsc /nologo /GR /FC /DWIN32 /D_MBCS")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Z7 /W4 /Od /MDd /D_DEBUG /D__Debug__")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /W1 /O2 /Ot /MD /DNDEBUG")
ENDIF(WIN32 AND NOT ANDROID)

IF(APPLE AND NOT ANDROID)
  IF(IOS)
    ## Set up the toolchain for iOS
    IF(NOT CMAKE_GENERATOR STREQUAL "Xcode")
      MESSAGE(FATAL_ERROR "Build for iOS require Xcode generator")
    ENDIF(NOT CMAKE_GENERATOR STREQUAL "Xcode")
    ## Find packages and libraries for iOS
    FIND_PACKAGE(OpenGLES REQUIRED)
    FIND_PACKAGE(OpenGLES2 REQUIRED)
    FIND_PACKAGE(CoreMotion REQUIRED)
    FIND_PACKAGE(Foundation REQUIRED)
    FIND_PACKAGE(UIKit REQUIRED)
    FIND_PACKAGE(CoreGraphics REQUIRED)
    SET(PLATFORM_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/Additional/iOS/Common)
    SET(PLATFORM_LIBRARIES "${COREMOTION_LIBRARIES} ${FOUNDATION_LIBRARIES} ${UIKIT_LIBRARIES} ${COREGRAPHICS_LIBRARIES}")
    IF(MARATIS_BUILD_IOS_SIMULATOR)
      FIND_LIBRARY(FREETYPE_LIBRARY Freetype2 PATHS "${MARATIS_SOURCE_DIR}/3rdparty/freetype/ios_simulator" NO_DEFAULT_PATH)
    ELSE(MARATIS_BUILD_IOS_SIMULATOR)
      FIND_LIBRARY(FREETYPE_LIBRARY Freetype2 PATHS "${MARATIS_SOURCE_DIR}/3rdparty/freetype/ios" NO_DEFAULT_PATH)
    ENDIF(MARATIS_BUILD_IOS_SIMULATOR)
    FIND_LIBRARY(ZLIB_LIBRARY z)
    FIND_LIBRARY(OPENAL_LIBRARY OpenAL)
	SET(MARATIS_BUILD_FLAGS "")
  ELSE(IOS)
    ## Find packages and libraries for OSX
    FIND_PACKAGE(OpenGL REQUIRED)
    FIND_LIBRARY(FREETYPE_LIBRARY freetype PATHS "${MARATIS_SOURCE_DIR}/3rdparty/freetype/osx" NO_DEFAULT_PATH)
    FIND_LIBRARY(ZLIB_LIBRARY zlib PATHS "${MARATIS_SOURCE_DIR}/3rdparty/zlib/osx" NO_DEFAULT_PATH)
    FIND_LIBRARY(OPENAL_LIBRARY OpenAL)
    SET(MARATIS_BUILD_FLAGS "-isysroot /Developer/SDKs/MacOSX10.6.sdk -DOSX")
  ENDIF(IOS)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MARATIS_BUILD_FLAGS}")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MARATIS_BUILD_FLAGS}")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_SHARED_LINKER_FLAGS "-Wl")
ELSE(APPLE AND NOT ANDROID)
  IF(IOS)
    MESSAGE(FATAL_ERROR "iOS build only available on Mac OS X with Xcode")
  ENDIF(IOS)
ENDIF(APPLE AND NOT ANDROID)

IF(UNIX AND NOT APPLE AND NOT ANDROID)
  FIND_PACKAGE(OpenGL REQUIRED)
  SET(FREETYPE_LIBRARY "freetype")
  SET(OPENAL_LIBRARY "openal")
  SET(SNDFILE_LIBRARY "sndfile")
  SET(ZLIB_LIBRARY "zlib")
  SET(MARATIS_BUILD_FLAGS "")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MARATIS_BUILD_FLAGS} -O2 -fPIC -DLINUX -ldl")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MARATIS_BUILD_FLAGS} -O2 -fPIC -DLINUX -ldl")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_SHARED_LINKER_FLAGS "-ldl -Wl,--as-needed,--allow-multiple-definition,--build-id")
ENDIF(UNIX AND NOT APPLE AND NOT ANDROID)

IF(ANDROID)
  FIND_PACKAGE(OpenGLES REQUIRED)
  FIND_PACKAGE(OpenGLES2 REQUIRED)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D__Debug__")
ENDIF(ANDROID)

## Set up 3rd party dependencies
SET(ASSIMP_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/assimp/include)
SET(BULLET_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/bullet)
SET(DIRENT_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/dirent/include)
SET(FREETYPE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/freetype/include)
SET(GLEE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/glee)
SET(JPEG_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/libjpeg)
SET(PNG_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/libpng)
SET(OGG_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/libogg/include)
SET(VORBIS_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/libvorbis/include)
SET(LUA_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/lua)
SET(NPK_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/npk/include)
SET(OPENAL_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/openal-soft/include)
SET(TINYXML_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/tinyxml)
SET(ZLIB_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/zlib)

SET(ASSIMP_LIBRARIES assimp)
SET(BULLET_LIBRARIES bullet)
SET(FREETYPE_LIBRARIES "${FREETYPE_LIBRARY}")
SET(GLEE_LIBRARIES glee)
SET(JPEG_LIBRARIES jpeg)
SET(PNG_LIBRARIES png)
SET(OGG_LIBRARIES ogg)
SET(VORBIS_LIBRARIES vorbis)
SET(LUA_LIBRARIES lua)
SET(NPK_LIBRARIES npk)
SET(TINYXML_LIBRARIES tinyxml)
SET(OPENAL_LIBRARIES "${OPENAL_LIBRARY}")
SET(ZLIB_LIBRARIES "${ZLIB_LIBRARY}")

## Set up SDK dependencies
SET(MCORE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/MSDK/MCore/Includes)
SET(MENGINE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/MSDK/MEngine/Includes)
SET(MGUI_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/MSDK/MGui/Includes)

SET(MCORE_LIBRARIES MCore)
SET(MENGINE_LIBRARIES MEngine)
SET(MGUI_LIBRARIES MGui)

## Set up Maratis dependencies
SET(MARATIS_COMMON_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/Maratis/Common)
SET(MARATIS_COMMON_LIBRARIES MaratisCommon)

SET(MARATIS_OPENGLES_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/Additional/OpenGLES/Common)
SET(MARATIS_OPENGLES_LIBRARIES MaratisOpenGLES)

SET(MARATIS_WAVSOUND_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/Additional/WavSound/Common)
SET(MARATIS_WAVSOUND_LIBRARIES MaratisWavSound)

## Set up subdirectories...
ADD_SUBDIRECTORY(3rdparty)
ADD_SUBDIRECTORY(MSDK)
ADD_SUBDIRECTORY(Maratis)
ADD_SUBDIRECTORY(Additional)
ADD_SUBDIRECTORY(Data)
ADD_SUBDIRECTORY(Documentation)

## Install files
INSTALL(FILES 
  CREDITS
  LICENSE
  README.md
  DESTINATION ${MARATIS_INSTALL_DIR})
