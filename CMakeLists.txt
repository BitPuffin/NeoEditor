PROJECT(MARATIS)

## Let's use a reasonable modern version
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(CMAKE_HAS_SORT 1)
SET(CMAKE_MODULE_PATH ${MARATIS_SOURCE_DIR}/CMake ${CMAKE_MODULE_PATH})

## Disallow in-source builds
INCLUDE(OutOfSourceBuild)

## Documentation tool
FIND_PACKAGE(Doxygen 1.8.3)

## Set version and info
SET(MARATIS_MAJOR_VERSION 3)
SET(MARATIS_MINOR_VERSION 21)

SET(MARATIS_PACKAGE maratis)
SET(MARATIS_VERSION ${MARATIS_MAJOR_VERSION}.${MARATIS_MINOR_VERSION})
SET(MARATIS_HOST ${CMAKE_SYSTEM} ${CMAKE_SYSTEM_PROECESSOR})
SET(MARATIS_COPYRIGHT "Copyright (c) 2003-2014, Anael Seghezzi.")

## Set install path
SET(MARATIS_INSTALL_DIR Maratis)

## Set build flags
IF(WIN32)
  SET(CMAKE_C_FLAGS "/EHsc /nologo /GR /FC /DWIN32 /D_MBCS")
  SET(CMAKE_C_FLAGS_DEBUG "/Z7 /W4 /Od /MDd /D_DEBUG /D__Debug__")
  SET(CMAKE_C_FLAGS_RELEASE "/W1 /O2 /Ot /MD /DNDEBUG")
  SET(CMAKE_CXX_FLAGS "/EHsc /nologo /GR /FC /DWIN32 /D_MBCS")
  SET(CMAKE_CXX_FLAGS_DEBUG "/Z7 /W4 /Od /MDd /D_DEBUG /D__Debug__")
  SET(CMAKE_CXX_FLAGS_RELEASE "/W1 /O2 /Ot /MD /DNDEBUG")
ENDIF(WIN32)
IF(APPLE)
  SET(CMAKE_C_FLAGS "-isysroot /Developer/SDKs/MacOSX10.6.sdk -DOSX")
  SET(CMAKE_C_FLAGS_DEBUG "-g -D__Debug__")
  SET(CMAKE_CXX_FLAGS "-isysroot /Developer/SDKs/MacOSX10.6.sdk -DOSX")
  SET(CMAKE_CXX_FLAGS_DEBUG "-g -D__Debug__")
  SET(CMAKE_SHARED_LINKER_FLAGS "-Wl")
ENDIF(APPLE)
IF(UNIX AND NOT APPLE)
  OPTION(MARATIS_BUILD_32BIT "Force 32bit build" ON)
  IF(MARATIS_BUILD_32BIT)
    SET(MARATIS_BUILD_FLAGS "-m32")
  ENDIF(MARATIS_BUILD_32BIT)
  SET(CMAKE_C_FLAGS "${MARATIS_BUILD_FLAGS} -O2 -fPIC -DLINUX")
  SET(CMAKE_C_FLAGS_DEBUG "-g -D__Debug__")
  SET(CMAKE_CXX_FLAGS "${MARATIS_BUILD_FLAGS} -O2 -fPIC -DLINUX")
  SET(CMAKE_CXX_FLAGS_DEBUG "-g -D__Debug__")
  SET(CMAKE_SHARED_LINKER_FLAGS "${MARATIS_BUILD_FLAGS} -Wl,--as-needed -Wl,--allow-multiple-definition")
ENDIF(UNIX AND NOT APPLE)

## Set up system dependencies
FIND_PACKAGE(OpenGL REQUIRED)

## Set up 3rd party dependencies
SET(ASSIMP_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/asimp/include)
SET(BULLET_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/bullet)
SET(DEVIL_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/devil)
SET(DIRENT_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/dirent/include)
SET(FREETYPE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/freetype/include)
SET(GLEE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/glee)
SET(JPEG_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/libjpeg)
SET(PNG_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/libpng)
SET(SNDFILE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/libsndfile/include)
SET(LUA_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/lua)
SET(NPK_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/npk/include)
SET(OPENAL_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/openal/include)
SET(TINYXML_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/tinyxml)
SET(ZLIB_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/zlib)

SET(ASSIMP_LIBRARIES assimp)
SET(BULLET_LIBRARIES bullet)
SET(DEVIL_LIBRARIES devil)
SET(FREETYPE_LIBRARIES freetype)
SET(GLEE_LIBRARIES glee)
SET(JPEG_LIBRARIES jpeg)
SET(PNG_LIBRARIES png)
IF(APPLE)
  SET(SNDFILE_LIBRARIES SndFile)
ELSE(APPLE)
  SET(SNDFILE_LIBRARIES sndfile)
ENDIF(APPLE)
SET(LUA_LIBRARIES lua)
SET(NPK_LIBRARIES npk)
SET(TINYXML_LIBRARIES tinyxml)
IF(WIN32)
  SET(OPENAL_LIBRARIES OpenAL32)
ELSE(WIN32)
  SET(OPENAL_LIBRARIES openal)
ENDIF(WIN32)
SET(ZLIB_LIBRARIES zlib)

## Set up SDK dependencies
SET(MCORE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/MSDK/MCore/Includes)
SET(MENGINE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/MSDK/MEngine/Includes)
SET(MGUI_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/MSDK/MGui/Includes)

SET(MCORE_LIBRARIES MCore)
SET(MENGINE_LIBRARIES MEngine)
SET(MGUI_LIBRARIES MGui)

## Set up Maratis dependencies
SET(MARATIS_COMMON_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/Maratis/Common)
SET(MARATIS_COMMON_LIBRARIES MaratisCommon)

## Set up subdirectories...
ADD_SUBDIRECTORY(3rdparty)
ADD_SUBDIRECTORY(MSDK)
ADD_SUBDIRECTORY(Maratis)
ADD_SUBDIRECTORY(Data)
ADD_SUBDIRECTORY(Documentation)

## Install files
INSTALL(FILES 
  CREDITS
  LICENSE
  README.md
  DESTINATION ${MARATIS_INSTALL_DIR})
