## Find source and headers
FILE(GLOB HEADERS Includes/*.h)
FILE(GLOB SOURCES Sources/*.c*)

IF(CMAKE_HAS_SORT)
  LIST(SORT HEADERS)
  LIST(SORT SOURCES)
ENDIF(CMAKE_HAS_SORT)

## Build
INCLUDE_DIRECTORIES(
  ${NEO_CORE_INCLUDE_DIR} ${DIRENT_INCLUDE_DIR} ${LUA_INCLUDE_DIR} ${SDL_INCLUDE_DIR}
)

# SET(CMAKE_INSTALL_RPATH "./") # "${CMAKE_INSTALL_PREFIX}")
ADD_DEFINITIONS(-DNEO_CORE_DLL)
SET(CMAKE_SHARED_LIBRARY_PREFIX "")

IF(${SWIG_FOUND})
  MESSAGE("Generating Lua bindings for NeoCore")

  EXECUTE_PROCESS(
	COMMAND ${SWIG_EXECUTABLE} -lua -c++ -I${CMAKE_CURRENT_SOURCE_DIR}/Includes ${CMAKE_CURRENT_SOURCE_DIR}/NeoCore.i

	OUTPUT_VARIABLE SWIG_swiglib_output
	ERROR_VARIABLE SWIG_swiglib_error
	RESULT_VARIABLE SWIG_swiglib_result
	)

  ADD_CUSTOM_TARGET(neocore-swig
	COMMAND ${SWIG_EXECUTABLE} -lua -c++ -I${CMAKE_CURRENT_SOURCE_DIR}/Includes ${CMAKE_CURRENT_SOURCE_DIR}/NeoCore.i
	)

  IF(NOT ${SWIG_swiglib_result} EQUAL 0)
	MESSAGE(SEND_ERROR "Generating Lua bindings for NeoCore failed with output:\n${SWIG_swiglib_error}")
  ENDIF(NOT ${SWIG_swiglib_result} EQUAL 0)

ELSE()
  MESSAGE("Will NOT generate Lua bindings for NeoCore")
ENDIF()

IF(NOT ANDROID AND NOT EMSCRIPTEN)
  ADD_LIBRARY(NeoCore SHARED ${SOURCES} ${HEADERS} NeoCore_wrap.cxx)
ELSE()
  ADD_LIBRARY(NeoCore STATIC ${SOURCES} ${HEADERS} NeoCore_wrap.cxx)
ENDIF()

## FIXME: Should we link Lua here?
TARGET_LINK_LIBRARIES(NeoCore ${SDL_LIBS} ${SDL_LIBRARIES} ${LUA_LIBRARIES})

ADD_DEPENDENCIES(NeoCore neocore-swig)

## Install for Editor
INSTALL(TARGETS NeoCore DESTINATION ${NEO_INSTALL_DIR})

## Install for SDK
INSTALL(TARGETS NeoCore DESTINATION ${NEO_INSTALL_DIR}/SDK/lib)
INSTALL(FILES ${HEADERS} DESTINATION ${NEO_INSTALL_DIR}/SDK/include/NeoCore)
