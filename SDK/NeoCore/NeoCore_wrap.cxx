/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Neo__Color swig_types[0]
#define SWIGTYPE_p_Neo__DataLoadFunction swig_types[1]
#define SWIGTYPE_p_Neo__DataLoader swig_types[2]
#define SWIGTYPE_p_Neo__DataManager swig_types[3]
#define SWIGTYPE_p_Neo__DataRef swig_types[4]
#define SWIGTYPE_p_Neo__FRAME_BUFFER_ATTACHMENT swig_types[5]
#define SWIGTYPE_p_Neo__Image swig_types[6]
#define SWIGTYPE_p_Neo__InputContext swig_types[7]
#define SWIGTYPE_p_Neo__Matrix4x4 swig_types[8]
#define SWIGTYPE_p_Neo__PhysicsContext swig_types[9]
#define SWIGTYPE_p_Neo__Quaternion swig_types[10]
#define SWIGTYPE_p_Neo__Range swig_types[11]
#define SWIGTYPE_p_Neo__RenderingContext swig_types[12]
#define SWIGTYPE_p_Neo__ScriptContext swig_types[13]
#define SWIGTYPE_p_Neo__Sound swig_types[14]
#define SWIGTYPE_p_Neo__SoundContext swig_types[15]
#define SWIGTYPE_p_Neo__SystemContext swig_types[16]
#define SWIGTYPE_p_Neo__Vector2 swig_types[17]
#define SWIGTYPE_p_Neo__Vector3 swig_types[18]
#define SWIGTYPE_p_Neo__Vector4 swig_types[19]
#define SWIGTYPE_p_f_p_q_const__char_p_void__bool swig_types[20]
#define SWIGTYPE_p_f_void__int swig_types[21]
#define SWIGTYPE_p_float swig_types[22]
#define SWIGTYPE_p_int swig_types[23]
#define SWIGTYPE_p_unsigned_int swig_types[24]
#define SWIGTYPE_p_void swig_types[25]
static swig_type_info *swig_types[27];
static swig_module_info swig_module = {swig_types, 26, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "NeoCore"
#define SWIG_init      luaopen_NeoCore
#define SWIG_init_user luaopen_NeoCore_user

#define SWIG_LUACODE   luaopen_NeoCore_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


	#include <NeoCore.h>
	using namespace Neo;


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_getNextPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::getNextPowerOfTwo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::getNextPowerOfTwo",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (unsigned int)Neo::getNextPowerOfTwo(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_loopFloat(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Neo::loopFloat",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::loopFloat",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::loopFloat",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::loopFloat",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)Neo::loopFloat(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Range_start_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Range::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Range::start",1,"Neo::Range *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Range::start",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Range,0))){
    SWIG_fail_ptr("Range_start_set",1,SWIGTYPE_p_Neo__Range);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->start = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Range_start_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Range::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Range::start",1,"Neo::Range *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Range,0))){
    SWIG_fail_ptr("Range_start_get",1,SWIGTYPE_p_Neo__Range);
  }
  
  result = (int) ((arg1)->start);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Range_c_end_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Range::end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Range::end",1,"Neo::Range *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Range::end",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Range,0))){
    SWIG_fail_ptr("Range_c_end_set",1,SWIGTYPE_p_Neo__Range);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->end = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Range_c_end_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Range::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Range::end",1,"Neo::Range *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Range,0))){
    SWIG_fail_ptr("Range_c_end_get",1,SWIGTYPE_p_Neo__Range);
  }
  
  result = (int) ((arg1)->end);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Range(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *result = 0 ;
  
  SWIG_check_num_args("Neo::Range::Range",0,0)
  result = (Neo::Range *)new Neo::Range();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Range,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Range(void *obj) {
Neo::Range *arg1 = (Neo::Range *) obj;
delete arg1;
}
static int _proxy__wrap_new_Range(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Range);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Range_attributes[] = {
    { "start", _wrap_Range_start_get, _wrap_Range_start_set },
    { "c_end", _wrap_Range_c_end_get, _wrap_Range_c_end_set },
    {0,0,0}
};
static swig_lua_method swig_Range_methods[]= {
    {0,0}
};
static swig_lua_method swig_Range_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Range_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Range_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Range_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Range_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Range_Sf_SwigStatic = {
    "Range",
    swig_Range_Sf_SwigStatic_methods,
    swig_Range_Sf_SwigStatic_attributes,
    swig_Range_Sf_SwigStatic_constants,
    swig_Range_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Range_bases[] = {0};
static const char *swig_Range_base_names[] = {0};
static swig_lua_class _wrap_class_Range = { "Range", "Range", &SWIGTYPE_p_Neo__Range,_proxy__wrap_new_Range, swig_delete_Range, swig_Range_methods, swig_Range_attributes, &swig_Range_Sf_SwigStatic, swig_Range_meta, swig_Range_bases, swig_Range_base_names };

static int _wrap_sortFloatList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 ;
  float *arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Neo::sortFloatList",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::sortFloatList",1,"int []");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::sortFloatList",2,"float []");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::sortFloatList",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::sortFloatList",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("sortFloatList",1,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sortFloatList",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  Neo::sortFloatList(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sortFloatList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Neo::sortFloatList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::sortFloatList",1,"float []");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::sortFloatList",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::sortFloatList",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sortFloatList",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  Neo::sortFloatList(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sortFloatList(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sortFloatList__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_sortFloatList__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sortFloatList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::sortFloatList(int [],float [],int,int)\n"
    "    Neo::sortFloatList(float [],int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_isBoxToBoxCollision(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isBoxToBoxCollision",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isBoxToBoxCollision",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isBoxToBoxCollision",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isBoxToBoxCollision",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isBoxToBoxCollision",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isBoxToBoxCollision",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isBoxToBoxCollision",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isBoxToBoxCollision",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isBoxToBoxCollision",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isBoxToBoxCollision((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isBoxToBox2dCollision(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  Neo::Vector2 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isBoxToBox2dCollision",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isBoxToBox2dCollision",1,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isBoxToBox2dCollision",2,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isBoxToBox2dCollision",3,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isBoxToBox2dCollision",4,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isBoxToBox2dCollision",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isBoxToBox2dCollision",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isBoxToBox2dCollision",3,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isBoxToBox2dCollision",4,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)Neo::isBoxToBox2dCollision((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,(Neo::Vector2 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isPointInBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isPointInBox",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isPointInBox",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isPointInBox",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isPointInBox",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInBox",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInBox",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInBox",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isPointInBox((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isPointInBox2d(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isPointInBox2d",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isPointInBox2d",1,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isPointInBox2d",2,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isPointInBox2d",3,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isPointInBox2d",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isPointInBox2d",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isPointInBox2d",3,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)Neo::isPointInBox2d((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEdgeToBoxCollision(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isEdgeToBoxCollision",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isEdgeToBoxCollision",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isEdgeToBoxCollision",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isEdgeToBoxCollision",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isEdgeToBoxCollision",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeToBoxCollision",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeToBoxCollision",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeToBoxCollision",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeToBoxCollision",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isEdgeToBoxCollision((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEdgeToEdge2dIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  Neo::Vector2 *arg4 = 0 ;
  Neo::Vector2 *arg5 = (Neo::Vector2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isEdgeToEdge2dIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",1,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",2,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",3,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",4,"Neo::Vector2 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",5,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",3,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",4,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",5,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)Neo::isEdgeToEdge2dIntersection((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,(Neo::Vector2 const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isPointInTriangle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isPointInTriangle",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isPointInTriangle",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isPointInTriangle",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isPointInTriangle",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isPointInTriangle",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::isPointInTriangle",5,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isPointInTriangle((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,(Neo::Vector3 const &)*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isLineCircleIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("Neo::isLineCircleIntersection",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isLineCircleIntersection",1,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isLineCircleIntersection",2,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isLineCircleIntersection",3,"Neo::Vector2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::isLineCircleIntersection",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isLineCircleIntersection",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isLineCircleIntersection",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isLineCircleIntersection",3,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)Neo::isLineCircleIntersection((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isRaySphereIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  float arg4 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isRaySphereIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isRaySphereIntersection",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isRaySphereIntersection",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isRaySphereIntersection",3,"Neo::Vector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::isRaySphereIntersection",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::isRaySphereIntersection",5,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaySphereIntersection",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaySphereIntersection",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaySphereIntersection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaySphereIntersection",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isRaySphereIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isRayPlaneIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isRayPlaneIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isRayPlaneIntersection",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isRayPlaneIntersection",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isRayPlaneIntersection",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isRayPlaneIntersection",4,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::isRayPlaneIntersection",5,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isRayPlaneIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEdgePlaneIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isEdgePlaneIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",4,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",5,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isEdgePlaneIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEdgeTriangleIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = 0 ;
  Neo::Vector3 *arg6 = 0 ;
  Neo::Vector3 *arg7 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isEdgeTriangleIntersection",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",5,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",6,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",7,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",6,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",7,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isEdgeTriangleIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,(Neo::Vector3 const &)*arg5,(Neo::Vector3 const &)*arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getTriangleNormal(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::getTriangleNormal",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::getTriangleNormal",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::getTriangleNormal",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::getTriangleNormal",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getTriangleNormal",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getTriangleNormal",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getTriangleNormal",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = Neo::getTriangleNormal((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_simplifyDP(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_num_args("Neo::simplifyDP",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::simplifyDP",1,"float");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::simplifyDP",2,"Neo::Vector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::simplifyDP",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::simplifyDP",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::simplifyDP",5,"int *");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("simplifyDP",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("simplifyDP",5,SWIGTYPE_p_int);
  }
  
  Neo::simplifyDP(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linearInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Neo::linearInterpolation",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::linearInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::linearInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::linearInterpolation",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)Neo::linearInterpolation(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubicInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  SWIG_check_num_args("Neo::cubicInterpolation",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::cubicInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::cubicInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::cubicInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::cubicInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::cubicInterpolation",5,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (float)Neo::cubicInterpolation(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CatmullRomInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  SWIG_check_num_args("Neo::CatmullRomInterpolation",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::CatmullRomInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::CatmullRomInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::CatmullRomInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::CatmullRomInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::CatmullRomInterpolation",5,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (float)Neo::CatmullRomInterpolation(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HermiteInterpolation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool arg9 ;
  float result;
  
  SWIG_check_num_args("Neo::HermiteInterpolation",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::HermiteInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::HermiteInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::HermiteInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::HermiteInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::HermiteInterpolation",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::HermiteInterpolation",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::HermiteInterpolation",7,"float");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Neo::HermiteInterpolation",8,"bool");
  if(!lua_isboolean(L,9)) SWIG_fail_arg("Neo::HermiteInterpolation",9,"bool");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (lua_toboolean(L, 8)!=0);
  arg9 = (lua_toboolean(L, 9)!=0);
  result = (float)Neo::HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HermiteInterpolation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  float result;
  
  SWIG_check_num_args("Neo::HermiteInterpolation",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::HermiteInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::HermiteInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::HermiteInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::HermiteInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::HermiteInterpolation",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::HermiteInterpolation",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::HermiteInterpolation",7,"float");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Neo::HermiteInterpolation",8,"bool");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (lua_toboolean(L, 8)!=0);
  result = (float)Neo::HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HermiteInterpolation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float result;
  
  SWIG_check_num_args("Neo::HermiteInterpolation",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::HermiteInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::HermiteInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::HermiteInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::HermiteInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::HermiteInterpolation",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::HermiteInterpolation",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::HermiteInterpolation",7,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (float)Neo::HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HermiteInterpolation(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_HermiteInterpolation__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_HermiteInterpolation__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isboolean(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_HermiteInterpolation__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'HermiteInterpolation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::HermiteInterpolation(float,float,float,float,float,float,float,bool,bool)\n"
    "    Neo::HermiteInterpolation(float,float,float,float,float,float,float,bool)\n"
    "    Neo::HermiteInterpolation(float,float,float,float,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_HueToRGB(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Neo::HueToRGB",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::HueToRGB",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::HueToRGB",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::HueToRGB",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)Neo::HueToRGB(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RGBToHSV(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::RGBToHSV",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::RGBToHSV",1,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RGBToHSV",1,SWIGTYPE_p_Neo__Vector3);
  }
  arg1 = *argp1;
  
  result = Neo::RGBToHSV(arg1);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HSVToRGB(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::HSVToRGB",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::HSVToRGB",1,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("HSVToRGB",1,SWIGTYPE_p_Neo__Vector3);
  }
  arg1 = *argp1;
  
  result = Neo::HSVToRGB(arg1);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RGBToHSL(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::RGBToHSL",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::RGBToHSL",1,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RGBToHSL",1,SWIGTYPE_p_Neo__Vector3);
  }
  arg1 = *argp1;
  
  result = Neo::RGBToHSL(arg1);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HSLToRGB(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::HSLToRGB",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::HSLToRGB",1,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("HSLToRGB",1,SWIGTYPE_p_Neo__Vector3);
  }
  arg1 = *argp1;
  
  result = Neo::HSLToRGB(arg1);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector2::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::x",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_x_set",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::x",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_x_get",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector2::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::y",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_y_set",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::y",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_y_get",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",0,0)
  result = (Neo::Vector2 *)new Neo::Vector2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::Vector2",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (Neo::Vector2 *)new Neo::Vector2(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (Neo::Vector2 *)new Neo::Vector2(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Vector2 *)new Neo::Vector2((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (Neo::Vector2 *)new Neo::Vector2((Neo::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Vector2 *)new Neo::Vector2((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector2__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::Vector2()\n"
    "    Neo::Vector2::Vector2(float,float)\n"
    "    Neo::Vector2::Vector2(float const)\n"
    "    Neo::Vector2::Vector2(float const *)\n"
    "    Neo::Vector2::Vector2(Neo::Vector2 const &)\n"
    "    Neo::Vector2::Vector2(Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator +",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator +",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator +(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator -",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator -",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator -(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator +",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator +",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator +((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator -",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator -",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator -((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___sub__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator -(float const) const\n"
    "    Neo::Vector2::operator -(Neo::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator *",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator *(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator *",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator *",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator *((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator *(float const) const\n"
    "    Neo::Vector2::operator *(Neo::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator /",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator /",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator /((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator /",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator /(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator /(Neo::Vector2 const &) const\n"
    "    Neo::Vector2::operator /(float const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator ==",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator ==",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)((Neo::Vector2 const *)arg1)->operator ==((Neo::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator -",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___unm",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator -();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator +",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator +();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector2___add__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator +(float const) const\n"
    "    Neo::Vector2::operator +(Neo::Vector2 const &) const\n"
    "    Neo::Vector2::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Vector2::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::set",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector2::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_set",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector2::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::loadIdentity",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_loadIdentity",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_normalize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector2::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::normalize",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_normalize",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_rotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector2::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::rotate",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::rotate",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_rotate",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->rotate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getNormalized(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getNormalized",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getNormalized",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->getNormalized();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getRotated(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::getRotated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getRotated",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::getRotated",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getRotated",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->getRotated(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getAngleBetween(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::getAngleBetween",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getAngleBetween",1,"Neo::Vector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::getAngleBetween",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getAngleBetween",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getAngleBetween",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)(arg1)->getAngleBetween((Neo::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getLength",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getLength",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)((Neo::Vector2 const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getSquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::getSquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getSquaredLength",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getSquaredLength",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)((Neo::Vector2 const *)arg1)->getSquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_dotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::dotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::dotProduct",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::dotProduct",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_dotProduct",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_dotProduct",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)((Neo::Vector2 const *)arg1)->dotProduct((Neo::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_lerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::lerp",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::lerp",2,"Neo::Vector2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector2::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_lerp",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_lerp",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ((Neo::Vector2 const *)arg1)->lerp((Neo::Vector2 const &)*arg2,arg3);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2(void *obj) {
Neo::Vector2 *arg1 = (Neo::Vector2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector2_attributes[] = {
    { "x", _wrap_Vector2_x_get, _wrap_Vector2_x_set },
    { "y", _wrap_Vector2_y_get, _wrap_Vector2_y_set },
    {0,0,0}
};
static swig_lua_method swig_Vector2_methods[]= {
    { "__sub", _wrap_Vector2___sub},
    { "__mul", _wrap_Vector2___mul},
    { "__div", _wrap_Vector2___div},
    { "__eq", _wrap_Vector2___eq},
    { "__unm", _wrap_Vector2___unm},
    { "__add", _wrap_Vector2___add},
    { "set", _wrap_Vector2_set},
    { "loadIdentity", _wrap_Vector2_loadIdentity},
    { "normalize", _wrap_Vector2_normalize},
    { "rotate", _wrap_Vector2_rotate},
    { "getNormalized", _wrap_Vector2_getNormalized},
    { "getRotated", _wrap_Vector2_getRotated},
    { "getAngleBetween", _wrap_Vector2_getAngleBetween},
    { "getLength", _wrap_Vector2_getLength},
    { "getSquaredLength", _wrap_Vector2_getSquaredLength},
    { "dotProduct", _wrap_Vector2_dotProduct},
    { "lerp", _wrap_Vector2_lerp},
    {0,0}
};
static swig_lua_method swig_Vector2_meta[] = {
    { "__sub", _wrap_Vector2___sub},
    { "__mul", _wrap_Vector2___mul},
    { "__div", _wrap_Vector2___div},
    { "__eq", _wrap_Vector2___eq},
    { "__unm", _wrap_Vector2___unm},
    { "__add", _wrap_Vector2___add},
    {0,0}
};

static swig_lua_attribute swig_Vector2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector2_Sf_SwigStatic = {
    "Vector2",
    swig_Vector2_Sf_SwigStatic_methods,
    swig_Vector2_Sf_SwigStatic_attributes,
    swig_Vector2_Sf_SwigStatic_constants,
    swig_Vector2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector2_bases[] = {0};
static const char *swig_Vector2_base_names[] = {0};
static swig_lua_class _wrap_class_Vector2 = { "Vector2", "Vector2", &SWIGTYPE_p_Neo__Vector2,_proxy__wrap_new_Vector2, swig_delete_Vector2, swig_Vector2_methods, swig_Vector2_attributes, &swig_Vector2_Sf_SwigStatic, swig_Vector2_meta, swig_Vector2_bases, swig_Vector2_base_names };

static int _wrap_Vector3_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::x",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::x",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_get",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::y",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::y",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_get",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::z",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::z",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_get",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",0,0)
  result = (Neo::Vector3 *)new Neo::Vector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::Vector3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector3::Vector3",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Neo::Vector3 *)new Neo::Vector3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (Neo::Vector3 *)new Neo::Vector3(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::Vector3()\n"
    "    Neo::Vector3::Vector3(float,float,float)\n"
    "    Neo::Vector3::Vector3(float const)\n"
    "    Neo::Vector3::Vector3(float const *)\n"
    "    Neo::Vector3::Vector3(Neo::Vector3 const &)\n"
    "    Neo::Vector3::Vector3(Neo::Vector4 const &)\n"
    "    Neo::Vector3::Vector3(Neo::Vector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator +",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator +",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator +((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator -",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator -",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator -((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator +",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator +",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((Neo::Vector3 const *)arg1)->operator +((float const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator -",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator -",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((Neo::Vector3 const *)arg1)->operator -((float const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator -(Neo::Vector3 const &) const\n"
    "    Neo::Vector3::operator -(float const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator *",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->operator *(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator *",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator *",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator *((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator *(float const) const\n"
    "    Neo::Vector3::operator *(Neo::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator /",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator /",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator /((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator /",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->operator /(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator /(Neo::Vector3 const &) const\n"
    "    Neo::Vector3::operator /(float const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator ==",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator ==",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)((Neo::Vector3 const *)arg1)->operator ==((Neo::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator -",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___unm",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator -();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator +",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator +();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector3___add__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator +(Neo::Vector3 const &) const\n"
    "    Neo::Vector3::operator +(float const &) const\n"
    "    Neo::Vector3::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Vector3::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::set",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::set",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector3::set",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Vector3::set",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector3::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::loadIdentity",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_loadIdentity",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_crossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::crossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::crossProduct",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::crossProduct",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_crossProduct",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_crossProduct",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->crossProduct((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_dotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::dotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::dotProduct",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::dotProduct",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_dotProduct",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_dotProduct",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float)((Neo::Vector3 const *)arg1)->dotProduct((Neo::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_normalize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector3::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::normalize",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_normalize",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getNormalized(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getNormalized",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getNormalized",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->getNormalized();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getLength",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getLength",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float)((Neo::Vector3 const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getSquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::getSquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getSquaredLength",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getSquaredLength",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float)((Neo::Vector3 const *)arg1)->getSquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateX",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateX",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateX",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotateX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateY(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateY",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateY",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateY",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotateY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateZ(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateZ",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateZ",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateZ",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotateZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateAxis",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateAxis",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Vector3::rotateAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateAxis",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->rotateAxis(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedX",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedX",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedX",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->getRotatedX(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedY(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedY",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedY",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedY",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->getRotatedY(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedZ(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedZ",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedZ",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedZ",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->getRotatedZ(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedAxis",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedAxis",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Vector3::getRotatedAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedAxis",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->getRotatedAxis(arg2,(Neo::Vector3 const &)*arg3);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_lerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::lerp",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::lerp",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector3::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_lerp",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_lerp",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ((Neo::Vector3 const *)arg1)->lerp((Neo::Vector3 const &)*arg2,arg3);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
Neo::Vector3 *arg1 = (Neo::Vector3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3_attributes[] = {
    { "x", _wrap_Vector3_x_get, _wrap_Vector3_x_set },
    { "y", _wrap_Vector3_y_get, _wrap_Vector3_y_set },
    { "z", _wrap_Vector3_z_get, _wrap_Vector3_z_set },
    {0,0,0}
};
static swig_lua_method swig_Vector3_methods[]= {
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "__eq", _wrap_Vector3___eq},
    { "__unm", _wrap_Vector3___unm},
    { "__add", _wrap_Vector3___add},
    { "set", _wrap_Vector3_set},
    { "loadIdentity", _wrap_Vector3_loadIdentity},
    { "crossProduct", _wrap_Vector3_crossProduct},
    { "dotProduct", _wrap_Vector3_dotProduct},
    { "normalize", _wrap_Vector3_normalize},
    { "getNormalized", _wrap_Vector3_getNormalized},
    { "getLength", _wrap_Vector3_getLength},
    { "getSquaredLength", _wrap_Vector3_getSquaredLength},
    { "rotateX", _wrap_Vector3_rotateX},
    { "rotateY", _wrap_Vector3_rotateY},
    { "rotateZ", _wrap_Vector3_rotateZ},
    { "rotateAxis", _wrap_Vector3_rotateAxis},
    { "getRotatedX", _wrap_Vector3_getRotatedX},
    { "getRotatedY", _wrap_Vector3_getRotatedY},
    { "getRotatedZ", _wrap_Vector3_getRotatedZ},
    { "getRotatedAxis", _wrap_Vector3_getRotatedAxis},
    { "lerp", _wrap_Vector3_lerp},
    {0,0}
};
static swig_lua_method swig_Vector3_meta[] = {
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "__eq", _wrap_Vector3___eq},
    { "__unm", _wrap_Vector3___unm},
    { "__add", _wrap_Vector3___add},
    {0,0}
};

static swig_lua_attribute swig_Vector3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3_Sf_SwigStatic = {
    "Vector3",
    swig_Vector3_Sf_SwigStatic_methods,
    swig_Vector3_Sf_SwigStatic_attributes,
    swig_Vector3_Sf_SwigStatic_constants,
    swig_Vector3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3_bases[] = {0};
static const char *swig_Vector3_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3 = { "Vector3", "Vector3", &SWIGTYPE_p_Neo__Vector3,_proxy__wrap_new_Vector3, swig_delete_Vector3, swig_Vector3_methods, swig_Vector3_attributes, &swig_Vector3_Sf_SwigStatic, swig_Vector3_meta, swig_Vector3_bases, swig_Vector3_base_names };

static int _wrap_Vector4_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::x",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_x_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::x",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_x_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::y",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_y_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::y",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_y_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_z_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::z",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_z_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_z_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::z",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_z_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_w_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::w",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::w",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_w_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_w_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::w",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_w_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",0,0)
  result = (Neo::Vector4 *)new Neo::Vector4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::Vector4",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector4::Vector4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Vector4::Vector4",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (Neo::Vector4 *)new Neo::Vector4(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (Neo::Vector4 *)new Neo::Vector4(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Vector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Color const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector4__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_2(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Vector4__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector4::Vector4()\n"
    "    Neo::Vector4::Vector4(float,float,float,float)\n"
    "    Neo::Vector4::Vector4(float const)\n"
    "    Neo::Vector4::Vector4(float const *)\n"
    "    Neo::Vector4::Vector4(Neo::Vector4 const &)\n"
    "    Neo::Vector4::Vector4(Neo::Vector3 const &)\n"
    "    Neo::Vector4::Vector4(Neo::Color const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector4___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator +",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::operator +",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___add",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___add",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator +((Neo::Vector4 const &)*arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___sub(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator -",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::operator -",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___sub",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___sub",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator -((Neo::Vector4 const &)*arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___mul(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator *",1,"Neo::Vector4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___mul",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector4 const *)arg1)->operator *(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___div(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator /",1,"Neo::Vector4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___div",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector4 const *)arg1)->operator /(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector4::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator ==",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::operator ==",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___eq",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___eq",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (bool)((Neo::Vector4 const *)arg1)->operator ==((Neo::Vector4 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator -",1,"Neo::Vector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___unm",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator -();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator +",1,"Neo::Vector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___add",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator +();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector4___add__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector4___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector4___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector4::operator +(Neo::Vector4 const &) const\n"
    "    Neo::Vector4::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector4_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("Neo::Vector4::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::set",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector4::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Vector4::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Vector4::set",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector4::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::loadIdentity",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_loadIdentity",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_dotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::dotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::dotProduct",1,"Neo::Vector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::dotProduct",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_dotProduct",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_dotProduct",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float)(arg1)->dotProduct((Neo::Vector4 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_lerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::lerp",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::lerp",2,"Neo::Vector4 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector4::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_lerp",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_lerp",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ((Neo::Vector4 const *)arg1)->lerp((Neo::Vector4 const &)*arg2,arg3);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector4(void *obj) {
Neo::Vector4 *arg1 = (Neo::Vector4 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector4_attributes[] = {
    { "x", _wrap_Vector4_x_get, _wrap_Vector4_x_set },
    { "y", _wrap_Vector4_y_get, _wrap_Vector4_y_set },
    { "z", _wrap_Vector4_z_get, _wrap_Vector4_z_set },
    { "w", _wrap_Vector4_w_get, _wrap_Vector4_w_set },
    {0,0,0}
};
static swig_lua_method swig_Vector4_methods[]= {
    { "__sub", _wrap_Vector4___sub},
    { "__mul", _wrap_Vector4___mul},
    { "__div", _wrap_Vector4___div},
    { "__eq", _wrap_Vector4___eq},
    { "__unm", _wrap_Vector4___unm},
    { "__add", _wrap_Vector4___add},
    { "set", _wrap_Vector4_set},
    { "loadIdentity", _wrap_Vector4_loadIdentity},
    { "dotProduct", _wrap_Vector4_dotProduct},
    { "lerp", _wrap_Vector4_lerp},
    {0,0}
};
static swig_lua_method swig_Vector4_meta[] = {
    { "__sub", _wrap_Vector4___sub},
    { "__mul", _wrap_Vector4___mul},
    { "__div", _wrap_Vector4___div},
    { "__eq", _wrap_Vector4___eq},
    { "__unm", _wrap_Vector4___unm},
    { "__add", _wrap_Vector4___add},
    {0,0}
};

static swig_lua_attribute swig_Vector4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector4_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector4_Sf_SwigStatic = {
    "Vector4",
    swig_Vector4_Sf_SwigStatic_methods,
    swig_Vector4_Sf_SwigStatic_attributes,
    swig_Vector4_Sf_SwigStatic_constants,
    swig_Vector4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector4_bases[] = {0};
static const char *swig_Vector4_base_names[] = {0};
static swig_lua_class _wrap_class_Vector4 = { "Vector4", "Vector4", &SWIGTYPE_p_Neo__Vector4,_proxy__wrap_new_Vector4, swig_delete_Vector4, swig_Vector4_methods, swig_Vector4_attributes, &swig_Vector4_Sf_SwigStatic, swig_Vector4_meta, swig_Vector4_bases, swig_Vector4_base_names };

static int _wrap_Color_r_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::r",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::r",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_r_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_r_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::r",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_r_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::g",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::g",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_g_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::g",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_g_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_b_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::b",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::b",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_b_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_b_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::b",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_b_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_a_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::a",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::a",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_a_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_a_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::a",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_a_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",0,0)
  result = (Neo::Color *)new Neo::Color();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"unsigned char");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::Color",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Color::Color",3,"unsigned char");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Color::Color",4,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  result = (Neo::Color *)new Neo::Color(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (Neo::Color *)new Neo::Color((Neo::Color const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Color *)new Neo::Color((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (Neo::Color *)new Neo::Color((Neo::Vector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_4(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Color__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Color'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Color::Color()\n"
    "    Neo::Color::Color(unsigned char,unsigned char,unsigned char,unsigned char)\n"
    "    Neo::Color::Color(Neo::Color const &)\n"
    "    Neo::Color::Color(Neo::Vector3 const &)\n"
    "    Neo::Color::Color(Neo::Vector4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  Neo::Color *arg2 = 0 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator +",1,"Neo::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Color::operator +",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___add",1,SWIGTYPE_p_Neo__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___add",2,SWIGTYPE_p_Neo__Color);
  }
  
  result = ((Neo::Color const *)arg1)->operator +((Neo::Color const &)*arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  Neo::Color *arg2 = 0 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator -",1,"Neo::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Color::operator -",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___sub",1,SWIGTYPE_p_Neo__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___sub",2,SWIGTYPE_p_Neo__Color);
  }
  
  result = ((Neo::Color const *)arg1)->operator -((Neo::Color const &)*arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  int arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator +",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator +",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___add",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator +(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Color::operator +(Neo::Color const &) const\n"
    "    Neo::Color::operator +(int const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Color___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  int arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator -",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator -",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___sub",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator -(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Color::operator -(Neo::Color const &) const\n"
    "    Neo::Color::operator -(int const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Color___mul(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  float arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator *",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___mul",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator *(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___div(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  float arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator /",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___div",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator /(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  Neo::Color *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Color::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator ==",1,"Neo::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Color::operator ==",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___eq",1,SWIGTYPE_p_Neo__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___eq",2,SWIGTYPE_p_Neo__Color);
  }
  
  result = (bool)((Neo::Color const *)arg1)->operator ==((Neo::Color const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  
  SWIG_check_num_args("Neo::Color::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::set",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::set",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Color::set",3,"unsigned char");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Color::set",4,"unsigned char");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Color::set",5,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned char)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color(void *obj) {
Neo::Color *arg1 = (Neo::Color *) obj;
delete arg1;
}
static int _proxy__wrap_new_Color(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Color);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Color_attributes[] = {
    { "r", _wrap_Color_r_get, _wrap_Color_r_set },
    { "g", _wrap_Color_g_get, _wrap_Color_g_set },
    { "b", _wrap_Color_b_get, _wrap_Color_b_set },
    { "a", _wrap_Color_a_get, _wrap_Color_a_set },
    {0,0,0}
};
static swig_lua_method swig_Color_methods[]= {
    { "__add", _wrap_Color___add},
    { "__sub", _wrap_Color___sub},
    { "__mul", _wrap_Color___mul},
    { "__div", _wrap_Color___div},
    { "__eq", _wrap_Color___eq},
    { "set", _wrap_Color_set},
    {0,0}
};
static swig_lua_method swig_Color_meta[] = {
    { "__add", _wrap_Color___add},
    { "__sub", _wrap_Color___sub},
    { "__mul", _wrap_Color___mul},
    { "__div", _wrap_Color___div},
    { "__eq", _wrap_Color___eq},
    {0,0}
};

static swig_lua_attribute swig_Color_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Color_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Color_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Color_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Color_Sf_SwigStatic = {
    "Color",
    swig_Color_Sf_SwigStatic_methods,
    swig_Color_Sf_SwigStatic_attributes,
    swig_Color_Sf_SwigStatic_constants,
    swig_Color_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Color_bases[] = {0};
static const char *swig_Color_base_names[] = {0};
static swig_lua_class _wrap_class_Color = { "Color", "Color", &SWIGTYPE_p_Neo__Color,_proxy__wrap_new_Color, swig_delete_Color, swig_Color_methods, swig_Color_attributes, &swig_Color_Sf_SwigStatic, swig_Color_meta, swig_Color_bases, swig_Color_base_names };

static int _wrap_Matrix4x4_entries_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::entries",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::entries",1,"Neo::Matrix4x4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Matrix4x4::entries",2,"float [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_entries_set",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrix4x4_entries_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->entries;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_entries_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::entries",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_entries_get",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = (float *)(float *) ((arg1)->entries);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",0,0)
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",16,16)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",12,"float");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",13,"float");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",14,"float");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",15,"float");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",16,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11);
  arg12 = (float)lua_tonumber(L, 12);
  arg13 = (float)lua_tonumber(L, 13);
  arg14 = (float)lua_tonumber(L, 14);
  arg15 = (float)lua_tonumber(L, 15);
  arg16 = (float)lua_tonumber(L, 16);
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Matrix4x4",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",1,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("new_Matrix4x4",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4((Neo::Matrix4x4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4(lua_State* L) {
  int argc;
  int argv[17]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Matrix4x4__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix4x4__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix4x4__SWIG_3(L);
    }
  }
  if (argc == 16) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isnumber(L,argv[15]);
                                  }
                                  if (_v) {
                                    return _wrap_new_Matrix4x4__SWIG_1(L);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Matrix4x4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::Matrix4x4()\n"
    "    Neo::Matrix4x4::Matrix4x4(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)\n"
    "    Neo::Matrix4x4::Matrix4x4(float const *)\n"
    "    Neo::Matrix4x4::Matrix4x4(Neo::Matrix4x4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator +",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator +",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___add",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___add",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator +((Neo::Matrix4x4 const &)*arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___sub(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator -",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator -",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___sub",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___sub",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator -((Neo::Matrix4x4 const &)*arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator *((Neo::Matrix4x4 const &)*arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->operator *(arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___div(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator /",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___div",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->operator /(arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator ==",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator ==",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___eq",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___eq",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = (bool)((Neo::Matrix4x4 const *)arg1)->operator ==((Neo::Matrix4x4 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator -",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___unm",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator -();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator +",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___add",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator +();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix4x4___add__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::operator +(Neo::Matrix4x4 const &) const\n"
    "    Neo::Matrix4x4::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"Neo::Vector4 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_Neo__Vector4);
  }
  arg2 = *argp2;
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator *(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator *(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::operator *(Neo::Matrix4x4 const &) const\n"
    "    Neo::Matrix4x4::operator *(float const) const\n"
    "    Neo::Matrix4x4::operator *(Neo::Vector4 const) const\n"
    "    Neo::Matrix4x4::operator *(Neo::Vector3 const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4___call(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  int arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator ()",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___call",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::loadIdentity",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_loadIdentity",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_loadZero(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::loadZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::loadZero",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_loadZero",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->loadZero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_invert(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::invert",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_invert",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_transpose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::transpose",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_transpose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->transpose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_affineInvert(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::affineInvert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::affineInvert",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_affineInvert",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->affineInvert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_invertTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::invertTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::invertTranspose",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_invertTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->invertTranspose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_affineInvertTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::affineInvertTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::affineInvertTranspose",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_affineInvertTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->affineInvertTranspose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_scale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::scale",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::scale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_scale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_scale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->scale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_rotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::rotate",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::rotate",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::rotate",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_rotate",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_rotate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_translate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::translate",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::translate",2,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_translate",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_translate",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->translate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setEntry",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setEntry",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setEntry",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setEntry",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setEntry",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setEntry(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setScale",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setScale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setScale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setScale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setScale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setUniformScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setUniformScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setUniformScale",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setUniformScale",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setUniformScale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setUniformScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setTranslation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setTranslation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setTranslation",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setTranslation",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslation",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslation",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setTranslation((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setTranslationPart(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setTranslationPart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setTranslationPart",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setTranslationPart",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslationPart",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslationPart",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setTranslationPart((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationAxis",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationAxis",2,"float const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setRotationAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationAxis",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setRotationAxis(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationX",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationX",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationX",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setRotationX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationY(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationY",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationY",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationY",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setRotationY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationZ(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationZ",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationZ",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationZ",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setRotationZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationEuler(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationEuler",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationEuler",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setRotationEuler(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationPartEuler__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationPartEuler",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationPartEuler",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setRotationPartEuler(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationPartEuler__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationPartEuler",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationPartEuler",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationPartEuler",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setRotationPartEuler((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationPartEuler(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4_setRotationPartEuler__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix4x4_setRotationPartEuler__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_setRotationPartEuler'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::setRotationPartEuler(float const,float const,float const)\n"
    "    Neo::Matrix4x4::setRotationPartEuler(Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4_getEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getEntry",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getEntry",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getEntry",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)((Neo::Matrix4x4 const *)arg1)->getEntry(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getRotatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getRotatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getRotatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getRotatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getRotatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getRotatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getRotatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInverseRotatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInverseRotatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInverseRotatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getInverseRotatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInverseRotatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getInverseRotatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInverseRotatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getTranslatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getTranslatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getTranslatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getTranslatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getTranslatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInversetranslatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInversetranslatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInversetranslatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getInversetranslatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInversetranslatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getInversetranslatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInversetranslatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getTranslationPart(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getTranslationPart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getTranslationPart",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslationPart",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getTranslationPart();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getEulerAngles(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getEulerAngles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getEulerAngles",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getEulerAngles",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getEulerAngles();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getScale",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getScale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getScale();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getRow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getRow",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getRow",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getRow",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->getRow(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getColumn(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getColumn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getColumn",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getColumn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getColumn",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->getColumn(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInverse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInverse",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInverse",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInverse();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getTranspose",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getTranspose();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInversetranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInversetranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInversetranspose",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInversetranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInversetranspose();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getAffineInverse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getAffineInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getAffineInverse",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getAffineInverse",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getAffineInverse();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getAffineInverseTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getAffineInverseTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getAffineInverseTranspose",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getAffineInverseTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getAffineInverseTranspose();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_rotateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::rotateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::rotateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::rotateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_rotateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_rotateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->rotateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_inverseRotateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::inverseRotateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::inverseRotateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::inverseRotateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_inverseRotateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_inverseRotateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->inverseRotateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_translateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::translateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::translateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::translateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_translateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_translateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->translateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_inversetranslateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::inversetranslateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::inversetranslateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::inversetranslateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_inversetranslateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_inversetranslateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->inversetranslateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Matrix4x4(void *obj) {
Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Matrix4x4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Matrix4x4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Matrix4x4_attributes[] = {
    { "entries", _wrap_Matrix4x4_entries_get, _wrap_Matrix4x4_entries_set },
    {0,0,0}
};
static swig_lua_method swig_Matrix4x4_methods[]= {
    { "__sub", _wrap_Matrix4x4___sub},
    { "__div", _wrap_Matrix4x4___div},
    { "__eq", _wrap_Matrix4x4___eq},
    { "__unm", _wrap_Matrix4x4___unm},
    { "__add", _wrap_Matrix4x4___add},
    { "__mul", _wrap_Matrix4x4___mul},
    { "__call", _wrap_Matrix4x4___call},
    { "loadIdentity", _wrap_Matrix4x4_loadIdentity},
    { "loadZero", _wrap_Matrix4x4_loadZero},
    { "invert", _wrap_Matrix4x4_invert},
    { "transpose", _wrap_Matrix4x4_transpose},
    { "affineInvert", _wrap_Matrix4x4_affineInvert},
    { "invertTranspose", _wrap_Matrix4x4_invertTranspose},
    { "affineInvertTranspose", _wrap_Matrix4x4_affineInvertTranspose},
    { "scale", _wrap_Matrix4x4_scale},
    { "rotate", _wrap_Matrix4x4_rotate},
    { "translate", _wrap_Matrix4x4_translate},
    { "setEntry", _wrap_Matrix4x4_setEntry},
    { "setScale", _wrap_Matrix4x4_setScale},
    { "setUniformScale", _wrap_Matrix4x4_setUniformScale},
    { "setTranslation", _wrap_Matrix4x4_setTranslation},
    { "setTranslationPart", _wrap_Matrix4x4_setTranslationPart},
    { "setRotationAxis", _wrap_Matrix4x4_setRotationAxis},
    { "setRotationX", _wrap_Matrix4x4_setRotationX},
    { "setRotationY", _wrap_Matrix4x4_setRotationY},
    { "setRotationZ", _wrap_Matrix4x4_setRotationZ},
    { "setRotationEuler", _wrap_Matrix4x4_setRotationEuler},
    { "setRotationPartEuler", _wrap_Matrix4x4_setRotationPartEuler},
    { "getEntry", _wrap_Matrix4x4_getEntry},
    { "getRotatedVector3", _wrap_Matrix4x4_getRotatedVector3},
    { "getInverseRotatedVector3", _wrap_Matrix4x4_getInverseRotatedVector3},
    { "getTranslatedVector3", _wrap_Matrix4x4_getTranslatedVector3},
    { "getInversetranslatedVector3", _wrap_Matrix4x4_getInversetranslatedVector3},
    { "getTranslationPart", _wrap_Matrix4x4_getTranslationPart},
    { "getEulerAngles", _wrap_Matrix4x4_getEulerAngles},
    { "getScale", _wrap_Matrix4x4_getScale},
    { "getRow", _wrap_Matrix4x4_getRow},
    { "getColumn", _wrap_Matrix4x4_getColumn},
    { "getInverse", _wrap_Matrix4x4_getInverse},
    { "getTranspose", _wrap_Matrix4x4_getTranspose},
    { "getInversetranspose", _wrap_Matrix4x4_getInversetranspose},
    { "getAffineInverse", _wrap_Matrix4x4_getAffineInverse},
    { "getAffineInverseTranspose", _wrap_Matrix4x4_getAffineInverseTranspose},
    { "rotateVector3", _wrap_Matrix4x4_rotateVector3},
    { "inverseRotateVector3", _wrap_Matrix4x4_inverseRotateVector3},
    { "translateVector3", _wrap_Matrix4x4_translateVector3},
    { "inversetranslateVector3", _wrap_Matrix4x4_inversetranslateVector3},
    {0,0}
};
static swig_lua_method swig_Matrix4x4_meta[] = {
    { "__sub", _wrap_Matrix4x4___sub},
    { "__div", _wrap_Matrix4x4___div},
    { "__eq", _wrap_Matrix4x4___eq},
    { "__unm", _wrap_Matrix4x4___unm},
    { "__add", _wrap_Matrix4x4___add},
    { "__mul", _wrap_Matrix4x4___mul},
    { "__call", _wrap_Matrix4x4___call},
    {0,0}
};

static swig_lua_attribute swig_Matrix4x4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Matrix4x4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Matrix4x4_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Matrix4x4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Matrix4x4_Sf_SwigStatic = {
    "Matrix4x4",
    swig_Matrix4x4_Sf_SwigStatic_methods,
    swig_Matrix4x4_Sf_SwigStatic_attributes,
    swig_Matrix4x4_Sf_SwigStatic_constants,
    swig_Matrix4x4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Matrix4x4_bases[] = {0};
static const char *swig_Matrix4x4_base_names[] = {0};
static swig_lua_class _wrap_class_Matrix4x4 = { "Matrix4x4", "Matrix4x4", &SWIGTYPE_p_Neo__Matrix4x4,_proxy__wrap_new_Matrix4x4, swig_delete_Matrix4x4, swig_Matrix4x4_methods, swig_Matrix4x4_attributes, &swig_Matrix4x4_Sf_SwigStatic, swig_Matrix4x4_meta, swig_Matrix4x4_bases, swig_Matrix4x4_base_names };

static int _wrap_Quaternion_values_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("Neo::Quaternion::values",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::values",1,"Neo::Quaternion *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Quaternion::values",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_values_set",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_values_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->values;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_values_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::values",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_values_get",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (float *)(float *) ((arg1)->values);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",0,0)
  result = (Neo::Quaternion *)new Neo::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::Quaternion",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Quaternion::Quaternion",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"Neo::Vector3 const &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,(Neo::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::Quaternion",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = 0 ;
  Neo::Quaternion arg2 ;
  float arg3 ;
  Neo::Quaternion *argp2 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"Neo::Quaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"Neo::Quaternion");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::Quaternion",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Neo__Quaternion);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (Neo::Quaternion *)new Neo::Quaternion((Neo::Quaternion const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Quaternion::Quaternion()\n"
    "    Neo::Quaternion::Quaternion(float,float,float,float)\n"
    "    Neo::Quaternion::Quaternion(float,Neo::Vector3 const &)\n"
    "    Neo::Quaternion::Quaternion(float,float,float)\n"
    "    Neo::Quaternion::Quaternion(Neo::Quaternion const &,Neo::Quaternion,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___mul(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  Neo::Quaternion result;
  
  SWIG_check_num_args("Neo::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::operator *",1,"Neo::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::operator *",2,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->operator *((Neo::Quaternion const &)*arg2);
  {
    Neo::Quaternion * resultptr = new Neo::Quaternion((const Neo::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion result;
  
  SWIG_check_num_args("Neo::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::operator -",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___unm",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->operator -();
  {
    Neo::Quaternion * resultptr = new Neo::Quaternion((const Neo::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::operator ==",1,"Neo::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::operator ==",2,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (bool)((Neo::Quaternion const *)arg1)->operator ==((Neo::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_normalize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::normalize",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_normalize",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::loadIdentity",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_loadIdentity",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setFromAngles(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Quaternion::setFromAngles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",1,"Neo::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setFromAngles",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setFromAngles(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_slerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  Neo::Quaternion *arg3 = 0 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Quaternion::slerp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::slerp",1,"Neo::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::slerp",2,"Neo::Quaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Quaternion::slerp",3,"Neo::Quaternion const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Quaternion::slerp",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",3,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->slerp((Neo::Quaternion const &)*arg2,(Neo::Quaternion const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_invert(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::invert",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_invert",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setFromAngleAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::setFromAngleAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::setFromAngleAxis",1,"Neo::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::setFromAngleAxis",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Quaternion::setFromAngleAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setFromAngleAxis",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setFromAngleAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setFromAngleAxis(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setFromVectors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::setFromVectors",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::setFromVectors",1,"Neo::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::setFromVectors",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Quaternion::setFromVectors",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setFromVectors",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setFromVectors",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setFromVectors",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setFromVectors((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getEulerAngles(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Quaternion::getEulerAngles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::getEulerAngles",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getEulerAngles",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->getEulerAngles();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Quaternion::getAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::getAngle",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getAngle",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (float)((Neo::Quaternion const *)arg1)->getAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Quaternion::getAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::getAxis",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getAxis",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->getAxis();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
Neo::Quaternion *arg1 = (Neo::Quaternion *) obj;
delete arg1;
}
static int _proxy__wrap_new_Quaternion(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Quaternion);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Quaternion_attributes[] = {
    { "values", _wrap_Quaternion_values_get, _wrap_Quaternion_values_set },
    {0,0,0}
};
static swig_lua_method swig_Quaternion_methods[]= {
    { "__mul", _wrap_Quaternion___mul},
    { "__unm", _wrap_Quaternion___unm},
    { "__eq", _wrap_Quaternion___eq},
    { "normalize", _wrap_Quaternion_normalize},
    { "loadIdentity", _wrap_Quaternion_loadIdentity},
    { "setFromAngles", _wrap_Quaternion_setFromAngles},
    { "slerp", _wrap_Quaternion_slerp},
    { "invert", _wrap_Quaternion_invert},
    { "setFromAngleAxis", _wrap_Quaternion_setFromAngleAxis},
    { "setFromVectors", _wrap_Quaternion_setFromVectors},
    { "getEulerAngles", _wrap_Quaternion_getEulerAngles},
    { "getAngle", _wrap_Quaternion_getAngle},
    { "getAxis", _wrap_Quaternion_getAxis},
    {0,0}
};
static swig_lua_method swig_Quaternion_meta[] = {
    { "__mul", _wrap_Quaternion___mul},
    { "__unm", _wrap_Quaternion___unm},
    { "__eq", _wrap_Quaternion___eq},
    {0,0}
};

static swig_lua_attribute swig_Quaternion_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Quaternion_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Quaternion_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Quaternion_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Quaternion_Sf_SwigStatic = {
    "Quaternion",
    swig_Quaternion_Sf_SwigStatic_methods,
    swig_Quaternion_Sf_SwigStatic_attributes,
    swig_Quaternion_Sf_SwigStatic_constants,
    swig_Quaternion_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Quaternion_bases[] = {0};
static const char *swig_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_Quaternion = { "Quaternion", "Quaternion", &SWIGTYPE_p_Neo__Quaternion,_proxy__wrap_new_Quaternion, swig_delete_Quaternion, swig_Quaternion_methods, swig_Quaternion_attributes, &swig_Quaternion_Sf_SwigStatic, swig_Quaternion_meta, swig_Quaternion_bases, swig_Quaternion_base_names };

static int _wrap_SystemContext_getScreenSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::SystemContext::getScreenSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::getScreenSize",1,"Neo::SystemContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SystemContext::getScreenSize",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::SystemContext::getScreenSize",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_getScreenSize",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SystemContext_getScreenSize",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SystemContext_getScreenSize",3,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->getScreenSize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_setCursorPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Neo::SystemContext::setCursorPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::setCursorPosition",1,"Neo::SystemContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SystemContext::setCursorPosition",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SystemContext::setCursorPosition",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_setCursorPosition",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setCursorPosition(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_hideCursor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  
  SWIG_check_num_args("Neo::SystemContext::hideCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::hideCursor",1,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_hideCursor",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  (arg1)->hideCursor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_showCursor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  
  SWIG_check_num_args("Neo::SystemContext::showCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::showCursor",1,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_showCursor",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  (arg1)->showCursor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_getWorkingDirectory(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::SystemContext::getWorkingDirectory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::getWorkingDirectory",1,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_getWorkingDirectory",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  result = (char *)(arg1)->getWorkingDirectory();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_getSystemTick(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Neo::SystemContext::getSystemTick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::getSystemTick",1,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_getSystemTick",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  result = (unsigned long)(arg1)->getSystemTick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SystemContext(void *obj) {
Neo::SystemContext *arg1 = (Neo::SystemContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_SystemContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SystemContext_methods[]= {
    { "getScreenSize", _wrap_SystemContext_getScreenSize},
    { "setCursorPosition", _wrap_SystemContext_setCursorPosition},
    { "hideCursor", _wrap_SystemContext_hideCursor},
    { "showCursor", _wrap_SystemContext_showCursor},
    { "getWorkingDirectory", _wrap_SystemContext_getWorkingDirectory},
    { "getSystemTick", _wrap_SystemContext_getSystemTick},
    {0,0}
};
static swig_lua_method swig_SystemContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SystemContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SystemContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SystemContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SystemContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SystemContext_Sf_SwigStatic = {
    "SystemContext",
    swig_SystemContext_Sf_SwigStatic_methods,
    swig_SystemContext_Sf_SwigStatic_attributes,
    swig_SystemContext_Sf_SwigStatic_constants,
    swig_SystemContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SystemContext_bases[] = {0};
static const char *swig_SystemContext_base_names[] = {0};
static swig_lua_class _wrap_class_SystemContext = { "SystemContext", "SystemContext", &SWIGTYPE_p_Neo__SystemContext,0, swig_delete_SystemContext, swig_SystemContext_methods, swig_SystemContext_attributes, &swig_SystemContext_Sf_SwigStatic, swig_SystemContext_meta, swig_SystemContext_bases, swig_SystemContext_base_names };

static int _wrap_InputContext_createKey(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::createKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::createKey",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::createKey",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_createKey",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->createKey((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_createAxis__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Neo::InputContext::createAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::createAxis",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::createAxis",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::InputContext::createAxis",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_createAxis",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->createAxis((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_createAxis__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::createAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::createAxis",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::createAxis",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_createAxis",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->createAxis((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_createAxis(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__InputContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_InputContext_createAxis__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__InputContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputContext_createAxis__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputContext_createAxis'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::InputContext::createAxis(char const *,bool)\n"
    "    Neo::InputContext::createAxis(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_InputContext_createProperty(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::createProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::createProperty",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::createProperty",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_createProperty",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->createProperty((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_downKey(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::downKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::downKey",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::downKey",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_downKey",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->downKey((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_upKey(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::upKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::upKey",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::upKey",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_upKey",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->upKey((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_setAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::InputContext::setAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::setAxis",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::setAxis",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::InputContext::setAxis",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_setAxis",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setAxis((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Neo::InputContext::setProperty",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::setProperty",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::setProperty",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::InputContext::setProperty",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_setProperty",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setProperty((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_isKeyPressed(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::InputContext::isKeyPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::isKeyPressed",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::isKeyPressed",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_isKeyPressed",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->isKeyPressed((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_onKeyDown(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::InputContext::onKeyDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::onKeyDown",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::onKeyDown",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_onKeyDown",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->onKeyDown((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_onKeyUp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::InputContext::onKeyUp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::onKeyUp",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::onKeyUp",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_onKeyUp",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->onKeyUp((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::InputContext::getAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getAxis",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::getAxis",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getAxis",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (float)(arg1)->getAxis((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::InputContext::getProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getProperty",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::getProperty",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getProperty",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->getProperty((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_beginTouch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  SWIG_check_num_args("Neo::InputContext::beginTouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::beginTouch",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::beginTouch",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::InputContext::beginTouch",3,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_beginTouch",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("InputContext_beginTouch",3,SWIGTYPE_p_Neo__Vector2);
  }
  arg3 = *argp3;
  
  (arg1)->beginTouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_updateTouch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  SWIG_check_num_args("Neo::InputContext::updateTouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::updateTouch",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::updateTouch",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::InputContext::updateTouch",3,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_updateTouch",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("InputContext_updateTouch",3,SWIGTYPE_p_Neo__Vector2);
  }
  arg3 = *argp3;
  
  (arg1)->updateTouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_endTouch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  SWIG_check_num_args("Neo::InputContext::endTouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::endTouch",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::endTouch",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::InputContext::endTouch",3,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_endTouch",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("InputContext_endTouch",3,SWIGTYPE_p_Neo__Vector2);
  }
  arg3 = *argp3;
  
  (arg1)->endTouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_cancelTouch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  SWIG_check_num_args("Neo::InputContext::cancelTouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::cancelTouch",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::cancelTouch",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::InputContext::cancelTouch",3,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_cancelTouch",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("InputContext_cancelTouch",3,SWIGTYPE_p_Neo__Vector2);
  }
  arg3 = *argp3;
  
  (arg1)->cancelTouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getTouchPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::InputContext::getTouchPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getTouchPosition",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::getTouchPosition",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getTouchPosition",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getTouchPosition(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getLastTouchPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::InputContext::getLastTouchPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getLastTouchPosition",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::getLastTouchPosition",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getLastTouchPosition",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getLastTouchPosition(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getTouchPhase(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::TOUCH_PHASE result;
  
  SWIG_check_num_args("Neo::InputContext::getTouchPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getTouchPhase",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::getTouchPhase",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getTouchPhase",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Neo::TOUCH_PHASE)(arg1)->getTouchPhase(arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_flush(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::flush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::flush",1,"Neo::InputContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_flush",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  (arg1)->flush();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InputContext(void *obj) {
Neo::InputContext *arg1 = (Neo::InputContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_InputContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InputContext_methods[]= {
    { "createKey", _wrap_InputContext_createKey},
    { "createAxis", _wrap_InputContext_createAxis},
    { "createProperty", _wrap_InputContext_createProperty},
    { "downKey", _wrap_InputContext_downKey},
    { "upKey", _wrap_InputContext_upKey},
    { "setAxis", _wrap_InputContext_setAxis},
    { "setProperty", _wrap_InputContext_setProperty},
    { "isKeyPressed", _wrap_InputContext_isKeyPressed},
    { "onKeyDown", _wrap_InputContext_onKeyDown},
    { "onKeyUp", _wrap_InputContext_onKeyUp},
    { "getAxis", _wrap_InputContext_getAxis},
    { "getProperty", _wrap_InputContext_getProperty},
    { "beginTouch", _wrap_InputContext_beginTouch},
    { "updateTouch", _wrap_InputContext_updateTouch},
    { "endTouch", _wrap_InputContext_endTouch},
    { "cancelTouch", _wrap_InputContext_cancelTouch},
    { "getTouchPosition", _wrap_InputContext_getTouchPosition},
    { "getLastTouchPosition", _wrap_InputContext_getLastTouchPosition},
    { "getTouchPhase", _wrap_InputContext_getTouchPhase},
    { "flush", _wrap_InputContext_flush},
    {0,0}
};
static swig_lua_method swig_InputContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InputContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InputContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InputContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InputContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InputContext_Sf_SwigStatic = {
    "InputContext",
    swig_InputContext_Sf_SwigStatic_methods,
    swig_InputContext_Sf_SwigStatic_attributes,
    swig_InputContext_Sf_SwigStatic_constants,
    swig_InputContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InputContext_bases[] = {0};
static const char *swig_InputContext_base_names[] = {0};
static swig_lua_class _wrap_class_InputContext = { "InputContext", "InputContext", &SWIGTYPE_p_Neo__InputContext,0, swig_delete_InputContext, swig_InputContext_methods, swig_InputContext_attributes, &swig_InputContext_Sf_SwigStatic, swig_InputContext_meta, swig_InputContext_bases, swig_InputContext_base_names };

static int _wrap_RenderingContext_getRendererVersion(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getRendererVersion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getRendererVersion",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getRendererVersion",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  result = (char *)(arg1)->getRendererVersion();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setOrthoView(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setOrthoView",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setOrthoView",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  (arg1)->setOrthoView(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setPerspectiveView(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setPerspectiveView",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setPerspectiveView",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setPerspectiveView(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setViewport(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setViewport",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setViewport",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setViewport",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setViewport",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setViewport",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setViewport",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setViewport",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->setViewport(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::clear",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::clear",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_clear",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setClearColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setClearColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setClearColor",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setClearColor",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setClearColor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setClearColor",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setClearColor((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_init(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::init",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_init",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableTexture",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableTexture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableTexture",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableTexture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureGenMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::TEX_GEN_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureGenMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureGenMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureGenMode",2,"Neo::TEX_GEN_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureGenMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::TEX_GEN_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setTextureGenMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureFilterMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::TEX_FILTER_MODES arg2 ;
  Neo::TEX_FILTER_MODES arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureFilterMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureFilterMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureFilterMode",2,"Neo::TEX_FILTER_MODES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setTextureFilterMode",3,"Neo::TEX_FILTER_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureFilterMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::TEX_FILTER_MODES)(int)lua_tonumber(L, 2);
  arg3 = (Neo::TEX_FILTER_MODES)(int)lua_tonumber(L, 3);
  (arg1)->setTextureFilterMode(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureUWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureUWrapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureUWrapMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureUWrapMode",2,"Neo::WRAP_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureUWrapMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::WRAP_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setTextureUWrapMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureVWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureVWrapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureVWrapMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureVWrapMode",2,"Neo::WRAP_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureVWrapMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::WRAP_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setTextureVWrapMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureCombineMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::TEX_COMBINE_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureCombineMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureCombineMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureCombineMode",2,"Neo::TEX_COMBINE_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureCombineMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::TEX_COMBINE_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setTextureCombineMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindTexture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->bindTexture(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindTexture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->bindTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindTexture(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RenderingContext_bindTexture__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderingContext_bindTexture__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_bindTexture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::bindTexture(unsigned int,unsigned int const)\n"
    "    Neo::RenderingContext::bindTexture(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_createTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createTexture",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createTexture",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createTexture",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteTexture",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteTexture",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteTexture",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendTextureImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Image *arg2 = (Neo::Image *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendTextureImage",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",2,"Neo::Image *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendTextureImage",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("RenderingContext_sendTextureImage",2,SWIGTYPE_p_Neo__Image);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->sendTextureImage(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_texImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo::VAR_TYPES arg5 ;
  Neo::TEX_MODES arg6 ;
  void *arg7 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::texImage",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::texImage",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::texImage",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::texImage",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::texImage",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::texImage",5,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::RenderingContext::texImage",6,"Neo::TEX_MODES");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Neo::RenderingContext::texImage",7,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_texImage",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 5);
  arg6 = (Neo::TEX_MODES)(int)lua_tonumber(L, 6);
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"RenderingContext_texImage");
  (arg1)->texImage(arg2,arg3,arg4,arg5,arg6,(void const *)arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_texSubImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  Neo::VAR_TYPES arg7 ;
  Neo::TEX_MODES arg8 ;
  void *arg9 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::texSubImage",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",5,"unsigned int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",6,"unsigned int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",7,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",8,"Neo::TEX_MODES");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",9,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_texSubImage",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  arg7 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 7);
  arg8 = (Neo::TEX_MODES)(int)lua_tonumber(L, 8);
  arg9=(void *)SWIG_MustGetPtr(L,9,0,0,9,"RenderingContext_texSubImage");
  (arg1)->texSubImage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(void const *)arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_generateMipMap(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::generateMipMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::generateMipMap",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_generateMipMap",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->generateMipMap();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getTexImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Image *arg3 = (Neo::Image *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getTexImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getTexImage",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getTexImage",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getTexImage",3,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getTexImage",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("RenderingContext_getTexImage",3,SWIGTYPE_p_Neo__Image);
  }
  
  (arg1)->getTexImage(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createFrameBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createFrameBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createFrameBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createFrameBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createFrameBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createFrameBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteFrameBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteFrameBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteFrameBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteFrameBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteFrameBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteFrameBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindFrameBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindFrameBuffer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindFrameBuffer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindFrameBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->bindFrameBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getCurrentFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getCurrentFrameBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getCurrentFrameBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getCurrentFrameBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getCurrentFrameBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_getCurrentFrameBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->getCurrentFrameBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_attachFrameBufferTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::FRAME_BUFFER_ATTACHMENT arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::attachFrameBufferTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferTexture",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferTexture",2,"Neo::FRAME_BUFFER_ATTACHMENT");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferTexture",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_attachFrameBufferTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::FRAME_BUFFER_ATTACHMENT)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->attachFrameBufferTexture(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_attachFrameBufferRB(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::FRAME_BUFFER_ATTACHMENT arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::attachFrameBufferRB",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferRB",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferRB",2,"Neo::FRAME_BUFFER_ATTACHMENT");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferRB",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_attachFrameBufferRB",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::FRAME_BUFFER_ATTACHMENT)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->attachFrameBufferRB(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setDrawingBuffers(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::FRAME_BUFFER_ATTACHMENT *arg2 = (Neo::FRAME_BUFFER_ATTACHMENT *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setDrawingBuffers",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setDrawingBuffers",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::setDrawingBuffers",2,"Neo::FRAME_BUFFER_ATTACHMENT *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setDrawingBuffers",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setDrawingBuffers",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__FRAME_BUFFER_ATTACHMENT,0))){
    SWIG_fail_ptr("RenderingContext_setDrawingBuffers",2,SWIGTYPE_p_Neo__FRAME_BUFFER_ATTACHMENT);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setDrawingBuffers(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createRenderBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createRenderBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createRenderBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createRenderBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createRenderBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createRenderBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createRenderBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteRenderBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteRenderBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteRenderBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteRenderBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteRenderBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteRenderBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteRenderBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindRenderBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindRenderBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindRenderBuffer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindRenderBuffer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindRenderBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->bindRenderBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setRenderBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::RENDER_BUFFER_MODES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setRenderBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setRenderBuffer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setRenderBuffer",2,"Neo::RENDER_BUFFER_MODES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setRenderBuffer",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setRenderBuffer",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setRenderBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::RENDER_BUFFER_MODES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->setRenderBuffer(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createVertexShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createVertexShader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createVertexShader",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createVertexShader",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createVertexShader",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createVertexShader",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createVertexShader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createPixelShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createPixelShader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createPixelShader",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createPixelShader",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createPixelShader",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createPixelShader",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createPixelShader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteShader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteShader",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteShader",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteShader",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteShader",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteShader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendShaderSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::RenderingContext::sendShaderSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendShaderSource",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendShaderSource",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendShaderSource",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendShaderSource",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->sendShaderSource(arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindFX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindFX",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindFX",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindFX",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->bindFX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createFX",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createFX",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createFX",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::createFX",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::createFX",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createFX",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createFX",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->createFX(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_updateFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::updateFX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::updateFX",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::updateFX",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_updateFX",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->updateFX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteFX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteFX",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteFX",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteFX",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteFX",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteFX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformInt",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",4,"int *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformInt",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformInt",4,SWIGTYPE_p_int);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformInt(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformInt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformInt",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformInt",4,SWIGTYPE_p_int);
  }
  
  (arg1)->sendUniformInt(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformInt(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformInt__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformInt__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformInt(unsigned int,char const *,int *,int const)\n"
    "    Neo::RenderingContext::sendUniformInt(unsigned int,char const *,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformFloat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformFloat",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformFloat",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformFloat(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformFloat",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformFloat",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformFloat",4,SWIGTYPE_p_float);
  }
  
  (arg1)->sendUniformFloat(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformFloat(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformFloat__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformFloat__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformFloat(unsigned int,char const *,float *,int const)\n"
    "    Neo::RenderingContext::sendUniformFloat(unsigned int,char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformVec2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec2",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec2",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformVec2(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec2",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec2",4,SWIGTYPE_p_float);
  }
  
  (arg1)->sendUniformVec2(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec2(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformVec2__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformVec2__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformVec2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformVec2(unsigned int,char const *,float *,int const)\n"
    "    Neo::RenderingContext::sendUniformVec2(unsigned int,char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformVec3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec3",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec3",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec3",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformVec3(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec3",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec3",4,SWIGTYPE_p_float);
  }
  
  (arg1)->sendUniformVec3(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec3(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformVec3__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformVec3__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformVec3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformVec3(unsigned int,char const *,float *,int const)\n"
    "    Neo::RenderingContext::sendUniformVec3(unsigned int,char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformVec4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec4",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec4",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec4",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformVec4(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec4",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec4",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec4",4,SWIGTYPE_p_float);
  }
  
  (arg1)->sendUniformVec4(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec4(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformVec4__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformVec4__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformVec4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformVec4(unsigned int,char const *,float *,int const)\n"
    "    Neo::RenderingContext::sendUniformVec4(unsigned int,char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::Matrix4x4 *arg4 = (Neo::Matrix4x4 *) 0 ;
  int arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformMatrix",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",4,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",5,"int const");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",6,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",4,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::Matrix4x4 *arg4 = (Neo::Matrix4x4 *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformMatrix",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",4,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",4,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::Matrix4x4 *arg4 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",4,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",4,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformMatrix(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformMatrix__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformMatrix__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_RenderingContext_sendUniformMatrix__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformMatrix(unsigned int,char const *,Neo::Matrix4x4 *,int const,bool const)\n"
    "    Neo::RenderingContext::sendUniformMatrix(unsigned int,char const *,Neo::Matrix4x4 *,int const)\n"
    "    Neo::RenderingContext::sendUniformMatrix(unsigned int,char const *,Neo::Matrix4x4 *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_getAttribLocation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getAttribLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getAttribLocation",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getAttribLocation",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::getAttribLocation",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::getAttribLocation",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getAttribLocation",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderingContext_getAttribLocation",4,SWIGTYPE_p_int);
  }
  
  (arg1)->getAttribLocation(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createVBO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createVBO",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createVBO",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createVBO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createVBO",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createVBO(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteVBO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteVBO",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteVBO",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteVBO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteVBO",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteVBO(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VBO_TYPES arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindVBO",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindVBO",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindVBO",2,"Neo::VBO_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::bindVBO",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindVBO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VBO_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->bindVBO(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VBO_TYPES arg2 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  Neo::VBO_MODES arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setVBO",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setVBO",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setVBO",2,"Neo::VBO_TYPES");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::setVBO",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setVBO",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setVBO",5,"Neo::VBO_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setVBO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VBO_TYPES)(int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"RenderingContext_setVBO");
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Neo::VBO_MODES)(int)lua_tonumber(L, 5);
  (arg1)->setVBO(arg2,(void const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setVBOSubData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VBO_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setVBOSubData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",2,"Neo::VBO_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",4,"void const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setVBOSubData",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VBO_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"RenderingContext_setVBOSubData");
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->setVBOSubData(arg2,arg3,(void const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableVertexArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableVertexArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableVertexArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableVertexArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableVertexArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableColorArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableColorArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableColorArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableColorArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableColorArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableNormalArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableNormalArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableNormalArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableNormalArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableNormalArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableTexCoordArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableTexCoordArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableTexCoordArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableTexCoordArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableTexCoordArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableAttribArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableAttribArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableAttribArray",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::enableAttribArray",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableAttribArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->enableAttribArray(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableVertexArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableVertexArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableVertexArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableVertexArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableVertexArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableColorArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableColorArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableColorArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableColorArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableColorArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableNormalArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableNormalArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableNormalArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableNormalArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableNormalArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableTexCoordArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableTexCoordArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableTexCoordArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableTexCoordArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableTexCoordArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableAttribArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableAttribArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableAttribArray",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::disableAttribArray",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableAttribArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->disableAttribArray(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setVertexPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setVertexPointer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setVertexPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setVertexPointer",2,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setVertexPointer",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::setVertexPointer",4,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setVertexPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"RenderingContext_setVertexPointer");
  (arg1)->setVertexPointer(arg2,arg3,(void const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColorPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColorPointer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColorPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColorPointer",2,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setColorPointer",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::setColorPointer",4,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColorPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"RenderingContext_setColorPointer");
  (arg1)->setColorPointer(arg2,arg3,(void const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setNormalPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setNormalPointer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setNormalPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setNormalPointer",2,"Neo::VAR_TYPES");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::setNormalPointer",3,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setNormalPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"RenderingContext_setNormalPointer");
  (arg1)->setNormalPointer(arg2,(void const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTexCoordPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTexCoordPointer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTexCoordPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTexCoordPointer",2,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setTexCoordPointer",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::setTexCoordPointer",4,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTexCoordPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"RenderingContext_setTexCoordPointer");
  (arg1)->setTexCoordPointer(arg2,arg3,(void const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setAttribPointer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::VAR_TYPES arg3 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  bool arg6 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setAttribPointer",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",3,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",5,"void const *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",6,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setAttribPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"RenderingContext_setAttribPointer");
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->setAttribPointer(arg2,arg3,arg4,(void const *)arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setAttribPointer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::VAR_TYPES arg3 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setAttribPointer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",3,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",5,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setAttribPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"RenderingContext_setAttribPointer");
  (arg1)->setAttribPointer(arg2,arg3,arg4,(void const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setAttribPointer(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_RenderingContext_setAttribPointer__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_RenderingContext_setAttribPointer__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_setAttribPointer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::setAttribPointer(unsigned int,Neo::VAR_TYPES,unsigned int,void const *,bool const)\n"
    "    Neo::RenderingContext::setAttribPointer(unsigned int,Neo::VAR_TYPES,unsigned int,void const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_drawArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::RenderingContext::drawArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::drawArray",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::drawArray",2,"Neo::PRIMITIVE_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::drawArray",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::drawArray",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_drawArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::PRIMITIVE_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->drawArray(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_drawElement(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  Neo::VAR_TYPES arg4 ;
  void *arg5 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::drawElement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::drawElement",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::drawElement",2,"Neo::PRIMITIVE_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::drawElement",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::drawElement",4,"Neo::VAR_TYPES");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::RenderingContext::drawElement",5,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_drawElement",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::PRIMITIVE_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"RenderingContext_drawElement");
  (arg1)->drawElement(arg2,arg3,arg4,(void const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableLineAntialiasing(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableLineAntialiasing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableLineAntialiasing",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableLineAntialiasing",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableLineAntialiasing();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableLineAntialiasing(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableLineAntialiasing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableLineAntialiasing",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableLineAntialiasing",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableLineAntialiasing();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialDiffuse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialDiffuse",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialDiffuse",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialDiffuse",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialDiffuse",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setMaterialDiffuse((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialSpecular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialSpecular",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialSpecular",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialSpecular",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialSpecular",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setMaterialSpecular((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialAmbient(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialAmbient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialAmbient",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialAmbient",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialAmbient",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialAmbient",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setMaterialAmbient((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialEmit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialEmit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialEmit",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialEmit",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialEmit",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialEmit",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setMaterialEmit((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialShininess(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialShininess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialShininess",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialShininess",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialShininess",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMaterialShininess(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableScissorTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableScissorTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableScissorTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableScissorTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableScissorTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableScissorTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableScissorTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableScissorTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableScissorTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableScissorTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setScissor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setScissor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setScissor",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setScissor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setScissor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setScissor",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setScissor",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setScissor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->setScissor(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Color *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColor",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColor",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("RenderingContext_setColor",2,SWIGTYPE_p_Neo__Color);
  }
  
  (arg1)->setColor((Neo::Color const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColor3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColor3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColor3",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColor3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColor3",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_setColor3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setColor3((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColor4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColor4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColor4",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColor4",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColor4",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setColor4",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setColor4((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColorMask(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColorMask",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",1,"Neo::RenderingContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColorMask",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setColorMask(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setDepthMask(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setDepthMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setDepthMask",1,"Neo::RenderingContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::RenderingContext::setDepthMask",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setDepthMask",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDepthMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setAlphaTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setAlphaTest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setAlphaTest",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setAlphaTest",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setAlphaTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAlphaTest(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableDepthTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableDepthTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableDepthTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableDepthTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableDepthTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableDepthTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableDepthTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableDepthTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableDepthTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableDepthTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setDepthMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::DEPTH_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setDepthMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setDepthMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setDepthMode",2,"Neo::DEPTH_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setDepthMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::DEPTH_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setDepthMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enablePolygonOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enablePolygonOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enablePolygonOffset",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::enablePolygonOffset",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::enablePolygonOffset",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enablePolygonOffset",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->enablePolygonOffset(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disablePolygonOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disablePolygonOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disablePolygonOffset",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disablePolygonOffset",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disablePolygonOffset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableStencilTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableStencilTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableStencilTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableStencilTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableStencilTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableStencilTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableStencilTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableStencilTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableStencilTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableStencilTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setStencilFunc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::STENCIL_FUNCS arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setStencilFunc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",2,"Neo::STENCIL_FUNCS");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setStencilFunc",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::STENCIL_FUNCS)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setStencilFunc(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setStencilFunc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::STENCIL_FUNCS arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setStencilFunc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",2,"Neo::STENCIL_FUNCS");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setStencilFunc",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::STENCIL_FUNCS)(int)lua_tonumber(L, 2);
  (arg1)->setStencilFunc(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setStencilFunc(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RenderingContext_setStencilFunc__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderingContext_setStencilFunc__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_setStencilFunc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::setStencilFunc(Neo::STENCIL_FUNCS,int)\n"
    "    Neo::RenderingContext::setStencilFunc(Neo::STENCIL_FUNCS)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_setStencilOp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::STENCIL_OPS arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setStencilOp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setStencilOp",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setStencilOp",2,"Neo::STENCIL_OPS");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setStencilOp",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::STENCIL_OPS)(int)lua_tonumber(L, 2);
  (arg1)->setStencilOp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableCullFace(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableCullFace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableCullFace",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableCullFace",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableCullFace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableCullFace(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableCullFace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableCullFace",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableCullFace",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableCullFace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setCullMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::CULL_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setCullMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setCullMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setCullMode",2,"Neo::CULL_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setCullMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::CULL_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setCullMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createQuery(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createQuery",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createQuery",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createQuery",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createQuery",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createQuery",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createQuery(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteQuery(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteQuery",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteQuery",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteQuery",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteQuery",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteQuery",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteQuery(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_beginQuery(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::beginQuery",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::beginQuery",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::beginQuery",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_beginQuery",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->beginQuery(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_endQuery(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::endQuery",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::endQuery",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_endQuery",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->endQuery();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getQueryResult(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getQueryResult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getQueryResult",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getQueryResult",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getQueryResult",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getQueryResult",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_getQueryResult",3,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->getQueryResult(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::loadIdentity",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_loadIdentity",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMatrixMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::MATRIX_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMatrixMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMatrixMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMatrixMode",2,"Neo::MATRIX_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMatrixMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::MATRIX_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setMatrixMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_pushMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::pushMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::pushMatrix",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_pushMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->pushMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_popMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::popMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::popMatrix",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_popMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->popMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_multMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::multMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::multMatrix",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::multMatrix",2,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_multMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_multMatrix",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->multMatrix((Neo::Matrix4x4 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_translate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::translate",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::translate",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_translate",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_translate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->translate((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_rotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::rotate",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::rotate",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::rotate",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_rotate",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_rotate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_scale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::scale",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::scale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_scale",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_scale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->scale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getViewport(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getViewport",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getViewport",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getViewport",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderingContext_getViewport",2,SWIGTYPE_p_int);
  }
  
  (arg1)->getViewport(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getModelViewMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getModelViewMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getModelViewMatrix",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getModelViewMatrix",2,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getModelViewMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_getModelViewMatrix",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->getModelViewMatrix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getProjectionMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getProjectionMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getProjectionMatrix",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getProjectionMatrix",2,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getProjectionMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_getProjectionMatrix",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->getProjectionMatrix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getTextureMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getTextureMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getTextureMatrix",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getTextureMatrix",2,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getTextureMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_getTextureMatrix",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->getTextureMatrix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableFog(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableFog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableFog",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableFog",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableFog();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableFog(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableFog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableFog",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableFog",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableFog();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setFogColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setFogColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setFogColor",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setFogColor",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setFogColor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_setFogColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setFogColor((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setFogDistance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setFogDistance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setFogDistance",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setFogDistance",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setFogDistance",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setFogDistance",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setFogDistance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getFogColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getFogColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getFogColor",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getFogColor",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getFogColor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_getFogColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->getFogColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getFogDistance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getFogDistance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getFogDistance",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getFogDistance",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getFogDistance",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getFogDistance",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getFogDistance",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getFogDistance",3,SWIGTYPE_p_float);
  }
  
  (arg1)->getFogDistance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableLighting(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableLighting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableLighting",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableLighting",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableLighting();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableLighting(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableLighting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableLighting",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableLighting",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableLighting();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableLight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableLight",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::enableLight",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableLight",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->enableLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableLight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableLight",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::disableLight",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableLight",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->disableLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightPosition",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightPosition",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightPosition",3,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightPosition",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setLightPosition",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setLightPosition(arg2,(Neo::Vector4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightDiffuse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightDiffuse",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightDiffuse",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightDiffuse",3,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightDiffuse",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setLightDiffuse",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setLightDiffuse(arg2,(Neo::Vector4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightSpecular",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightSpecular",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightSpecular",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightSpecular",3,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpecular",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpecular",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setLightSpecular(arg2,(Neo::Vector4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightAmbient(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightAmbient",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightAmbient",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightAmbient",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightAmbient",3,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightAmbient",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setLightAmbient",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setLightAmbient(arg2,(Neo::Vector4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightAttenuation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightAttenuation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightAttenuation",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setLightAttenuation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightSpotDirection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightSpotDirection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotDirection",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotDirection",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotDirection",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpotDirection",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpotDirection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setLightSpotDirection(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightSpotAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightSpotAngle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotAngle",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotAngle",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotAngle",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpotAngle",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setLightSpotAngle(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightSpotExponent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightSpotExponent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotExponent",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotExponent",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotExponent",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpotExponent",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setLightSpotExponent(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightPosition",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightPosition",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightPosition",3,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightPosition",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_getLightPosition",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->getLightPosition(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightDiffuse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightDiffuse",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightDiffuse",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightDiffuse",3,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightDiffuse",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_getLightDiffuse",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->getLightDiffuse(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightSpecular",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightSpecular",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightSpecular",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightSpecular",3,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpecular",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpecular",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->getLightSpecular(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightAmbient(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightAmbient",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightAmbient",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightAmbient",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightAmbient",3,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightAmbient",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_getLightAmbient",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->getLightAmbient(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightAttenuation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightAttenuation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightAttenuation",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightAttenuation",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightAttenuation",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightAttenuation",5,SWIGTYPE_p_float);
  }
  
  (arg1)->getLightAttenuation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightSpotDirection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightSpotDirection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotDirection",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotDirection",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotDirection",3,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotDirection",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotDirection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->getLightSpotDirection(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightSpotAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightSpotAngle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotAngle",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotAngle",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotAngle",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotAngle",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotAngle",3,SWIGTYPE_p_float);
  }
  
  (arg1)->getLightSpotAngle(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightSpotExponent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightSpotExponent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotExponent",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotExponent",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotExponent",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotExponent",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotExponent",3,SWIGTYPE_p_float);
  }
  
  (arg1)->getLightSpotExponent(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableBlending(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableBlending",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableBlending",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableBlending",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableBlending();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableBlending(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableBlending",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableBlending",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableBlending",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableBlending();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setBlendingMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::BLENDING_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setBlendingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setBlendingMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setBlendingMode",2,"Neo::BLENDING_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setBlendingMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::BLENDING_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setBlendingMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setPointSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setPointSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setPointSize",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setPointSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setPointSize",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setPointSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RenderingContext(void *obj) {
Neo::RenderingContext *arg1 = (Neo::RenderingContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_RenderingContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RenderingContext_methods[]= {
    { "getRendererVersion", _wrap_RenderingContext_getRendererVersion},
    { "setOrthoView", _wrap_RenderingContext_setOrthoView},
    { "setPerspectiveView", _wrap_RenderingContext_setPerspectiveView},
    { "setViewport", _wrap_RenderingContext_setViewport},
    { "clear", _wrap_RenderingContext_clear},
    { "setClearColor", _wrap_RenderingContext_setClearColor},
    { "init", _wrap_RenderingContext_init},
    { "enableTexture", _wrap_RenderingContext_enableTexture},
    { "disableTexture", _wrap_RenderingContext_disableTexture},
    { "setTextureGenMode", _wrap_RenderingContext_setTextureGenMode},
    { "setTextureFilterMode", _wrap_RenderingContext_setTextureFilterMode},
    { "setTextureUWrapMode", _wrap_RenderingContext_setTextureUWrapMode},
    { "setTextureVWrapMode", _wrap_RenderingContext_setTextureVWrapMode},
    { "setTextureCombineMode", _wrap_RenderingContext_setTextureCombineMode},
    { "bindTexture", _wrap_RenderingContext_bindTexture},
    { "createTexture", _wrap_RenderingContext_createTexture},
    { "deleteTexture", _wrap_RenderingContext_deleteTexture},
    { "sendTextureImage", _wrap_RenderingContext_sendTextureImage},
    { "texImage", _wrap_RenderingContext_texImage},
    { "texSubImage", _wrap_RenderingContext_texSubImage},
    { "generateMipMap", _wrap_RenderingContext_generateMipMap},
    { "getTexImage", _wrap_RenderingContext_getTexImage},
    { "createFrameBuffer", _wrap_RenderingContext_createFrameBuffer},
    { "deleteFrameBuffer", _wrap_RenderingContext_deleteFrameBuffer},
    { "bindFrameBuffer", _wrap_RenderingContext_bindFrameBuffer},
    { "getCurrentFrameBuffer", _wrap_RenderingContext_getCurrentFrameBuffer},
    { "attachFrameBufferTexture", _wrap_RenderingContext_attachFrameBufferTexture},
    { "attachFrameBufferRB", _wrap_RenderingContext_attachFrameBufferRB},
    { "setDrawingBuffers", _wrap_RenderingContext_setDrawingBuffers},
    { "createRenderBuffer", _wrap_RenderingContext_createRenderBuffer},
    { "deleteRenderBuffer", _wrap_RenderingContext_deleteRenderBuffer},
    { "bindRenderBuffer", _wrap_RenderingContext_bindRenderBuffer},
    { "setRenderBuffer", _wrap_RenderingContext_setRenderBuffer},
    { "createVertexShader", _wrap_RenderingContext_createVertexShader},
    { "createPixelShader", _wrap_RenderingContext_createPixelShader},
    { "deleteShader", _wrap_RenderingContext_deleteShader},
    { "sendShaderSource", _wrap_RenderingContext_sendShaderSource},
    { "bindFX", _wrap_RenderingContext_bindFX},
    { "createFX", _wrap_RenderingContext_createFX},
    { "updateFX", _wrap_RenderingContext_updateFX},
    { "deleteFX", _wrap_RenderingContext_deleteFX},
    { "sendUniformInt", _wrap_RenderingContext_sendUniformInt},
    { "sendUniformFloat", _wrap_RenderingContext_sendUniformFloat},
    { "sendUniformVec2", _wrap_RenderingContext_sendUniformVec2},
    { "sendUniformVec3", _wrap_RenderingContext_sendUniformVec3},
    { "sendUniformVec4", _wrap_RenderingContext_sendUniformVec4},
    { "sendUniformMatrix", _wrap_RenderingContext_sendUniformMatrix},
    { "getAttribLocation", _wrap_RenderingContext_getAttribLocation},
    { "createVBO", _wrap_RenderingContext_createVBO},
    { "deleteVBO", _wrap_RenderingContext_deleteVBO},
    { "bindVBO", _wrap_RenderingContext_bindVBO},
    { "setVBO", _wrap_RenderingContext_setVBO},
    { "setVBOSubData", _wrap_RenderingContext_setVBOSubData},
    { "enableVertexArray", _wrap_RenderingContext_enableVertexArray},
    { "enableColorArray", _wrap_RenderingContext_enableColorArray},
    { "enableNormalArray", _wrap_RenderingContext_enableNormalArray},
    { "enableTexCoordArray", _wrap_RenderingContext_enableTexCoordArray},
    { "enableAttribArray", _wrap_RenderingContext_enableAttribArray},
    { "disableVertexArray", _wrap_RenderingContext_disableVertexArray},
    { "disableColorArray", _wrap_RenderingContext_disableColorArray},
    { "disableNormalArray", _wrap_RenderingContext_disableNormalArray},
    { "disableTexCoordArray", _wrap_RenderingContext_disableTexCoordArray},
    { "disableAttribArray", _wrap_RenderingContext_disableAttribArray},
    { "setVertexPointer", _wrap_RenderingContext_setVertexPointer},
    { "setColorPointer", _wrap_RenderingContext_setColorPointer},
    { "setNormalPointer", _wrap_RenderingContext_setNormalPointer},
    { "setTexCoordPointer", _wrap_RenderingContext_setTexCoordPointer},
    { "setAttribPointer", _wrap_RenderingContext_setAttribPointer},
    { "drawArray", _wrap_RenderingContext_drawArray},
    { "drawElement", _wrap_RenderingContext_drawElement},
    { "enableLineAntialiasing", _wrap_RenderingContext_enableLineAntialiasing},
    { "disableLineAntialiasing", _wrap_RenderingContext_disableLineAntialiasing},
    { "setMaterialDiffuse", _wrap_RenderingContext_setMaterialDiffuse},
    { "setMaterialSpecular", _wrap_RenderingContext_setMaterialSpecular},
    { "setMaterialAmbient", _wrap_RenderingContext_setMaterialAmbient},
    { "setMaterialEmit", _wrap_RenderingContext_setMaterialEmit},
    { "setMaterialShininess", _wrap_RenderingContext_setMaterialShininess},
    { "enableScissorTest", _wrap_RenderingContext_enableScissorTest},
    { "disableScissorTest", _wrap_RenderingContext_disableScissorTest},
    { "setScissor", _wrap_RenderingContext_setScissor},
    { "setColor", _wrap_RenderingContext_setColor},
    { "setColor3", _wrap_RenderingContext_setColor3},
    { "setColor4", _wrap_RenderingContext_setColor4},
    { "setColorMask", _wrap_RenderingContext_setColorMask},
    { "setDepthMask", _wrap_RenderingContext_setDepthMask},
    { "setAlphaTest", _wrap_RenderingContext_setAlphaTest},
    { "enableDepthTest", _wrap_RenderingContext_enableDepthTest},
    { "disableDepthTest", _wrap_RenderingContext_disableDepthTest},
    { "setDepthMode", _wrap_RenderingContext_setDepthMode},
    { "enablePolygonOffset", _wrap_RenderingContext_enablePolygonOffset},
    { "disablePolygonOffset", _wrap_RenderingContext_disablePolygonOffset},
    { "enableStencilTest", _wrap_RenderingContext_enableStencilTest},
    { "disableStencilTest", _wrap_RenderingContext_disableStencilTest},
    { "setStencilFunc", _wrap_RenderingContext_setStencilFunc},
    { "setStencilOp", _wrap_RenderingContext_setStencilOp},
    { "enableCullFace", _wrap_RenderingContext_enableCullFace},
    { "disableCullFace", _wrap_RenderingContext_disableCullFace},
    { "setCullMode", _wrap_RenderingContext_setCullMode},
    { "createQuery", _wrap_RenderingContext_createQuery},
    { "deleteQuery", _wrap_RenderingContext_deleteQuery},
    { "beginQuery", _wrap_RenderingContext_beginQuery},
    { "endQuery", _wrap_RenderingContext_endQuery},
    { "getQueryResult", _wrap_RenderingContext_getQueryResult},
    { "loadIdentity", _wrap_RenderingContext_loadIdentity},
    { "setMatrixMode", _wrap_RenderingContext_setMatrixMode},
    { "pushMatrix", _wrap_RenderingContext_pushMatrix},
    { "popMatrix", _wrap_RenderingContext_popMatrix},
    { "multMatrix", _wrap_RenderingContext_multMatrix},
    { "translate", _wrap_RenderingContext_translate},
    { "rotate", _wrap_RenderingContext_rotate},
    { "scale", _wrap_RenderingContext_scale},
    { "getViewport", _wrap_RenderingContext_getViewport},
    { "getModelViewMatrix", _wrap_RenderingContext_getModelViewMatrix},
    { "getProjectionMatrix", _wrap_RenderingContext_getProjectionMatrix},
    { "getTextureMatrix", _wrap_RenderingContext_getTextureMatrix},
    { "enableFog", _wrap_RenderingContext_enableFog},
    { "disableFog", _wrap_RenderingContext_disableFog},
    { "setFogColor", _wrap_RenderingContext_setFogColor},
    { "setFogDistance", _wrap_RenderingContext_setFogDistance},
    { "getFogColor", _wrap_RenderingContext_getFogColor},
    { "getFogDistance", _wrap_RenderingContext_getFogDistance},
    { "enableLighting", _wrap_RenderingContext_enableLighting},
    { "disableLighting", _wrap_RenderingContext_disableLighting},
    { "enableLight", _wrap_RenderingContext_enableLight},
    { "disableLight", _wrap_RenderingContext_disableLight},
    { "setLightPosition", _wrap_RenderingContext_setLightPosition},
    { "setLightDiffuse", _wrap_RenderingContext_setLightDiffuse},
    { "setLightSpecular", _wrap_RenderingContext_setLightSpecular},
    { "setLightAmbient", _wrap_RenderingContext_setLightAmbient},
    { "setLightAttenuation", _wrap_RenderingContext_setLightAttenuation},
    { "setLightSpotDirection", _wrap_RenderingContext_setLightSpotDirection},
    { "setLightSpotAngle", _wrap_RenderingContext_setLightSpotAngle},
    { "setLightSpotExponent", _wrap_RenderingContext_setLightSpotExponent},
    { "getLightPosition", _wrap_RenderingContext_getLightPosition},
    { "getLightDiffuse", _wrap_RenderingContext_getLightDiffuse},
    { "getLightSpecular", _wrap_RenderingContext_getLightSpecular},
    { "getLightAmbient", _wrap_RenderingContext_getLightAmbient},
    { "getLightAttenuation", _wrap_RenderingContext_getLightAttenuation},
    { "getLightSpotDirection", _wrap_RenderingContext_getLightSpotDirection},
    { "getLightSpotAngle", _wrap_RenderingContext_getLightSpotAngle},
    { "getLightSpotExponent", _wrap_RenderingContext_getLightSpotExponent},
    { "enableBlending", _wrap_RenderingContext_enableBlending},
    { "disableBlending", _wrap_RenderingContext_disableBlending},
    { "setBlendingMode", _wrap_RenderingContext_setBlendingMode},
    { "setPointSize", _wrap_RenderingContext_setPointSize},
    {0,0}
};
static swig_lua_method swig_RenderingContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RenderingContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RenderingContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RenderingContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RenderingContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RenderingContext_Sf_SwigStatic = {
    "RenderingContext",
    swig_RenderingContext_Sf_SwigStatic_methods,
    swig_RenderingContext_Sf_SwigStatic_attributes,
    swig_RenderingContext_Sf_SwigStatic_constants,
    swig_RenderingContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RenderingContext_bases[] = {0};
static const char *swig_RenderingContext_base_names[] = {0};
static swig_lua_class _wrap_class_RenderingContext = { "RenderingContext", "RenderingContext", &SWIGTYPE_p_Neo__RenderingContext,0, swig_delete_RenderingContext, swig_RenderingContext_methods, swig_RenderingContext_attributes, &swig_RenderingContext_Sf_SwigStatic, swig_RenderingContext_meta, swig_RenderingContext_bases, swig_RenderingContext_base_names };

static int _wrap_SoundContext_initContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::initContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::initContext",1,"Neo::SoundContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_initContext",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  (arg1)->initContext();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_createBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::createBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::createBuffer",1,"Neo::SoundContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SoundContext::createBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_createBuffer",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_createBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_deleteBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::deleteBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::deleteBuffer",1,"Neo::SoundContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SoundContext::deleteBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_deleteBuffer",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_deleteBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_sendBufferSound(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  Neo::Sound *arg3 = (Neo::Sound *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::sendBufferSound",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::sendBufferSound",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::sendBufferSound",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::SoundContext::sendBufferSound",3,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_sendBufferSound",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("SoundContext_sendBufferSound",3,SWIGTYPE_p_Neo__Sound);
  }
  
  (arg1)->sendBufferSound(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_sendBufferData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  Neo::SOUND_FORMAT arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  
  SWIG_check_num_args("Neo::SoundContext::sendBufferData",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",3,"Neo::SOUND_FORMAT");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",5,"unsigned int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_sendBufferData",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (Neo::SOUND_FORMAT)(int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SoundContext_sendBufferData");
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  (arg1)->sendBufferData(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getBufferDuration(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::SoundContext::getBufferDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getBufferDuration",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getBufferDuration",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getBufferDuration",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)(arg1)->getBufferDuration(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_createSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::createSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::createSource",1,"Neo::SoundContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SoundContext::createSource",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::createSource",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_createSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_createSource",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->createSource(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_deleteSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::deleteSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::deleteSource",1,"Neo::SoundContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SoundContext::deleteSource",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_deleteSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_deleteSource",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_enableSourceLoop(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::enableSourceLoop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::enableSourceLoop",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::enableSourceLoop",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_enableSourceLoop",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->enableSourceLoop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_disableSourceLoop(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::disableSourceLoop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::disableSourceLoop",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::disableSourceLoop",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_disableSourceLoop",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->disableSourceLoop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceRelative(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceRelative",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceRelative",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceRelative",2,"unsigned int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceRelative",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceRelative",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setSourceRelative(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceBufferId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceBufferId",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceBufferId",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceBufferId",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceBufferId",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceBufferId",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setSourceBufferId(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourcePosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourcePosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourcePosition",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourcePosition",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourcePosition",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourcePosition",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("SoundContext_setSourcePosition",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setSourcePosition(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceRadius",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceRadius",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceRadius",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceRadius",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceRadius",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourceRadius(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourcePitch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourcePitch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourcePitch",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourcePitch",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourcePitch",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourcePitch",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourcePitch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceGain(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceGain",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceGain",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceGain",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceGain",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceGain",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourceGain(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceRolloff(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceRolloff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceRolloff",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceRolloff",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceRolloff",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceRolloff",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourceRolloff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceOffset",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceOffset",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceOffset",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceOffset",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourceOffset(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getSourceOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::SoundContext::getSourceOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getSourceOffset",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getSourceOffset",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getSourceOffset",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)(arg1)->getSourceOffset(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_playSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::playSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::playSource",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::playSource",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_playSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->playSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_pauseSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::pauseSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::pauseSource",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::pauseSource",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_pauseSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->pauseSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_stopSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::stopSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::stopSource",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::stopSource",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_stopSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->stopSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_isSourcePaused(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::SoundContext::isSourcePaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::isSourcePaused",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::isSourcePaused",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_isSourcePaused",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isSourcePaused(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_isSourcePlaying(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::SoundContext::isSourcePlaying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::isSourcePlaying",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::isSourcePlaying",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_isSourcePlaying",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isSourcePlaying(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getSourceTimePos(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::SoundContext::getSourceTimePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getSourceTimePos",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getSourceTimePos",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getSourceTimePos",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)(arg1)->getSourceTimePos(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_queueSourceBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::SoundContext::queueSourceBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::queueSourceBuffer",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::queueSourceBuffer",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::SoundContext::queueSourceBuffer",3,"unsigned int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::SoundContext::queueSourceBuffer",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_queueSourceBuffer",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_queueSourceBuffer",3,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->queueSourceBuffer(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_unqueueSourceBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::SoundContext::unqueueSourceBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::unqueueSourceBuffer",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::unqueueSourceBuffer",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::SoundContext::unqueueSourceBuffer",3,"unsigned int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::SoundContext::unqueueSourceBuffer",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_unqueueSourceBuffer",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_unqueueSourceBuffer",3,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->unqueueSourceBuffer(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getSourceBuffersQueued(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SoundContext::getSourceBuffersQueued",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getSourceBuffersQueued",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getSourceBuffersQueued",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getSourceBuffersQueued",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->getSourceBuffersQueued(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getSourceBuffersProcessed(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SoundContext::getSourceBuffersProcessed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getSourceBuffersProcessed",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getSourceBuffersProcessed",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getSourceBuffersProcessed",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->getSourceBuffersProcessed(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_updateListenerPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::updateListenerPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::updateListenerPosition",1,"Neo::SoundContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::SoundContext::updateListenerPosition",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::SoundContext::updateListenerPosition",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::SoundContext::updateListenerPosition",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_updateListenerPosition",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("SoundContext_updateListenerPosition",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("SoundContext_updateListenerPosition",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("SoundContext_updateListenerPosition",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->updateListenerPosition((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundContext(void *obj) {
Neo::SoundContext *arg1 = (Neo::SoundContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_SoundContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoundContext_methods[]= {
    { "initContext", _wrap_SoundContext_initContext},
    { "createBuffer", _wrap_SoundContext_createBuffer},
    { "deleteBuffer", _wrap_SoundContext_deleteBuffer},
    { "sendBufferSound", _wrap_SoundContext_sendBufferSound},
    { "sendBufferData", _wrap_SoundContext_sendBufferData},
    { "getBufferDuration", _wrap_SoundContext_getBufferDuration},
    { "createSource", _wrap_SoundContext_createSource},
    { "deleteSource", _wrap_SoundContext_deleteSource},
    { "enableSourceLoop", _wrap_SoundContext_enableSourceLoop},
    { "disableSourceLoop", _wrap_SoundContext_disableSourceLoop},
    { "setSourceRelative", _wrap_SoundContext_setSourceRelative},
    { "setSourceBufferId", _wrap_SoundContext_setSourceBufferId},
    { "setSourcePosition", _wrap_SoundContext_setSourcePosition},
    { "setSourceRadius", _wrap_SoundContext_setSourceRadius},
    { "setSourcePitch", _wrap_SoundContext_setSourcePitch},
    { "setSourceGain", _wrap_SoundContext_setSourceGain},
    { "setSourceRolloff", _wrap_SoundContext_setSourceRolloff},
    { "setSourceOffset", _wrap_SoundContext_setSourceOffset},
    { "getSourceOffset", _wrap_SoundContext_getSourceOffset},
    { "playSource", _wrap_SoundContext_playSource},
    { "pauseSource", _wrap_SoundContext_pauseSource},
    { "stopSource", _wrap_SoundContext_stopSource},
    { "isSourcePaused", _wrap_SoundContext_isSourcePaused},
    { "isSourcePlaying", _wrap_SoundContext_isSourcePlaying},
    { "getSourceTimePos", _wrap_SoundContext_getSourceTimePos},
    { "queueSourceBuffer", _wrap_SoundContext_queueSourceBuffer},
    { "unqueueSourceBuffer", _wrap_SoundContext_unqueueSourceBuffer},
    { "getSourceBuffersQueued", _wrap_SoundContext_getSourceBuffersQueued},
    { "getSourceBuffersProcessed", _wrap_SoundContext_getSourceBuffersProcessed},
    { "updateListenerPosition", _wrap_SoundContext_updateListenerPosition},
    {0,0}
};
static swig_lua_method swig_SoundContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoundContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundContext_Sf_SwigStatic = {
    "SoundContext",
    swig_SoundContext_Sf_SwigStatic_methods,
    swig_SoundContext_Sf_SwigStatic_attributes,
    swig_SoundContext_Sf_SwigStatic_constants,
    swig_SoundContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundContext_bases[] = {0};
static const char *swig_SoundContext_base_names[] = {0};
static swig_lua_class _wrap_class_SoundContext = { "SoundContext", "SoundContext", &SWIGTYPE_p_Neo__SoundContext,0, swig_delete_SoundContext, swig_SoundContext_methods, swig_SoundContext_attributes, &swig_SoundContext_Sf_SwigStatic, swig_SoundContext_meta, swig_SoundContext_bases, swig_SoundContext_base_names };

static int _wrap_PhysicsContext_init(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::init",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::init",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::init",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_init",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_init",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_init",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->init((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::clear",1,"Neo::PhysicsContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_clear",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setSimulationQuality(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setSimulationQuality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setSimulationQuality",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setSimulationQuality",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setSimulationQuality",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setSimulationQuality(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_updateSimulation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::updateSimulation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::updateSimulation",1,"Neo::PhysicsContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_updateSimulation",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  (arg1)->updateSimulation();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setWorldGravity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setWorldGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setWorldGravity",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setWorldGravity",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setWorldGravity",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setWorldGravity",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setWorldGravity((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createGhost(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Quaternion *arg5 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createGhost",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",5,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createGhost",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createGhost",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createGhost",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_createGhost",5,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->createGhost(arg2,arg3,(Neo::Vector3 const &)*arg4,(Neo::Quaternion const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createRigidBody(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Quaternion *arg5 = 0 ;
  float arg6 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createRigidBody",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",5,"Neo::Quaternion const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createRigidBody",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createRigidBody",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createRigidBody",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_createRigidBody",5,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->createRigidBody(arg2,arg3,(Neo::Vector3 const &)*arg4,(Neo::Quaternion const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_activateObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::activateObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::activateObject",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::activateObject",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_activateObject",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->activateObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_deactivateObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::deactivateObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::deactivateObject",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::deactivateObject",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_deactivateObject",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->deactivateObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_deleteObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::deleteObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::deleteObject",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::deleteObject",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_deleteObject",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_deleteObject",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_enableObjectKinematic(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::enableObjectKinematic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::enableObjectKinematic",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::enableObjectKinematic",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_enableObjectKinematic",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->enableObjectKinematic(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_disableObjectKinematic(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::disableObjectKinematic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::disableObjectKinematic",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::disableObjectKinematic",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_disableObjectKinematic",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->disableObjectKinematic(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectShape",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectShape",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectShape",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setObjectShape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectMass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectMass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectMass",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectMass",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectMass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectMass",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setObjectMass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectRestitution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectRestitution",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectRestitution",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectRestitution",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectRestitution",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setObjectRestitution(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectFriction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectFriction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectFriction",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectFriction",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectFriction",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectFriction",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setObjectFriction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectLinearFactor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectLinearFactor",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectLinearFactor",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectLinearFactor",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectLinearFactor",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectLinearFactor",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setObjectLinearFactor(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectAngularFactor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectAngularFactor",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectAngularFactor",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectAngularFactor",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectAngularFactor",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setObjectAngularFactor(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectDamping",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectDamping",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectDamping",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectDamping",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::setObjectDamping",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectDamping",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setObjectDamping(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectTransform(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Quaternion *arg4 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectTransform",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectTransform",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectTransform",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectTransform",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::setObjectTransform",4,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectTransform",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectTransform",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectTransform",4,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->setObjectTransform(arg2,(Neo::Vector3 const &)*arg3,(Neo::Quaternion const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_getObjectTransform(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  Neo::Quaternion *arg4 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::getObjectTransform",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::getObjectTransform",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::getObjectTransform",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::getObjectTransform",3,"Neo::Vector3 *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::PhysicsContext::getObjectTransform",4,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_getObjectTransform",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_getObjectTransform",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_getObjectTransform",4,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->getObjectTransform(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectUserPointer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectUserPointer",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectUserPointer",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectUserPointer",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectUserPointer",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsContext_setObjectUserPointer");
  (arg1)->setObjectUserPointer(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_getObjectUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::getObjectUserPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::getObjectUserPointer",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::getObjectUserPointer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_getObjectUserPointer",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (void *)(arg1)->getObjectUserPointer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_addCentralForce(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::addCentralForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::addCentralForce",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::addCentralForce",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::addCentralForce",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_addCentralForce",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_addCentralForce",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->addCentralForce(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_getCentralForce(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::getCentralForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::getCentralForce",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::getCentralForce",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::getCentralForce",3,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_getCentralForce",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_getCentralForce",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->getCentralForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_addTorque(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::addTorque",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::addTorque",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::addTorque",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::addTorque",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_addTorque",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_addTorque",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->addTorque(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_getTorque(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::getTorque",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::getTorque",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::getTorque",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::getTorque",3,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_getTorque",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_getTorque",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->getTorque(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_clearForces(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::clearForces",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::clearForces",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::clearForces",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_clearForces",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->clearForces(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isObjectInCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  int result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isObjectInCollision",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",3,"unsigned int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",3,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (int)(arg1)->isObjectInCollision(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isObjectInCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isObjectInCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",3,SWIGTYPE_p_unsigned_int);
  }
  
  result = (int)(arg1)->isObjectInCollision(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isObjectInCollision__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isObjectInCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (int)(arg1)->isObjectInCollision(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isObjectInCollision(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsContext_isObjectInCollision__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsContext_isObjectInCollision__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PhysicsContext_isObjectInCollision__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContext_isObjectInCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsContext::isObjectInCollision(unsigned int,unsigned int *,unsigned int)\n"
    "    Neo::PhysicsContext::isObjectInCollision(unsigned int,unsigned int *)\n"
    "    Neo::PhysicsContext::isObjectInCollision(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContext_isObjectsCollision(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isObjectsCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isObjectsCollision",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isObjectsCollision",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isObjectsCollision",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectsCollision",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)(arg1)->isObjectsCollision(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg6 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isRayHit",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",3,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",4,"unsigned int *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",5,"Neo::Vector3 *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",6,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",4,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",6,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isRayHit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",3,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",4,"unsigned int *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",5,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",4,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isRayHit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",3,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",4,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",4,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isRayHit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsContext_isRayHit__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_PhysicsContext_isRayHit__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsContext_isRayHit__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_PhysicsContext_isRayHit__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContext_isRayHit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsContext::isRayHit(Neo::Vector3 const &,Neo::Vector3 const &,unsigned int *,Neo::Vector3 *,Neo::Vector3 *)\n"
    "    Neo::PhysicsContext::isRayHit(Neo::Vector3 const &,Neo::Vector3 const &,unsigned int *,Neo::Vector3 *)\n"
    "    Neo::PhysicsContext::isRayHit(Neo::Vector3 const &,Neo::Vector3 const &,unsigned int *)\n"
    "    Neo::PhysicsContext::isRayHit(Neo::Vector3 const &,Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContext_createMultiShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createMultiShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createMultiShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createMultiShape",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createMultiShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createMultiShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createMultiShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createBoxShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createBoxShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createBoxShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createBoxShape",2,"unsigned int *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createBoxShape",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createBoxShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createBoxShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createBoxShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->createBoxShape(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createSphereShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createSphereShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createSphereShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createSphereShape",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createSphereShape",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createSphereShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createSphereShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->createSphereShape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConeShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createConeShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createConeShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createConeShape",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createConeShape",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createConeShape",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createConeShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createConeShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->createConeShape(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createCapsuleShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createCapsuleShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createCapsuleShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createCapsuleShape",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createCapsuleShape",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createCapsuleShape",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createCapsuleShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createCapsuleShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->createCapsuleShape(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createCylinderShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createCylinderShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createCylinderShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createCylinderShape",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createCylinderShape",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createCylinderShape",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createCylinderShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createCylinderShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->createCylinderShape(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConvexHullShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  Neo::Vector3 arg5 ;
  Neo::Vector3 *argp5 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createConvexHullShape",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",3,"Neo::Vector3 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",4,"unsigned int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",5,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",5,SWIGTYPE_p_Neo__Vector3);
  }
  arg5 = *argp5;
  
  (arg1)->createConvexHullShape(arg2,(Neo::Vector3 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConvexHullShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createConvexHullShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",3,"Neo::Vector3 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->createConvexHullShape(arg2,(Neo::Vector3 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConvexHullShape(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PhysicsContext_createConvexHullShape__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsContext_createConvexHullShape__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContext_createConvexHullShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsContext::createConvexHullShape(unsigned int *,Neo::Vector3 const *,unsigned int,Neo::Vector3 const)\n"
    "    Neo::PhysicsContext::createConvexHullShape(unsigned int *,Neo::Vector3 const *,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContext_createTriangleMeshShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  unsigned int arg6 ;
  Neo::VAR_TYPES arg7 ;
  Neo::Vector3 arg8 ;
  Neo::Vector3 *argp8 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createTriangleMeshShape",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",3,"Neo::Vector3 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",5,"void const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",6,"unsigned int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",7,"Neo::VAR_TYPES");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",8,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"PhysicsContext_createTriangleMeshShape");
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  arg7 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",8,SWIGTYPE_p_Neo__Vector3);
  }
  arg8 = *argp8;
  
  (arg1)->createTriangleMeshShape(arg2,(Neo::Vector3 const *)arg3,arg4,(void const *)arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createTriangleMeshShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  unsigned int arg6 ;
  Neo::VAR_TYPES arg7 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createTriangleMeshShape",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",3,"Neo::Vector3 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",5,"void const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",6,"unsigned int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",7,"Neo::VAR_TYPES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"PhysicsContext_createTriangleMeshShape");
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  arg7 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 7);
  (arg1)->createTriangleMeshShape(arg2,(Neo::Vector3 const *)arg3,arg4,(void const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createTriangleMeshShape(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_PhysicsContext_createTriangleMeshShape__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_PhysicsContext_createTriangleMeshShape__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContext_createTriangleMeshShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsContext::createTriangleMeshShape(unsigned int *,Neo::Vector3 const *,unsigned int,void const *,unsigned int,Neo::VAR_TYPES,Neo::Vector3 const)\n"
    "    Neo::PhysicsContext::createTriangleMeshShape(unsigned int *,Neo::Vector3 const *,unsigned int,void const *,unsigned int,Neo::VAR_TYPES)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContext_deleteShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::deleteShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::deleteShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::deleteShape",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_deleteShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_deleteShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_addChildShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Quaternion *arg5 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::addChildShape",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",5,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_addChildShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_addChildShape",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_addChildShape",5,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->addChildShape(arg2,arg3,(Neo::Vector3 const &)*arg4,(Neo::Quaternion const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo::Vector3 *arg5 = 0 ;
  bool arg6 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createConstraint",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",4,"unsigned int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",5,"Neo::Vector3 const &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createConstraint",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createConstraint",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createConstraint",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->createConstraint(arg2,arg3,arg4,(Neo::Vector3 const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setLinearLimit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setLinearLimit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setLinearLimit",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setLinearLimit",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setLinearLimit",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::setLinearLimit",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setLinearLimit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setLinearLimit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setLinearLimit",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setLinearLimit(arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setAngularLimit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setAngularLimit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setAngularLimit",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setAngularLimit",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setAngularLimit",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::setAngularLimit",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setAngularLimit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setAngularLimit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setAngularLimit",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setAngularLimit(arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_deleteConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::deleteConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::deleteConstraint",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::deleteConstraint",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_deleteConstraint",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_deleteConstraint",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsContext(void *obj) {
Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_PhysicsContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsContext_methods[]= {
    { "init", _wrap_PhysicsContext_init},
    { "clear", _wrap_PhysicsContext_clear},
    { "setSimulationQuality", _wrap_PhysicsContext_setSimulationQuality},
    { "updateSimulation", _wrap_PhysicsContext_updateSimulation},
    { "setWorldGravity", _wrap_PhysicsContext_setWorldGravity},
    { "createGhost", _wrap_PhysicsContext_createGhost},
    { "createRigidBody", _wrap_PhysicsContext_createRigidBody},
    { "activateObject", _wrap_PhysicsContext_activateObject},
    { "deactivateObject", _wrap_PhysicsContext_deactivateObject},
    { "deleteObject", _wrap_PhysicsContext_deleteObject},
    { "enableObjectKinematic", _wrap_PhysicsContext_enableObjectKinematic},
    { "disableObjectKinematic", _wrap_PhysicsContext_disableObjectKinematic},
    { "setObjectShape", _wrap_PhysicsContext_setObjectShape},
    { "setObjectMass", _wrap_PhysicsContext_setObjectMass},
    { "setObjectRestitution", _wrap_PhysicsContext_setObjectRestitution},
    { "setObjectFriction", _wrap_PhysicsContext_setObjectFriction},
    { "setObjectLinearFactor", _wrap_PhysicsContext_setObjectLinearFactor},
    { "setObjectAngularFactor", _wrap_PhysicsContext_setObjectAngularFactor},
    { "setObjectDamping", _wrap_PhysicsContext_setObjectDamping},
    { "setObjectTransform", _wrap_PhysicsContext_setObjectTransform},
    { "getObjectTransform", _wrap_PhysicsContext_getObjectTransform},
    { "setObjectUserPointer", _wrap_PhysicsContext_setObjectUserPointer},
    { "getObjectUserPointer", _wrap_PhysicsContext_getObjectUserPointer},
    { "addCentralForce", _wrap_PhysicsContext_addCentralForce},
    { "getCentralForce", _wrap_PhysicsContext_getCentralForce},
    { "addTorque", _wrap_PhysicsContext_addTorque},
    { "getTorque", _wrap_PhysicsContext_getTorque},
    { "clearForces", _wrap_PhysicsContext_clearForces},
    { "isObjectInCollision", _wrap_PhysicsContext_isObjectInCollision},
    { "isObjectsCollision", _wrap_PhysicsContext_isObjectsCollision},
    { "isRayHit", _wrap_PhysicsContext_isRayHit},
    { "createMultiShape", _wrap_PhysicsContext_createMultiShape},
    { "createBoxShape", _wrap_PhysicsContext_createBoxShape},
    { "createSphereShape", _wrap_PhysicsContext_createSphereShape},
    { "createConeShape", _wrap_PhysicsContext_createConeShape},
    { "createCapsuleShape", _wrap_PhysicsContext_createCapsuleShape},
    { "createCylinderShape", _wrap_PhysicsContext_createCylinderShape},
    { "createConvexHullShape", _wrap_PhysicsContext_createConvexHullShape},
    { "createTriangleMeshShape", _wrap_PhysicsContext_createTriangleMeshShape},
    { "deleteShape", _wrap_PhysicsContext_deleteShape},
    { "addChildShape", _wrap_PhysicsContext_addChildShape},
    { "createConstraint", _wrap_PhysicsContext_createConstraint},
    { "setLinearLimit", _wrap_PhysicsContext_setLinearLimit},
    { "setAngularLimit", _wrap_PhysicsContext_setAngularLimit},
    { "deleteConstraint", _wrap_PhysicsContext_deleteConstraint},
    {0,0}
};
static swig_lua_method swig_PhysicsContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsContext_Sf_SwigStatic = {
    "PhysicsContext",
    swig_PhysicsContext_Sf_SwigStatic_methods,
    swig_PhysicsContext_Sf_SwigStatic_attributes,
    swig_PhysicsContext_Sf_SwigStatic_constants,
    swig_PhysicsContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsContext_bases[] = {0};
static const char *swig_PhysicsContext_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsContext = { "PhysicsContext", "PhysicsContext", &SWIGTYPE_p_Neo__PhysicsContext,0, swig_delete_PhysicsContext, swig_PhysicsContext_methods, swig_PhysicsContext_attributes, &swig_PhysicsContext_Sf_SwigStatic, swig_PhysicsContext_meta, swig_PhysicsContext_bases, swig_PhysicsContext_base_names };

static int _wrap_ScriptContext_init(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::init",1,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_init",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  (arg1)->init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_runScript(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::runScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::runScript",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::runScript",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_runScript",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->runScript((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_startCallFunction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::startCallFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::startCallFunction",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::startCallFunction",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_startCallFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->startCallFunction((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_endCallFunction__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::endCallFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::endCallFunction",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::endCallFunction",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_endCallFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->endCallFunction(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_endCallFunction__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::endCallFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::endCallFunction",1,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_endCallFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  result = (bool)(arg1)->endCallFunction();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_endCallFunction(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__ScriptContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ScriptContext_endCallFunction__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__ScriptContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScriptContext_endCallFunction__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ScriptContext_endCallFunction'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::ScriptContext::endCallFunction(int)\n"
    "    Neo::ScriptContext::endCallFunction()\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptContext_callFunction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::callFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::callFunction",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::callFunction",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_callFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->callFunction((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_addFunction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int (*arg3)(void) = (int (*)(void)) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::addFunction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::addFunction",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::addFunction",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::ScriptContext::addFunction",3,"int (*)(void)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_addFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_void__int,0))){
    SWIG_fail_ptr("ScriptContext_addFunction",3,SWIGTYPE_p_f_void__int);
  }
  
  (arg1)->addFunction((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_runString(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::runString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::runString",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::runString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_runString",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->runString((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getArgsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::ScriptContext::getArgsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getArgsNumber",1,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getArgsNumber",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  result = (unsigned int)(arg1)->getArgsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getIntArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  int *arg3 = (int *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::ScriptContext::getIntArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getIntArray",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getIntArray",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::ScriptContext::getIntArray",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::ScriptContext::getIntArray",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getIntArray",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ScriptContext_getIntArray",3,SWIGTYPE_p_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->getIntArray(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getFloatArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::ScriptContext::getFloatArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getFloatArray",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getFloatArray",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::ScriptContext::getFloatArray",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::ScriptContext::getFloatArray",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getFloatArray",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ScriptContext_getFloatArray",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->getFloatArray(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getString(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::getString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getString",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getString",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getString",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (char *)(arg1)->getString(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getInteger(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("Neo::ScriptContext::getInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getInteger",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getInteger",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getInteger",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (int)(arg1)->getInteger(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getFloat(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::ScriptContext::getFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getFloat",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getFloat",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getFloat",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)(arg1)->getFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::getPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getPointer",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getPointer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getPointer",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (void *)(arg1)->getPointer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getBoolean(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::getBoolean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getBoolean",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getBoolean",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getBoolean",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->getBoolean(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushIntArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  int *arg2 = (int *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushIntArray",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushIntArray",1,"Neo::ScriptContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushIntArray",2,"int const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::ScriptContext::pushIntArray",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushIntArray",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ScriptContext_pushIntArray",2,SWIGTYPE_p_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->pushIntArray((int const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushFloatArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushFloatArray",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushFloatArray",1,"Neo::ScriptContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushFloatArray",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::ScriptContext::pushFloatArray",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushFloatArray",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ScriptContext_pushFloatArray",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->pushFloatArray((float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushString(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushString",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushString",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->pushString((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushBoolean(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushBoolean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushBoolean",1,"Neo::ScriptContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushBoolean",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushBoolean",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->pushBoolean(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushInteger(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushInteger",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushInteger",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushInteger",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->pushInteger(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushFloat(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushFloat",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushFloat",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushFloat",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->pushFloat(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushPointer",1,"Neo::ScriptContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushPointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushPointer",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ScriptContext_pushPointer");
  (arg1)->pushPointer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_isNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::isNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::isNumber",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::isNumber",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_isNumber",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isNumber(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_isFunctionOk(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::isFunctionOk",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::isFunctionOk",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::isFunctionOk",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::ScriptContext::isFunctionOk",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_isFunctionOk",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)(arg1)->isFunctionOk((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_isRunning(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::isRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::isRunning",1,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_isRunning",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  result = (bool)(arg1)->isRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptContext(void *obj) {
Neo::ScriptContext *arg1 = (Neo::ScriptContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_ScriptContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptContext_methods[]= {
    { "init", _wrap_ScriptContext_init},
    { "runScript", _wrap_ScriptContext_runScript},
    { "startCallFunction", _wrap_ScriptContext_startCallFunction},
    { "endCallFunction", _wrap_ScriptContext_endCallFunction},
    { "callFunction", _wrap_ScriptContext_callFunction},
    { "addFunction", _wrap_ScriptContext_addFunction},
    { "runString", _wrap_ScriptContext_runString},
    { "getArgsNumber", _wrap_ScriptContext_getArgsNumber},
    { "getIntArray", _wrap_ScriptContext_getIntArray},
    { "getFloatArray", _wrap_ScriptContext_getFloatArray},
    { "getString", _wrap_ScriptContext_getString},
    { "getInteger", _wrap_ScriptContext_getInteger},
    { "getFloat", _wrap_ScriptContext_getFloat},
    { "getPointer", _wrap_ScriptContext_getPointer},
    { "getBoolean", _wrap_ScriptContext_getBoolean},
    { "pushIntArray", _wrap_ScriptContext_pushIntArray},
    { "pushFloatArray", _wrap_ScriptContext_pushFloatArray},
    { "pushString", _wrap_ScriptContext_pushString},
    { "pushBoolean", _wrap_ScriptContext_pushBoolean},
    { "pushInteger", _wrap_ScriptContext_pushInteger},
    { "pushFloat", _wrap_ScriptContext_pushFloat},
    { "pushPointer", _wrap_ScriptContext_pushPointer},
    { "isNumber", _wrap_ScriptContext_isNumber},
    { "isFunctionOk", _wrap_ScriptContext_isFunctionOk},
    { "isRunning", _wrap_ScriptContext_isRunning},
    {0,0}
};
static swig_lua_method swig_ScriptContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptContext_Sf_SwigStatic = {
    "ScriptContext",
    swig_ScriptContext_Sf_SwigStatic_methods,
    swig_ScriptContext_Sf_SwigStatic_attributes,
    swig_ScriptContext_Sf_SwigStatic_constants,
    swig_ScriptContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptContext_bases[] = {0};
static const char *swig_ScriptContext_base_names[] = {0};
static swig_lua_class _wrap_class_ScriptContext = { "ScriptContext", "ScriptContext", &SWIGTYPE_p_Neo__ScriptContext,0, swig_delete_ScriptContext, swig_ScriptContext_methods, swig_ScriptContext_attributes, &swig_ScriptContext_Sf_SwigStatic, swig_ScriptContext_meta, swig_ScriptContext_bases, swig_ScriptContext_base_names };

static int _wrap_new_Image(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *result = 0 ;
  
  SWIG_check_num_args("Neo::Image::Image",0,0)
  result = (Neo::Image *)new Neo::Image();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Image,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_create(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Neo::Image::create",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::create",1,"Neo::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Image::create",2,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Image::create",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Image::create",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Image::create",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_create",1,SWIGTYPE_p_Neo__Image);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->create(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::Image::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::clear",1,"Neo::Image *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Image::clear",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_clear",1,SWIGTYPE_p_Neo__Image);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Image_clear");
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_readPixel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::Image::readPixel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::readPixel",1,"Neo::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Image::readPixel",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Image::readPixel",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::Image::readPixel",4,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_readPixel",1,SWIGTYPE_p_Neo__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"Image_readPixel");
  (arg1)->readPixel(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_writePixel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::Image::writePixel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::writePixel",1,"Neo::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Image::writePixel",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Image::writePixel",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::Image::writePixel",4,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_writePixel",1,SWIGTYPE_p_Neo__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"Image_writePixel");
  (arg1)->writePixel(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::Image::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getData",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getData",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (void *)(arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getDataType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  Neo::VAR_TYPES result;
  
  SWIG_check_num_args("Neo::Image::getDataType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getDataType",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getDataType",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (Neo::VAR_TYPES)(arg1)->getDataType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getComponents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Image::getComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getComponents",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getComponents",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (unsigned int)(arg1)->getComponents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Image::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getWidth",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getWidth",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (unsigned int)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Image::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getHeight",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getHeight",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (unsigned int)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Image::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getSize",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getSize",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (unsigned int)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Image(void *obj) {
Neo::Image *arg1 = (Neo::Image *) obj;
delete arg1;
}
static int _proxy__wrap_new_Image(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Image);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Image_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Image_methods[]= {
    { "create", _wrap_Image_create},
    { "clear", _wrap_Image_clear},
    { "readPixel", _wrap_Image_readPixel},
    { "writePixel", _wrap_Image_writePixel},
    { "getData", _wrap_Image_getData},
    { "getDataType", _wrap_Image_getDataType},
    { "getComponents", _wrap_Image_getComponents},
    { "getWidth", _wrap_Image_getWidth},
    { "getHeight", _wrap_Image_getHeight},
    { "getSize", _wrap_Image_getSize},
    {0,0}
};
static swig_lua_method swig_Image_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Image_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Image_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Image_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Image_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Image_Sf_SwigStatic = {
    "Image",
    swig_Image_Sf_SwigStatic_methods,
    swig_Image_Sf_SwigStatic_attributes,
    swig_Image_Sf_SwigStatic_constants,
    swig_Image_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Image_bases[] = {0};
static const char *swig_Image_base_names[] = {0};
static swig_lua_class _wrap_class_Image = { "Image", "Image", &SWIGTYPE_p_Neo__Image,_proxy__wrap_new_Image, swig_delete_Image, swig_Image_methods, swig_Image_attributes, &swig_Image_Sf_SwigStatic, swig_Image_meta, swig_Image_bases, swig_Image_base_names };

static int _wrap_new_Sound(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *result = 0 ;
  
  SWIG_check_num_args("Neo::Sound::Sound",0,0)
  result = (Neo::Sound *)new Neo::Sound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Sound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_create(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  Neo::SOUND_FORMAT arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::Sound::create",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::create",1,"Neo::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Sound::create",2,"Neo::SOUND_FORMAT");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Sound::create",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Sound::create",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_create",1,SWIGTYPE_p_Neo__Sound);
  }
  
  arg2 = (Neo::SOUND_FORMAT)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->create(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::Sound::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::getData",1,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_getData",1,SWIGTYPE_p_Neo__Sound);
  }
  
  result = (void *)(arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getFormat(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  Neo::SOUND_FORMAT result;
  
  SWIG_check_num_args("Neo::Sound::getFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::getFormat",1,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_getFormat",1,SWIGTYPE_p_Neo__Sound);
  }
  
  result = (Neo::SOUND_FORMAT)(arg1)->getFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Sound::getSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::getSampleRate",1,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_getSampleRate",1,SWIGTYPE_p_Neo__Sound);
  }
  
  result = (unsigned int)(arg1)->getSampleRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Sound::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::getSize",1,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_getSize",1,SWIGTYPE_p_Neo__Sound);
  }
  
  result = (unsigned int)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sound(void *obj) {
Neo::Sound *arg1 = (Neo::Sound *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sound(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sound);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sound_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sound_methods[]= {
    { "create", _wrap_Sound_create},
    { "getData", _wrap_Sound_getData},
    { "getFormat", _wrap_Sound_getFormat},
    { "getSampleRate", _wrap_Sound_getSampleRate},
    { "getSize", _wrap_Sound_getSize},
    {0,0}
};
static swig_lua_method swig_Sound_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sound_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sound_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sound_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sound_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sound_Sf_SwigStatic = {
    "Sound",
    swig_Sound_Sf_SwigStatic_methods,
    swig_Sound_Sf_SwigStatic_attributes,
    swig_Sound_Sf_SwigStatic_constants,
    swig_Sound_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sound_bases[] = {0};
static const char *swig_Sound_base_names[] = {0};
static swig_lua_class _wrap_class_Sound = { "Sound", "Sound", &SWIGTYPE_p_Neo__Sound,_proxy__wrap_new_Sound, swig_delete_Sound, swig_Sound_methods, swig_Sound_attributes, &swig_Sound_Sf_SwigStatic, swig_Sound_meta, swig_Sound_bases, swig_Sound_base_names };

static int _wrap_getLocalFilename(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("getLocalFilename",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("getLocalFilename",1,"char *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getLocalFilename",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("getLocalFilename",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  getLocalFilename(arg1,(char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getGlobalFilename(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("getGlobalFilename",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("getGlobalFilename",1,"char *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getGlobalFilename",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("getGlobalFilename",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  getGlobalFilename(arg1,(char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getRepertory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("getRepertory",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("getRepertory",1,"char *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getRepertory",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  getRepertory(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_readTextFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("readTextFile",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("readTextFile",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)readTextFile((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::clear",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_clear",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::destroy",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_destroy",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_incrScore(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::incrScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::incrScore",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_incrScore",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->incrScore();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_decrScore(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::decrScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::decrScore",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_decrScore",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->decrScore();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_getScore(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::DataRef::getScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::getScore",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_getScore",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  result = (unsigned int)(arg1)->getScore();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::update",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_update",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::DataRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::getType",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_getType",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_setTime(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("Neo::DataRef::setTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::setTime",1,"Neo::DataRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::DataRef::setTime",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_setTime",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  (arg1)->setTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_getTime(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  long result;
  
  SWIG_check_num_args("Neo::DataRef::getTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::getTime",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_getTime",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  result = (long)(arg1)->getTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_getFilename(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::DataRef::getFilename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::getFilename",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_getFilename",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  result = (char *)(arg1)->getFilename();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DataRef(void *obj) {
Neo::DataRef *arg1 = (Neo::DataRef *) obj;
delete arg1;
}
static swig_lua_attribute swig_DataRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DataRef_methods[]= {
    { "clear", _wrap_DataRef_clear},
    { "destroy", _wrap_DataRef_destroy},
    { "incrScore", _wrap_DataRef_incrScore},
    { "decrScore", _wrap_DataRef_decrScore},
    { "getScore", _wrap_DataRef_getScore},
    { "update", _wrap_DataRef_update},
    { "getType", _wrap_DataRef_getType},
    { "setTime", _wrap_DataRef_setTime},
    { "getTime", _wrap_DataRef_getTime},
    { "getFilename", _wrap_DataRef_getFilename},
    {0,0}
};
static swig_lua_method swig_DataRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DataRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DataRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DataRef_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DataRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DataRef_Sf_SwigStatic = {
    "DataRef",
    swig_DataRef_Sf_SwigStatic_methods,
    swig_DataRef_Sf_SwigStatic_attributes,
    swig_DataRef_Sf_SwigStatic_constants,
    swig_DataRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DataRef_bases[] = {0};
static const char *swig_DataRef_base_names[] = {0};
static swig_lua_class _wrap_class_DataRef = { "DataRef", "DataRef", &SWIGTYPE_p_Neo__DataRef,0, swig_delete_DataRef, swig_DataRef_methods, swig_DataRef_attributes, &swig_DataRef_Sf_SwigStatic, swig_DataRef_meta, swig_DataRef_bases, swig_DataRef_base_names };

static int _wrap_DataManager_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  
  SWIG_check_num_args("Neo::DataManager::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataManager::clear",1,"Neo::DataManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataManager,0))){
    SWIG_fail_ptr("DataManager_clear",1,SWIGTYPE_p_Neo__DataManager);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataManager_addRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  Neo::DataRef *arg2 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataManager::addRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataManager::addRef",1,"Neo::DataManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::DataManager::addRef",2,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataManager,0))){
    SWIG_fail_ptr("DataManager_addRef",1,SWIGTYPE_p_Neo__DataManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataManager_addRef",2,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->addRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataManager_getRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  unsigned int arg2 ;
  Neo::DataRef *result = 0 ;
  
  SWIG_check_num_args("Neo::DataManager::getRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataManager::getRef",1,"Neo::DataManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::DataManager::getRef",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataManager,0))){
    SWIG_fail_ptr("DataManager_getRef",1,SWIGTYPE_p_Neo__DataManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::DataRef *)(arg1)->getRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataManager_getRefsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::DataManager::getRefsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataManager::getRefsNumber",1,"Neo::DataManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataManager,0))){
    SWIG_fail_ptr("DataManager_getRefsNumber",1,SWIGTYPE_p_Neo__DataManager);
  }
  
  result = (unsigned int)(arg1)->getRefsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DataManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::DataManager::DataManager",0,0)
  result = (Neo::DataManager *)new Neo::DataManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DataManager(void *obj) {
Neo::DataManager *arg1 = (Neo::DataManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_DataManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DataManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DataManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DataManager_methods[]= {
    { "clear", _wrap_DataManager_clear},
    { "addRef", _wrap_DataManager_addRef},
    { "getRef", _wrap_DataManager_getRef},
    { "getRefsNumber", _wrap_DataManager_getRefsNumber},
    {0,0}
};
static swig_lua_method swig_DataManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DataManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DataManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DataManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DataManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DataManager_Sf_SwigStatic = {
    "DataManager",
    swig_DataManager_Sf_SwigStatic_methods,
    swig_DataManager_Sf_SwigStatic_attributes,
    swig_DataManager_Sf_SwigStatic_constants,
    swig_DataManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DataManager_bases[] = {0};
static const char *swig_DataManager_base_names[] = {0};
static swig_lua_class _wrap_class_DataManager = { "DataManager", "DataManager", &SWIGTYPE_p_Neo__DataManager,_proxy__wrap_new_DataManager, swig_delete_DataManager, swig_DataManager_methods, swig_DataManager_attributes, &swig_DataManager_Sf_SwigStatic, swig_DataManager_meta, swig_DataManager_bases, swig_DataManager_base_names };

static int _wrap_new_DataLoadFunction(lua_State* L) {
  int SWIG_arg = 0;
  bool (*arg1)(char const *,void *) = (bool (*)(char const *,void *)) 0 ;
  Neo::DataLoadFunction *result = 0 ;
  
  SWIG_check_num_args("Neo::DataLoadFunction::DataLoadFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataLoadFunction::DataLoadFunction",1,"bool (*)(char const *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_p_q_const__char_p_void__bool,0))){
    SWIG_fail_ptr("new_DataLoadFunction",1,SWIGTYPE_p_f_p_q_const__char_p_void__bool);
  }
  
  result = (Neo::DataLoadFunction *)new Neo::DataLoadFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoadFunction,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataLoadFunction_m_functionPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataLoadFunction *arg1 = (Neo::DataLoadFunction *) 0 ;
  bool (*arg2)(char const *,void *) = (bool (*)(char const *,void *)) 0 ;
  
  SWIG_check_num_args("Neo::DataLoadFunction::m_functionPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataLoadFunction::m_functionPtr",1,"Neo::DataLoadFunction *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::DataLoadFunction::m_functionPtr",2,"bool (*)(char const *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataLoadFunction,0))){
    SWIG_fail_ptr("DataLoadFunction_m_functionPtr_set",1,SWIGTYPE_p_Neo__DataLoadFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_q_const__char_p_void__bool,0))){
    SWIG_fail_ptr("DataLoadFunction_m_functionPtr_set",2,SWIGTYPE_p_f_p_q_const__char_p_void__bool);
  }
  
  if (arg1) (arg1)->m_functionPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataLoadFunction_m_functionPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataLoadFunction *arg1 = (Neo::DataLoadFunction *) 0 ;
  bool (*result)(char const *,void *) = 0 ;
  
  SWIG_check_num_args("Neo::DataLoadFunction::m_functionPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataLoadFunction::m_functionPtr",1,"Neo::DataLoadFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataLoadFunction,0))){
    SWIG_fail_ptr("DataLoadFunction_m_functionPtr_get",1,SWIGTYPE_p_Neo__DataLoadFunction);
  }
  
  result = (bool (*)(char const *,void *)) ((arg1)->m_functionPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_q_const__char_p_void__bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DataLoadFunction(void *obj) {
Neo::DataLoadFunction *arg1 = (Neo::DataLoadFunction *) obj;
delete arg1;
}
static int _proxy__wrap_new_DataLoadFunction(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DataLoadFunction);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DataLoadFunction_attributes[] = {
    { "m_functionPtr", _wrap_DataLoadFunction_m_functionPtr_get, _wrap_DataLoadFunction_m_functionPtr_set },
    {0,0,0}
};
static swig_lua_method swig_DataLoadFunction_methods[]= {
    {0,0}
};
static swig_lua_method swig_DataLoadFunction_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DataLoadFunction_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DataLoadFunction_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DataLoadFunction_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DataLoadFunction_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DataLoadFunction_Sf_SwigStatic = {
    "DataLoadFunction",
    swig_DataLoadFunction_Sf_SwigStatic_methods,
    swig_DataLoadFunction_Sf_SwigStatic_attributes,
    swig_DataLoadFunction_Sf_SwigStatic_constants,
    swig_DataLoadFunction_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DataLoadFunction_bases[] = {0};
static const char *swig_DataLoadFunction_base_names[] = {0};
static swig_lua_class _wrap_class_DataLoadFunction = { "DataLoadFunction", "DataLoadFunction", &SWIGTYPE_p_Neo__DataLoadFunction,_proxy__wrap_new_DataLoadFunction, swig_delete_DataLoadFunction, swig_DataLoadFunction_methods, swig_DataLoadFunction_attributes, &swig_DataLoadFunction_Sf_SwigStatic, swig_DataLoadFunction_meta, swig_DataLoadFunction_bases, swig_DataLoadFunction_base_names };

static int _wrap_new_DataLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataLoader *result = 0 ;
  
  SWIG_check_num_args("Neo::DataLoader::DataLoader",0,0)
  result = (Neo::DataLoader *)new Neo::DataLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataLoader_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataLoader *arg1 = (Neo::DataLoader *) 0 ;
  
  SWIG_check_num_args("Neo::DataLoader::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataLoader::clear",1,"Neo::DataLoader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataLoader,0))){
    SWIG_fail_ptr("DataLoader_clear",1,SWIGTYPE_p_Neo__DataLoader);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataLoader_addLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataLoader *arg1 = (Neo::DataLoader *) 0 ;
  bool (*arg2)(char const *,void *) = (bool (*)(char const *,void *)) 0 ;
  
  SWIG_check_num_args("Neo::DataLoader::addLoader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataLoader::addLoader",1,"Neo::DataLoader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::DataLoader::addLoader",2,"bool (*)(char const *,void *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataLoader,0))){
    SWIG_fail_ptr("DataLoader_addLoader",1,SWIGTYPE_p_Neo__DataLoader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_q_const__char_p_void__bool,0))){
    SWIG_fail_ptr("DataLoader_addLoader",2,SWIGTYPE_p_f_p_q_const__char_p_void__bool);
  }
  
  (arg1)->addLoader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataLoader_loadData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataLoader *arg1 = (Neo::DataLoader *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::DataLoader::loadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataLoader::loadData",1,"Neo::DataLoader *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::DataLoader::loadData",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::DataLoader::loadData",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataLoader,0))){
    SWIG_fail_ptr("DataLoader_loadData",1,SWIGTYPE_p_Neo__DataLoader);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"DataLoader_loadData");
  result = (bool)(arg1)->loadData((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DataLoader(void *obj) {
Neo::DataLoader *arg1 = (Neo::DataLoader *) obj;
delete arg1;
}
static int _proxy__wrap_new_DataLoader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DataLoader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DataLoader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DataLoader_methods[]= {
    { "clear", _wrap_DataLoader_clear},
    { "addLoader", _wrap_DataLoader_addLoader},
    { "loadData", _wrap_DataLoader_loadData},
    {0,0}
};
static swig_lua_method swig_DataLoader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DataLoader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DataLoader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DataLoader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DataLoader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DataLoader_Sf_SwigStatic = {
    "DataLoader",
    swig_DataLoader_Sf_SwigStatic_methods,
    swig_DataLoader_Sf_SwigStatic_attributes,
    swig_DataLoader_Sf_SwigStatic_constants,
    swig_DataLoader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DataLoader_bases[] = {0};
static const char *swig_DataLoader_base_names[] = {0};
static swig_lua_class _wrap_class_DataLoader = { "DataLoader", "DataLoader", &SWIGTYPE_p_Neo__DataLoader,_proxy__wrap_new_DataLoader, swig_delete_DataLoader, swig_DataLoader_methods, swig_DataLoader_attributes, &swig_DataLoader_Sf_SwigStatic, swig_DataLoader_meta, swig_DataLoader_bases, swig_DataLoader_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_FLOAT("M_PI", 3.14159265358979323846)},
    {SWIG_LUA_CONSTTAB_FLOAT("DEG_TO_RAD", ((3.14159265358979323846*2)/360.0))},
    {SWIG_LUA_CONSTTAB_FLOAT("RAD_TO_DEG", (1.0/((3.14159265358979323846*2)/360.0)))},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_BEGIN", Neo::TOUCH_BEGIN)},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_UPDATE", Neo::TOUCH_UPDATE)},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_END", Neo::TOUCH_END)},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_CANCELLED", Neo::TOUCH_CANCELLED)},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_NONE", Neo::TOUCH_NONE)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_NONE", Neo::BLENDING_NONE)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_ALPHA", Neo::BLENDING_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_ADD", Neo::BLENDING_ADD)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_SUB", Neo::BLENDING_SUB)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_LIGHT", Neo::BLENDING_LIGHT)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_PRODUCT", Neo::BLENDING_PRODUCT)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_NONE", Neo::DEPTH_NONE)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_ALWAYS", Neo::DEPTH_ALWAYS)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_LESS", Neo::DEPTH_LESS)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_GREATER", Neo::DEPTH_GREATER)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_EQUAL", Neo::DEPTH_EQUAL)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_LEQUAL", Neo::DEPTH_LEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_GEQUAL", Neo::DEPTH_GEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_NOTEQUAL", Neo::DEPTH_NOTEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("MATRIX_MODELVIEW", Neo::MATRIX_MODELVIEW)},
    {SWIG_LUA_CONSTTAB_INT("MATRIX_PROJECTION", Neo::MATRIX_PROJECTION)},
    {SWIG_LUA_CONSTTAB_INT("MATRIX_TEXTURE", Neo::MATRIX_TEXTURE)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_POINTS", Neo::PRIMITIVE_POINTS)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_LINES", Neo::PRIMITIVE_LINES)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_LINE_LOOP", Neo::PRIMITIVE_LINE_LOOP)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_LINE_STRIP", Neo::PRIMITIVE_LINE_STRIP)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_TRIANGLES", Neo::PRIMITIVE_TRIANGLES)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_TRIANGLE_STRIP", Neo::PRIMITIVE_TRIANGLE_STRIP)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_TRIANGLE_FAN", Neo::PRIMITIVE_TRIANGLE_FAN)},
    {SWIG_LUA_CONSTTAB_INT("BUFFER_COLOR", Neo::BUFFER_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("BUFFER_DEPTH", Neo::BUFFER_DEPTH)},
    {SWIG_LUA_CONSTTAB_INT("BUFFER_STENCIL", Neo::BUFFER_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("TEX_DEPTH", Neo::TEX_DEPTH)},
    {SWIG_LUA_CONSTTAB_INT("TEX_R", Neo::TEX_R)},
    {SWIG_LUA_CONSTTAB_INT("TEX_RG", Neo::TEX_RG)},
    {SWIG_LUA_CONSTTAB_INT("TEX_RGB", Neo::TEX_RGB)},
    {SWIG_LUA_CONSTTAB_INT("TEX_RGBA", Neo::TEX_RGBA)},
    {SWIG_LUA_CONSTTAB_INT("TEX_GEN_NONE", Neo::TEX_GEN_NONE)},
    {SWIG_LUA_CONSTTAB_INT("TEX_GEN_SPHERE_MAP", Neo::TEX_GEN_SPHERE_MAP)},
    {SWIG_LUA_CONSTTAB_INT("TEX_GEN_CUBE_MAP", Neo::TEX_GEN_CUBE_MAP)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_REPLACE", Neo::TEX_COMBINE_REPLACE)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_MODULATE", Neo::TEX_COMBINE_MODULATE)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_ALPHA", Neo::TEX_COMBINE_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_ADD", Neo::TEX_COMBINE_ADD)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_SUB", Neo::TEX_COMBINE_SUB)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_DOT", Neo::TEX_COMBINE_DOT)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_NEAREST", Neo::TEX_FILTER_NEAREST)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_NEAREST_MIPMAP_NEAREST", Neo::TEX_FILTER_NEAREST_MIPMAP_NEAREST)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_NEAREST_MIPMAP_LINEAR", Neo::TEX_FILTER_NEAREST_MIPMAP_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_LINEAR", Neo::TEX_FILTER_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_LINEAR_MIPMAP_NEAREST", Neo::TEX_FILTER_LINEAR_MIPMAP_NEAREST)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_LINEAR_MIPMAP_LINEAR", Neo::TEX_FILTER_LINEAR_MIPMAP_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("WRAP_REPEAT", Neo::WRAP_REPEAT)},
    {SWIG_LUA_CONSTTAB_INT("WRAP_CLAMP", Neo::WRAP_CLAMP)},
    {SWIG_LUA_CONSTTAB_INT("CULL_NONE", Neo::CULL_NONE)},
    {SWIG_LUA_CONSTTAB_INT("CULL_FRONT", Neo::CULL_FRONT)},
    {SWIG_LUA_CONSTTAB_INT("CULL_BACK", Neo::CULL_BACK)},
    {SWIG_LUA_CONSTTAB_INT("CULL_FRONT_BACK", Neo::CULL_FRONT_BACK)},
    {SWIG_LUA_CONSTTAB_INT("VAR_BOOL", Neo::VAR_BOOL)},
    {SWIG_LUA_CONSTTAB_INT("VAR_BYTE", Neo::VAR_BYTE)},
    {SWIG_LUA_CONSTTAB_INT("VAR_UBYTE", Neo::VAR_UBYTE)},
    {SWIG_LUA_CONSTTAB_INT("VAR_SHORT", Neo::VAR_SHORT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_USHORT", Neo::VAR_USHORT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_INT", Neo::VAR_INT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_UINT", Neo::VAR_UINT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_FLOAT", Neo::VAR_FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_DOUBLE", Neo::VAR_DOUBLE)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_DEPTH", Neo::ATTACH_DEPTH)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_STENCIL", Neo::ATTACH_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR0", Neo::ATTACH_COLOR0)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR1", Neo::ATTACH_COLOR1)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR2", Neo::ATTACH_COLOR2)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR3", Neo::ATTACH_COLOR3)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR4", Neo::ATTACH_COLOR4)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR5", Neo::ATTACH_COLOR5)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR6", Neo::ATTACH_COLOR6)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR7", Neo::ATTACH_COLOR7)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_DEPTH", Neo::RENDER_DEPTH)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_STENCIL", Neo::RENDER_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_DEPTH_STENCIL", Neo::RENDER_DEPTH_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_ALWAYS", Neo::STENCIL_ALWAYS)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_NEVER", Neo::STENCIL_NEVER)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_EQUAL", Neo::STENCIL_EQUAL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_NOTEQUAL", Neo::STENCIL_NOTEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_LESS", Neo::STENCIL_LESS)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_LEQUAL", Neo::STENCIL_LEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_GREATER", Neo::STENCIL_GREATER)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_GEQUAL", Neo::STENCIL_GEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_KEEP", Neo::STENCIL_KEEP)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_INVERT", Neo::STENCIL_INVERT)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_DECR", Neo::STENCIL_DECR)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_INCR", Neo::STENCIL_INCR)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_REPLACE", Neo::STENCIL_REPLACE)},
    {SWIG_LUA_CONSTTAB_INT("VBO_ARRAY", Neo::VBO_ARRAY)},
    {SWIG_LUA_CONSTTAB_INT("VBO_ELEMENT_ARRAY", Neo::VBO_ELEMENT_ARRAY)},
    {SWIG_LUA_CONSTTAB_INT("VBO_STATIC", Neo::VBO_STATIC)},
    {SWIG_LUA_CONSTTAB_INT("VBO_DYNAMIC", Neo::VBO_DYNAMIC)},
    {SWIG_LUA_CONSTTAB_INT("VBO_STREAM", Neo::VBO_STREAM)},
    {SWIG_LUA_CONSTTAB_INT("SOUND_FORMAT_MONO8", Neo::SOUND_FORMAT_MONO8)},
    {SWIG_LUA_CONSTTAB_INT("SOUND_FORMAT_MONO16", Neo::SOUND_FORMAT_MONO16)},
    {SWIG_LUA_CONSTTAB_INT("SOUND_FORMAT_STEREO8", Neo::SOUND_FORMAT_STEREO8)},
    {SWIG_LUA_CONSTTAB_INT("SOUND_FORMAT_STEREO16", Neo::SOUND_FORMAT_STEREO16)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "getNextPowerOfTwo", _wrap_getNextPowerOfTwo},
    { "loopFloat", _wrap_loopFloat},
    { "sortFloatList", _wrap_sortFloatList},
    { "isBoxToBoxCollision", _wrap_isBoxToBoxCollision},
    { "isBoxToBox2dCollision", _wrap_isBoxToBox2dCollision},
    { "isPointInBox", _wrap_isPointInBox},
    { "isPointInBox2d", _wrap_isPointInBox2d},
    { "isEdgeToBoxCollision", _wrap_isEdgeToBoxCollision},
    { "isEdgeToEdge2dIntersection", _wrap_isEdgeToEdge2dIntersection},
    { "isPointInTriangle", _wrap_isPointInTriangle},
    { "isLineCircleIntersection", _wrap_isLineCircleIntersection},
    { "isRaySphereIntersection", _wrap_isRaySphereIntersection},
    { "isRayPlaneIntersection", _wrap_isRayPlaneIntersection},
    { "isEdgePlaneIntersection", _wrap_isEdgePlaneIntersection},
    { "isEdgeTriangleIntersection", _wrap_isEdgeTriangleIntersection},
    { "getTriangleNormal", _wrap_getTriangleNormal},
    { "simplifyDP", _wrap_simplifyDP},
    { "linearInterpolation", _wrap_linearInterpolation},
    { "cubicInterpolation", _wrap_cubicInterpolation},
    { "CatmullRomInterpolation", _wrap_CatmullRomInterpolation},
    { "HermiteInterpolation", _wrap_HermiteInterpolation},
    { "HueToRGB", _wrap_HueToRGB},
    { "RGBToHSV", _wrap_RGBToHSV},
    { "HSVToRGB", _wrap_HSVToRGB},
    { "RGBToHSL", _wrap_RGBToHSL},
    { "HSLToRGB", _wrap_HSLToRGB},
    { "getLocalFilename", _wrap_getLocalFilename},
    { "getGlobalFilename", _wrap_getGlobalFilename},
    { "getRepertory", _wrap_getRepertory},
    { "readTextFile", _wrap_readTextFile},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_Range,
&_wrap_class_Vector2,
&_wrap_class_Vector3,
&_wrap_class_Vector4,
&_wrap_class_Color,
&_wrap_class_Matrix4x4,
&_wrap_class_Quaternion,
&_wrap_class_SystemContext,
&_wrap_class_InputContext,
&_wrap_class_RenderingContext,
&_wrap_class_SoundContext,
&_wrap_class_PhysicsContext,
&_wrap_class_ScriptContext,
&_wrap_class_Image,
&_wrap_class_Sound,
&_wrap_class_DataRef,
&_wrap_class_DataManager,
&_wrap_class_DataLoadFunction,
&_wrap_class_DataLoader,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "NeoCore",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Neo__Color = {"_p_Neo__Color", "Neo::Color *", 0, 0, (void*)&_wrap_class_Color, 0};
static swig_type_info _swigt__p_Neo__DataLoadFunction = {"_p_Neo__DataLoadFunction", "Neo::DataLoadFunction *", 0, 0, (void*)&_wrap_class_DataLoadFunction, 0};
static swig_type_info _swigt__p_Neo__DataLoader = {"_p_Neo__DataLoader", "Neo::DataLoader *", 0, 0, (void*)&_wrap_class_DataLoader, 0};
static swig_type_info _swigt__p_Neo__DataManager = {"_p_Neo__DataManager", "Neo::DataManager *", 0, 0, (void*)&_wrap_class_DataManager, 0};
static swig_type_info _swigt__p_Neo__DataRef = {"_p_Neo__DataRef", "Neo::DataRef *", 0, 0, (void*)&_wrap_class_DataRef, 0};
static swig_type_info _swigt__p_Neo__FRAME_BUFFER_ATTACHMENT = {"_p_Neo__FRAME_BUFFER_ATTACHMENT", "enum Neo::FRAME_BUFFER_ATTACHMENT *|Neo::FRAME_BUFFER_ATTACHMENT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__Image = {"_p_Neo__Image", "Neo::Image *", 0, 0, (void*)&_wrap_class_Image, 0};
static swig_type_info _swigt__p_Neo__InputContext = {"_p_Neo__InputContext", "Neo::InputContext *", 0, 0, (void*)&_wrap_class_InputContext, 0};
static swig_type_info _swigt__p_Neo__Matrix4x4 = {"_p_Neo__Matrix4x4", "Neo::Matrix4x4 *", 0, 0, (void*)&_wrap_class_Matrix4x4, 0};
static swig_type_info _swigt__p_Neo__PhysicsContext = {"_p_Neo__PhysicsContext", "Neo::PhysicsContext *", 0, 0, (void*)&_wrap_class_PhysicsContext, 0};
static swig_type_info _swigt__p_Neo__Quaternion = {"_p_Neo__Quaternion", "Neo::Quaternion *", 0, 0, (void*)&_wrap_class_Quaternion, 0};
static swig_type_info _swigt__p_Neo__Range = {"_p_Neo__Range", "Neo::Range *", 0, 0, (void*)&_wrap_class_Range, 0};
static swig_type_info _swigt__p_Neo__RenderingContext = {"_p_Neo__RenderingContext", "Neo::RenderingContext *", 0, 0, (void*)&_wrap_class_RenderingContext, 0};
static swig_type_info _swigt__p_Neo__ScriptContext = {"_p_Neo__ScriptContext", "Neo::ScriptContext *", 0, 0, (void*)&_wrap_class_ScriptContext, 0};
static swig_type_info _swigt__p_Neo__Sound = {"_p_Neo__Sound", "Neo::Sound *", 0, 0, (void*)&_wrap_class_Sound, 0};
static swig_type_info _swigt__p_Neo__SoundContext = {"_p_Neo__SoundContext", "Neo::SoundContext *", 0, 0, (void*)&_wrap_class_SoundContext, 0};
static swig_type_info _swigt__p_Neo__SystemContext = {"_p_Neo__SystemContext", "Neo::SystemContext *", 0, 0, (void*)&_wrap_class_SystemContext, 0};
static swig_type_info _swigt__p_Neo__Vector2 = {"_p_Neo__Vector2", "Neo::Vector2 *", 0, 0, (void*)&_wrap_class_Vector2, 0};
static swig_type_info _swigt__p_Neo__Vector3 = {"_p_Neo__Vector3", "Neo::Vector3 *", 0, 0, (void*)&_wrap_class_Vector3, 0};
static swig_type_info _swigt__p_Neo__Vector4 = {"_p_Neo__Vector4", "Neo::Vector4 *", 0, 0, (void*)&_wrap_class_Vector4, 0};
static swig_type_info _swigt__p_f_p_q_const__char_p_void__bool = {"_p_f_p_q_const__char_p_void__bool", "bool (*)(char const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_void__int = {"_p_f_void__int", "int (*)(void)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Neo__Color,
  &_swigt__p_Neo__DataLoadFunction,
  &_swigt__p_Neo__DataLoader,
  &_swigt__p_Neo__DataManager,
  &_swigt__p_Neo__DataRef,
  &_swigt__p_Neo__FRAME_BUFFER_ATTACHMENT,
  &_swigt__p_Neo__Image,
  &_swigt__p_Neo__InputContext,
  &_swigt__p_Neo__Matrix4x4,
  &_swigt__p_Neo__PhysicsContext,
  &_swigt__p_Neo__Quaternion,
  &_swigt__p_Neo__Range,
  &_swigt__p_Neo__RenderingContext,
  &_swigt__p_Neo__ScriptContext,
  &_swigt__p_Neo__Sound,
  &_swigt__p_Neo__SoundContext,
  &_swigt__p_Neo__SystemContext,
  &_swigt__p_Neo__Vector2,
  &_swigt__p_Neo__Vector3,
  &_swigt__p_Neo__Vector4,
  &_swigt__p_f_p_q_const__char_p_void__bool,
  &_swigt__p_f_void__int,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_unsigned_int,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Neo__Color[] = {  {&_swigt__p_Neo__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoadFunction[] = {  {&_swigt__p_Neo__DataLoadFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoader[] = {  {&_swigt__p_Neo__DataLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataManager[] = {  {&_swigt__p_Neo__DataManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataRef[] = {  {&_swigt__p_Neo__DataRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__FRAME_BUFFER_ATTACHMENT[] = {  {&_swigt__p_Neo__FRAME_BUFFER_ATTACHMENT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Image[] = {  {&_swigt__p_Neo__Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__InputContext[] = {  {&_swigt__p_Neo__InputContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Matrix4x4[] = {  {&_swigt__p_Neo__Matrix4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__PhysicsContext[] = {  {&_swigt__p_Neo__PhysicsContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Quaternion[] = {  {&_swigt__p_Neo__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Range[] = {  {&_swigt__p_Neo__Range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__RenderingContext[] = {  {&_swigt__p_Neo__RenderingContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__ScriptContext[] = {  {&_swigt__p_Neo__ScriptContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Sound[] = {  {&_swigt__p_Neo__Sound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SoundContext[] = {  {&_swigt__p_Neo__SoundContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SystemContext[] = {  {&_swigt__p_Neo__SystemContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Vector2[] = {  {&_swigt__p_Neo__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Vector3[] = {  {&_swigt__p_Neo__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Vector4[] = {  {&_swigt__p_Neo__Vector4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_p_void__bool[] = {  {&_swigt__p_f_p_q_const__char_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_void__int[] = {  {&_swigt__p_f_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Neo__Color,
  _swigc__p_Neo__DataLoadFunction,
  _swigc__p_Neo__DataLoader,
  _swigc__p_Neo__DataManager,
  _swigc__p_Neo__DataRef,
  _swigc__p_Neo__FRAME_BUFFER_ATTACHMENT,
  _swigc__p_Neo__Image,
  _swigc__p_Neo__InputContext,
  _swigc__p_Neo__Matrix4x4,
  _swigc__p_Neo__PhysicsContext,
  _swigc__p_Neo__Quaternion,
  _swigc__p_Neo__Range,
  _swigc__p_Neo__RenderingContext,
  _swigc__p_Neo__ScriptContext,
  _swigc__p_Neo__Sound,
  _swigc__p_Neo__SoundContext,
  _swigc__p_Neo__SystemContext,
  _swigc__p_Neo__Vector2,
  _swigc__p_Neo__Vector3,
  _swigc__p_Neo__Vector4,
  _swigc__p_f_p_q_const__char_p_void__bool,
  _swigc__p_f_void__int,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_unsigned_int,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

