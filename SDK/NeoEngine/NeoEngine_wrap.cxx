/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    cls_static;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);

}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
  lua_rawset(L,-3); /* add namespace to module table */
}
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Armature swig_types[0]
#define SWIGTYPE_p_ArmatureAnim swig_types[1]
#define SWIGTYPE_p_BLENDING_MODES swig_types[2]
#define SWIGTYPE_p_Behavior swig_types[3]
#define SWIGTYPE_p_BehaviorManager swig_types[4]
#define SWIGTYPE_p_Box3d swig_types[5]
#define SWIGTYPE_p_CULL_MODES swig_types[6]
#define SWIGTYPE_p_Color swig_types[7]
#define SWIGTYPE_p_DataLoader swig_types[8]
#define SWIGTYPE_p_DataManager swig_types[9]
#define SWIGTYPE_p_DataRef swig_types[10]
#define SWIGTYPE_p_FXManager swig_types[11]
#define SWIGTYPE_p_FXRef swig_types[12]
#define SWIGTYPE_p_Font swig_types[13]
#define SWIGTYPE_p_Frustum swig_types[14]
#define SWIGTYPE_p_InputContext swig_types[15]
#define SWIGTYPE_p_M_SHADER_TYPES swig_types[16]
#define SWIGTYPE_p_MaterialsAnim swig_types[17]
#define SWIGTYPE_p_MorphingData swig_types[18]
#define SWIGTYPE_p_NeoVariable swig_types[19]
#define SWIGTYPE_p_Neo__AnimRange swig_types[20]
#define SWIGTYPE_p_Neo__Armature swig_types[21]
#define SWIGTYPE_p_Neo__ArmatureAnimRef swig_types[22]
#define SWIGTYPE_p_Neo__Box3d swig_types[23]
#define SWIGTYPE_p_Neo__Color swig_types[24]
#define SWIGTYPE_p_Neo__FontRef swig_types[25]
#define SWIGTYPE_p_Neo__Level swig_types[26]
#define SWIGTYPE_p_Neo__Material swig_types[27]
#define SWIGTYPE_p_Neo__MaterialDisplay swig_types[28]
#define SWIGTYPE_p_Neo__MaterialsAnimRef swig_types[29]
#define SWIGTYPE_p_Neo__Matrix4x4 swig_types[30]
#define SWIGTYPE_p_Neo__Mesh swig_types[31]
#define SWIGTYPE_p_Neo__MeshRef swig_types[32]
#define SWIGTYPE_p_Neo__NeoEngine swig_types[33]
#define SWIGTYPE_p_Neo__NeoGame swig_types[34]
#define SWIGTYPE_p_Neo__OBone swig_types[35]
#define SWIGTYPE_p_Neo__OCamera swig_types[36]
#define SWIGTYPE_p_Neo__OEntity swig_types[37]
#define SWIGTYPE_p_Neo__OLight swig_types[38]
#define SWIGTYPE_p_Neo__OSound swig_types[39]
#define SWIGTYPE_p_Neo__OText swig_types[40]
#define SWIGTYPE_p_Neo__Object3d swig_types[41]
#define SWIGTYPE_p_Neo__PhysicsConstraint swig_types[42]
#define SWIGTYPE_p_Neo__PhysicsProperties swig_types[43]
#define SWIGTYPE_p_Neo__Quaternion swig_types[44]
#define SWIGTYPE_p_Neo__Scene swig_types[45]
#define SWIGTYPE_p_Neo__ShaderRef swig_types[46]
#define SWIGTYPE_p_Neo__SoundRef swig_types[47]
#define SWIGTYPE_p_Neo__SubGame swig_types[48]
#define SWIGTYPE_p_Neo__SubMesh swig_types[49]
#define SWIGTYPE_p_Neo__Texture swig_types[50]
#define SWIGTYPE_p_Neo__TexturePass swig_types[51]
#define SWIGTYPE_p_Neo__TextureRef swig_types[52]
#define SWIGTYPE_p_Neo__TexturesAnimRef swig_types[53]
#define SWIGTYPE_p_Neo__Vector2 swig_types[54]
#define SWIGTYPE_p_Neo__Vector3 swig_types[55]
#define SWIGTYPE_p_Neo__Vector4 swig_types[56]
#define SWIGTYPE_p_PRIMITIVE_TYPES swig_types[57]
#define SWIGTYPE_p_PackageManager swig_types[58]
#define SWIGTYPE_p_PhysicsContext swig_types[59]
#define SWIGTYPE_p_PostProcessor swig_types[60]
#define SWIGTYPE_p_Renderer swig_types[61]
#define SWIGTYPE_p_RendererManager swig_types[62]
#define SWIGTYPE_p_RenderingContext swig_types[63]
#define SWIGTYPE_p_ScriptContext swig_types[64]
#define SWIGTYPE_p_SkinData swig_types[65]
#define SWIGTYPE_p_Skybox swig_types[66]
#define SWIGTYPE_p_SoundContext swig_types[67]
#define SWIGTYPE_p_String swig_types[68]
#define SWIGTYPE_p_SystemContext swig_types[69]
#define SWIGTYPE_p_TEX_COMBINE_MODES swig_types[70]
#define SWIGTYPE_p_TEX_GEN_MODES swig_types[71]
#define SWIGTYPE_p_Texture swig_types[72]
#define SWIGTYPE_p_TexturesAnim swig_types[73]
#define SWIGTYPE_p_VAR_TYPES swig_types[74]
#define SWIGTYPE_p_Vector3 swig_types[75]
#define SWIGTYPE_p_Vector4 swig_types[76]
#define SWIGTYPE_p_WRAP_MODES swig_types[77]
#define SWIGTYPE_p_float swig_types[78]
#define SWIGTYPE_p_int swig_types[79]
#define SWIGTYPE_p_mapT_unsigned_int_unsigned_int_t swig_types[80]
#define SWIGTYPE_p_unsigned_int swig_types[81]
#define SWIGTYPE_p_vectorT_float_t swig_types[82]
#define SWIGTYPE_p_void swig_types[83]
static swig_type_info *swig_types[85];
static swig_module_info swig_module = {swig_types, 84, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "NeoEngine"
#define SWIG_init      luaopen_NeoEngine
#define SWIG_init_user luaopen_NeoEngine_user

#define SWIG_LUACODE   luaopen_NeoEngine_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


	#include <NeoEngine.h>
	using namespace Neo;


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_Vector2_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector2::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::x",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_x_set",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::x",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_x_get",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector2::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::y",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_y_set",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::y",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_y_get",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",0,0)
  result = (Neo::Vector2 *)new Neo::Vector2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::Vector2",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (Neo::Vector2 *)new Neo::Vector2(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (Neo::Vector2 *)new Neo::Vector2(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Vector2 *)new Neo::Vector2((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (Neo::Vector2 *)new Neo::Vector2((Neo::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Vector3 *arg1 = 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vector3,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Vector3);
  }
  
  result = (Neo::Vector2 *)new Neo::Vector2((Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector2__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::Vector2()\n"
    "    Neo::Vector2::Vector2(float,float)\n"
    "    Neo::Vector2::Vector2(float const)\n"
    "    Neo::Vector2::Vector2(float const *)\n"
    "    Neo::Vector2::Vector2(Neo::Vector2 const &)\n"
    "    Neo::Vector2::Vector2(Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator +",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator +",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator +(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator -",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator -",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator -(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator +",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator +",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator +((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator -",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator -",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator -((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___sub__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator -(float const) const\n"
    "    Neo::Vector2::operator -(Neo::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator *",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator *(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator *",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator *",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator *((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator *(float const) const\n"
    "    Neo::Vector2::operator *(Neo::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator /",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator /",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator /((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator /",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator /(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator /(Neo::Vector2 const &) const\n"
    "    Neo::Vector2::operator /(float const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator ==",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator ==",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)((Neo::Vector2 const *)arg1)->operator ==((Neo::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator -",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___unm",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator -();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator +",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator +();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector2___add__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator +(float const) const\n"
    "    Neo::Vector2::operator +(Neo::Vector2 const &) const\n"
    "    Neo::Vector2::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Vector2::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::set",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector2::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_set",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector2::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::loadIdentity",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_loadIdentity",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_normalize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector2::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::normalize",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_normalize",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_rotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector2::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::rotate",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::rotate",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_rotate",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->rotate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getNormalized(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getNormalized",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getNormalized",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->getNormalized();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getRotated(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::getRotated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getRotated",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::getRotated",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getRotated",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->getRotated(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getAngleBetween(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::getAngleBetween",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getAngleBetween",1,"Neo::Vector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::getAngleBetween",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getAngleBetween",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getAngleBetween",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)(arg1)->getAngleBetween((Neo::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getLength",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getLength",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)((Neo::Vector2 const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getSquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::getSquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getSquaredLength",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getSquaredLength",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)((Neo::Vector2 const *)arg1)->getSquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_dotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::dotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::dotProduct",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::dotProduct",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_dotProduct",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_dotProduct",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)((Neo::Vector2 const *)arg1)->dotProduct((Neo::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_lerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::lerp",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::lerp",2,"Neo::Vector2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector2::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_lerp",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_lerp",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ((Neo::Vector2 const *)arg1)->lerp((Neo::Vector2 const &)*arg2,arg3);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2(void *obj) {
Neo::Vector2 *arg1 = (Neo::Vector2 *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Vector2_methods[] = {
    {"__sub", _wrap_Vector2___sub}, 
    {"__mul", _wrap_Vector2___mul}, 
    {"__div", _wrap_Vector2___div}, 
    {"__eq", _wrap_Vector2___eq}, 
    {"__unm", _wrap_Vector2___unm}, 
    {"__add", _wrap_Vector2___add}, 
    {"set", _wrap_Vector2_set}, 
    {"loadIdentity", _wrap_Vector2_loadIdentity}, 
    {"normalize", _wrap_Vector2_normalize}, 
    {"rotate", _wrap_Vector2_rotate}, 
    {"getNormalized", _wrap_Vector2_getNormalized}, 
    {"getRotated", _wrap_Vector2_getRotated}, 
    {"getAngleBetween", _wrap_Vector2_getAngleBetween}, 
    {"getLength", _wrap_Vector2_getLength}, 
    {"getSquaredLength", _wrap_Vector2_getSquaredLength}, 
    {"dotProduct", _wrap_Vector2_dotProduct}, 
    {"lerp", _wrap_Vector2_lerp}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Vector2_attributes[] = {
    { "x", _wrap_Vector2_x_get, _wrap_Vector2_x_set},
    { "y", _wrap_Vector2_y_get, _wrap_Vector2_y_set},
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Vector2_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Vector2_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Vector2_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Vector2_bases[] = {0};
static const char *swig_Neo_Vector2_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Vector2 = { "Vector2", &SWIGTYPE_p_Neo__Vector2,_wrap_new_Vector2, swig_delete_Vector2, swig_Neo_Vector2_methods, swig_Neo_Vector2_attributes, { "Vector2", swig_Neo_Vector2_cls_methods, swig_Neo_Vector2_cls_attributes, swig_Neo_Vector2_cls_constants }, swig_Neo_Vector2_bases, swig_Neo_Vector2_base_names };

static int _wrap_Vector3_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::x",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::x",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_get",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::y",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::y",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_get",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::z",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::z",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_get",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",0,0)
  result = (Neo::Vector3 *)new Neo::Vector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::Vector3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector3::Vector3",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Neo::Vector3 *)new Neo::Vector3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (Neo::Vector3 *)new Neo::Vector3(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Vector4 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vector4,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Vector4);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((Vector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::Vector3()\n"
    "    Neo::Vector3::Vector3(float,float,float)\n"
    "    Neo::Vector3::Vector3(float const)\n"
    "    Neo::Vector3::Vector3(float const *)\n"
    "    Neo::Vector3::Vector3(Neo::Vector3 const &)\n"
    "    Neo::Vector3::Vector3(Vector4 const &)\n"
    "    Neo::Vector3::Vector3(Neo::Vector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator +",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator +",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator +((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator -",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator -",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator -((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator +",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator +",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((Neo::Vector3 const *)arg1)->operator +((float const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator -",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator -",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((Neo::Vector3 const *)arg1)->operator -((float const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator -(Neo::Vector3 const &) const\n"
    "    Neo::Vector3::operator -(float const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator *",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->operator *(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator *",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator *",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator *((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator *(float const) const\n"
    "    Neo::Vector3::operator *(Neo::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator /",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator /",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator /((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator /",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->operator /(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator /(Neo::Vector3 const &) const\n"
    "    Neo::Vector3::operator /(float const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator ==",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator ==",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)((Neo::Vector3 const *)arg1)->operator ==((Neo::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator -",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___unm",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator -();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator +",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator +();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector3___add__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator +(Neo::Vector3 const &) const\n"
    "    Neo::Vector3::operator +(float const &) const\n"
    "    Neo::Vector3::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Vector3::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::set",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::set",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector3::set",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Vector3::set",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector3::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::loadIdentity",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_loadIdentity",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_crossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::crossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::crossProduct",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::crossProduct",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_crossProduct",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_crossProduct",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->crossProduct((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_dotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::dotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::dotProduct",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::dotProduct",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_dotProduct",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_dotProduct",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float)((Neo::Vector3 const *)arg1)->dotProduct((Neo::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_normalize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector3::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::normalize",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_normalize",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getNormalized(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getNormalized",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getNormalized",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->getNormalized();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getLength",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getLength",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float)((Neo::Vector3 const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getSquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::getSquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getSquaredLength",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getSquaredLength",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float)((Neo::Vector3 const *)arg1)->getSquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateX",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateX",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateX",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotateX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateY(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateY",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateY",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateY",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotateY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateZ(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateZ",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateZ",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateZ",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotateZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateAxis",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateAxis",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Vector3::rotateAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateAxis",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->rotateAxis(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedX",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedX",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedX",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->getRotatedX(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedY(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedY",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedY",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedY",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->getRotatedY(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedZ(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedZ",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedZ",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedZ",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->getRotatedZ(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedAxis",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedAxis",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Vector3::getRotatedAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedAxis",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->getRotatedAxis(arg2,(Neo::Vector3 const &)*arg3);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_lerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::lerp",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::lerp",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector3::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_lerp",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_lerp",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ((Neo::Vector3 const *)arg1)->lerp((Neo::Vector3 const &)*arg2,arg3);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
Neo::Vector3 *arg1 = (Neo::Vector3 *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Vector3_methods[] = {
    {"__sub", _wrap_Vector3___sub}, 
    {"__mul", _wrap_Vector3___mul}, 
    {"__div", _wrap_Vector3___div}, 
    {"__eq", _wrap_Vector3___eq}, 
    {"__unm", _wrap_Vector3___unm}, 
    {"__add", _wrap_Vector3___add}, 
    {"set", _wrap_Vector3_set}, 
    {"loadIdentity", _wrap_Vector3_loadIdentity}, 
    {"crossProduct", _wrap_Vector3_crossProduct}, 
    {"dotProduct", _wrap_Vector3_dotProduct}, 
    {"normalize", _wrap_Vector3_normalize}, 
    {"getNormalized", _wrap_Vector3_getNormalized}, 
    {"getLength", _wrap_Vector3_getLength}, 
    {"getSquaredLength", _wrap_Vector3_getSquaredLength}, 
    {"rotateX", _wrap_Vector3_rotateX}, 
    {"rotateY", _wrap_Vector3_rotateY}, 
    {"rotateZ", _wrap_Vector3_rotateZ}, 
    {"rotateAxis", _wrap_Vector3_rotateAxis}, 
    {"getRotatedX", _wrap_Vector3_getRotatedX}, 
    {"getRotatedY", _wrap_Vector3_getRotatedY}, 
    {"getRotatedZ", _wrap_Vector3_getRotatedZ}, 
    {"getRotatedAxis", _wrap_Vector3_getRotatedAxis}, 
    {"lerp", _wrap_Vector3_lerp}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Vector3_attributes[] = {
    { "x", _wrap_Vector3_x_get, _wrap_Vector3_x_set},
    { "y", _wrap_Vector3_y_get, _wrap_Vector3_y_set},
    { "z", _wrap_Vector3_z_get, _wrap_Vector3_z_set},
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Vector3_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Vector3_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Vector3_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Vector3_bases[] = {0};
static const char *swig_Neo_Vector3_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Vector3 = { "Vector3", &SWIGTYPE_p_Neo__Vector3,_wrap_new_Vector3, swig_delete_Vector3, swig_Neo_Vector3_methods, swig_Neo_Vector3_attributes, { "Vector3", swig_Neo_Vector3_cls_methods, swig_Neo_Vector3_cls_attributes, swig_Neo_Vector3_cls_constants }, swig_Neo_Vector3_bases, swig_Neo_Vector3_base_names };

static int _wrap_Vector4_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::x",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_x_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::x",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_x_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::y",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_y_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::y",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_y_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_z_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::z",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_z_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_z_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::z",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_z_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_w_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::w",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::w",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_w_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_w_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::w",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_w_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",0,0)
  result = (Neo::Vector4 *)new Neo::Vector4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::Vector4",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector4::Vector4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Vector4::Vector4",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (Neo::Vector4 *)new Neo::Vector4(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (Neo::Vector4 *)new Neo::Vector4(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Vector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Color *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Color,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_Color);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((Color const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector4__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_2(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Vector4__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector4::Vector4()\n"
    "    Neo::Vector4::Vector4(float,float,float,float)\n"
    "    Neo::Vector4::Vector4(float const)\n"
    "    Neo::Vector4::Vector4(float const *)\n"
    "    Neo::Vector4::Vector4(Neo::Vector4 const &)\n"
    "    Neo::Vector4::Vector4(Neo::Vector3 const &)\n"
    "    Neo::Vector4::Vector4(Color const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector4___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator +",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::operator +",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___add",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___add",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator +((Neo::Vector4 const &)*arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___sub(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator -",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::operator -",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___sub",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___sub",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator -((Neo::Vector4 const &)*arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___mul(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator *",1,"Neo::Vector4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___mul",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector4 const *)arg1)->operator *(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___div(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator /",1,"Neo::Vector4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___div",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector4 const *)arg1)->operator /(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector4::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator ==",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::operator ==",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___eq",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___eq",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (bool)((Neo::Vector4 const *)arg1)->operator ==((Neo::Vector4 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator -",1,"Neo::Vector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___unm",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator -();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator +",1,"Neo::Vector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___add",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator +();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector4___add__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector4___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector4___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector4::operator +(Neo::Vector4 const &) const\n"
    "    Neo::Vector4::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector4_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("Neo::Vector4::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::set",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector4::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Vector4::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Vector4::set",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector4::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::loadIdentity",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_loadIdentity",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_dotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::dotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::dotProduct",1,"Neo::Vector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::dotProduct",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_dotProduct",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_dotProduct",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float)(arg1)->dotProduct((Neo::Vector4 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_lerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::lerp",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::lerp",2,"Neo::Vector4 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector4::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_lerp",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_lerp",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ((Neo::Vector4 const *)arg1)->lerp((Neo::Vector4 const &)*arg2,arg3);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector4(void *obj) {
Neo::Vector4 *arg1 = (Neo::Vector4 *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Vector4_methods[] = {
    {"__sub", _wrap_Vector4___sub}, 
    {"__mul", _wrap_Vector4___mul}, 
    {"__div", _wrap_Vector4___div}, 
    {"__eq", _wrap_Vector4___eq}, 
    {"__unm", _wrap_Vector4___unm}, 
    {"__add", _wrap_Vector4___add}, 
    {"set", _wrap_Vector4_set}, 
    {"loadIdentity", _wrap_Vector4_loadIdentity}, 
    {"dotProduct", _wrap_Vector4_dotProduct}, 
    {"lerp", _wrap_Vector4_lerp}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Vector4_attributes[] = {
    { "x", _wrap_Vector4_x_get, _wrap_Vector4_x_set},
    { "y", _wrap_Vector4_y_get, _wrap_Vector4_y_set},
    { "z", _wrap_Vector4_z_get, _wrap_Vector4_z_set},
    { "w", _wrap_Vector4_w_get, _wrap_Vector4_w_set},
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Vector4_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Vector4_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Vector4_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Vector4_bases[] = {0};
static const char *swig_Neo_Vector4_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Vector4 = { "Vector4", &SWIGTYPE_p_Neo__Vector4,_wrap_new_Vector4, swig_delete_Vector4, swig_Neo_Vector4_methods, swig_Neo_Vector4_attributes, { "Vector4", swig_Neo_Vector4_cls_methods, swig_Neo_Vector4_cls_attributes, swig_Neo_Vector4_cls_constants }, swig_Neo_Vector4_bases, swig_Neo_Vector4_base_names };

static int _wrap_Color_r_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::r",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::r",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_r_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_r_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::r",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_r_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::g",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::g",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_g_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::g",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_g_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_b_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::b",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::b",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_b_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_b_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::b",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_b_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_a_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::a",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::a",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_a_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_a_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::a",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_a_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",0,0)
  result = (Neo::Color *)new Neo::Color();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"unsigned char");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::Color",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Color::Color",3,"unsigned char");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Color::Color",4,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  result = (Neo::Color *)new Neo::Color(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (Neo::Color *)new Neo::Color((Neo::Color const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Color *)new Neo::Color((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (Neo::Color *)new Neo::Color((Neo::Vector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_4(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Color__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Color'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Color::Color()\n"
    "    Neo::Color::Color(unsigned char,unsigned char,unsigned char,unsigned char)\n"
    "    Neo::Color::Color(Neo::Color const &)\n"
    "    Neo::Color::Color(Neo::Vector3 const &)\n"
    "    Neo::Color::Color(Neo::Vector4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  Neo::Color *arg2 = 0 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator +",1,"Neo::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Color::operator +",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___add",1,SWIGTYPE_p_Neo__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___add",2,SWIGTYPE_p_Neo__Color);
  }
  
  result = ((Neo::Color const *)arg1)->operator +((Neo::Color const &)*arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  Neo::Color *arg2 = 0 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator -",1,"Neo::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Color::operator -",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___sub",1,SWIGTYPE_p_Neo__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___sub",2,SWIGTYPE_p_Neo__Color);
  }
  
  result = ((Neo::Color const *)arg1)->operator -((Neo::Color const &)*arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  int arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator +",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator +",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___add",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator +(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Color::operator +(Neo::Color const &) const\n"
    "    Neo::Color::operator +(int const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Color___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  int arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator -",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator -",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___sub",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator -(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Color::operator -(Neo::Color const &) const\n"
    "    Neo::Color::operator -(int const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Color___mul(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  float arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator *",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___mul",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator *(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___div(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  float arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator /",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___div",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator /(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  Neo::Color *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Color::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator ==",1,"Neo::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Color::operator ==",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___eq",1,SWIGTYPE_p_Neo__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___eq",2,SWIGTYPE_p_Neo__Color);
  }
  
  result = (bool)((Neo::Color const *)arg1)->operator ==((Neo::Color const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  
  SWIG_check_num_args("Neo::Color::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::set",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::set",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Color::set",3,"unsigned char");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Color::set",4,"unsigned char");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Color::set",5,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned char)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color(void *obj) {
Neo::Color *arg1 = (Neo::Color *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Color_methods[] = {
    {"__add", _wrap_Color___add}, 
    {"__sub", _wrap_Color___sub}, 
    {"__mul", _wrap_Color___mul}, 
    {"__div", _wrap_Color___div}, 
    {"__eq", _wrap_Color___eq}, 
    {"set", _wrap_Color_set}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Color_attributes[] = {
    { "r", _wrap_Color_r_get, _wrap_Color_r_set},
    { "g", _wrap_Color_g_get, _wrap_Color_g_set},
    { "b", _wrap_Color_b_get, _wrap_Color_b_set},
    { "a", _wrap_Color_a_get, _wrap_Color_a_set},
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Color_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Color_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Color_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Color_bases[] = {0};
static const char *swig_Neo_Color_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Color = { "Color", &SWIGTYPE_p_Neo__Color,_wrap_new_Color, swig_delete_Color, swig_Neo_Color_methods, swig_Neo_Color_attributes, { "Color", swig_Neo_Color_cls_methods, swig_Neo_Color_cls_attributes, swig_Neo_Color_cls_constants }, swig_Neo_Color_bases, swig_Neo_Color_base_names };

static int _wrap_Matrix4x4_entries_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::entries",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::entries",1,"Neo::Matrix4x4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Matrix4x4::entries",2,"float [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_entries_set",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrix4x4_entries_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->entries;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_entries_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::entries",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_entries_get",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = (float *)(float *) ((arg1)->entries);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",0,0)
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",16,16)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",12,"float");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",13,"float");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",14,"float");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",15,"float");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",16,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11);
  arg12 = (float)lua_tonumber(L, 12);
  arg13 = (float)lua_tonumber(L, 13);
  arg14 = (float)lua_tonumber(L, 14);
  arg15 = (float)lua_tonumber(L, 15);
  arg16 = (float)lua_tonumber(L, 16);
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Matrix4x4",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",1,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("new_Matrix4x4",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4((Neo::Matrix4x4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4(lua_State* L) {
  int argc;
  int argv[17]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Matrix4x4__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix4x4__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix4x4__SWIG_3(L);
    }
  }
  if (argc == 16) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isnumber(L,argv[15]);
                                  }
                                  if (_v) {
                                    return _wrap_new_Matrix4x4__SWIG_1(L);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Matrix4x4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::Matrix4x4()\n"
    "    Neo::Matrix4x4::Matrix4x4(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)\n"
    "    Neo::Matrix4x4::Matrix4x4(float const *)\n"
    "    Neo::Matrix4x4::Matrix4x4(Neo::Matrix4x4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator +",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator +",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___add",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___add",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator +((Neo::Matrix4x4 const &)*arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___sub(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator -",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator -",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___sub",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___sub",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator -((Neo::Matrix4x4 const &)*arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator *((Neo::Matrix4x4 const &)*arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->operator *(arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___div(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator /",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___div",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->operator /(arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator ==",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator ==",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___eq",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___eq",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = (bool)((Neo::Matrix4x4 const *)arg1)->operator ==((Neo::Matrix4x4 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator -",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___unm",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator -();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator +",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___add",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator +();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix4x4___add__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::operator +(Neo::Matrix4x4 const &) const\n"
    "    Neo::Matrix4x4::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"Neo::Vector4 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_Neo__Vector4);
  }
  arg2 = *argp2;
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator *(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator *(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::operator *(Neo::Matrix4x4 const &) const\n"
    "    Neo::Matrix4x4::operator *(float const) const\n"
    "    Neo::Matrix4x4::operator *(Neo::Vector4 const) const\n"
    "    Neo::Matrix4x4::operator *(Neo::Vector3 const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4___call(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  int arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator ()",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___call",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::loadIdentity",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_loadIdentity",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_loadZero(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::loadZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::loadZero",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_loadZero",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->loadZero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_invert(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::invert",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_invert",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_transpose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::transpose",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_transpose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->transpose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_affineInvert(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::affineInvert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::affineInvert",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_affineInvert",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->affineInvert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_invertTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::invertTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::invertTranspose",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_invertTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->invertTranspose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_affineInvertTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::affineInvertTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::affineInvertTranspose",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_affineInvertTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->affineInvertTranspose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_scale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::scale",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::scale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_scale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_scale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->scale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_rotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::rotate",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::rotate",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::rotate",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_rotate",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_rotate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_translate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::translate",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::translate",2,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_translate",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_translate",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->translate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setEntry",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setEntry",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setEntry",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setEntry",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setEntry",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setEntry(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setScale",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setScale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setScale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setScale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setScale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setUniformScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setUniformScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setUniformScale",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setUniformScale",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setUniformScale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setUniformScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setTranslation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setTranslation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setTranslation",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setTranslation",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslation",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslation",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setTranslation((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setTranslationPart(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setTranslationPart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setTranslationPart",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setTranslationPart",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslationPart",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslationPart",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setTranslationPart((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationAxis",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationAxis",2,"float const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setRotationAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationAxis",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setRotationAxis(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationX",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationX",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationX",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setRotationX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationY(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationY",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationY",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationY",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setRotationY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationZ(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationZ",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationZ",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationZ",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setRotationZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationEuler(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationEuler",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationEuler",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setRotationEuler(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationPartEuler__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationPartEuler",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationPartEuler",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setRotationPartEuler(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationPartEuler__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationPartEuler",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationPartEuler",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationPartEuler",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setRotationPartEuler((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationPartEuler(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4_setRotationPartEuler__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix4x4_setRotationPartEuler__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_setRotationPartEuler'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::setRotationPartEuler(float const,float const,float const)\n"
    "    Neo::Matrix4x4::setRotationPartEuler(Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4_getEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getEntry",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getEntry",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getEntry",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)((Neo::Matrix4x4 const *)arg1)->getEntry(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getRotatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getRotatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getRotatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getRotatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getRotatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getRotatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getRotatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInverseRotatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInverseRotatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInverseRotatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getInverseRotatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInverseRotatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getInverseRotatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInverseRotatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getTranslatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getTranslatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getTranslatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getTranslatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getTranslatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInversetranslatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInversetranslatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInversetranslatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getInversetranslatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInversetranslatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getInversetranslatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInversetranslatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getTranslationPart(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getTranslationPart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getTranslationPart",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslationPart",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getTranslationPart();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getEulerAngles(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getEulerAngles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getEulerAngles",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getEulerAngles",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getEulerAngles();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getScale",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getScale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getScale();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getRow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getRow",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getRow",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getRow",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->getRow(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getColumn(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getColumn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getColumn",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getColumn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getColumn",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->getColumn(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInverse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInverse",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInverse",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInverse();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getTranspose",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getTranspose();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInversetranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInversetranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInversetranspose",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInversetranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInversetranspose();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getAffineInverse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getAffineInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getAffineInverse",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getAffineInverse",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getAffineInverse();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getAffineInverseTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getAffineInverseTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getAffineInverseTranspose",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getAffineInverseTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getAffineInverseTranspose();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_rotateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::rotateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::rotateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::rotateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_rotateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_rotateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->rotateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_inverseRotateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::inverseRotateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::inverseRotateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::inverseRotateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_inverseRotateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_inverseRotateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->inverseRotateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_translateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::translateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::translateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::translateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_translateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_translateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->translateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_inversetranslateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::inversetranslateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::inversetranslateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::inversetranslateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_inversetranslateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_inversetranslateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->inversetranslateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Matrix4x4(void *obj) {
Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Matrix4x4_methods[] = {
    {"__sub", _wrap_Matrix4x4___sub}, 
    {"__div", _wrap_Matrix4x4___div}, 
    {"__eq", _wrap_Matrix4x4___eq}, 
    {"__unm", _wrap_Matrix4x4___unm}, 
    {"__add", _wrap_Matrix4x4___add}, 
    {"__mul", _wrap_Matrix4x4___mul}, 
    {"__call", _wrap_Matrix4x4___call}, 
    {"loadIdentity", _wrap_Matrix4x4_loadIdentity}, 
    {"loadZero", _wrap_Matrix4x4_loadZero}, 
    {"invert", _wrap_Matrix4x4_invert}, 
    {"transpose", _wrap_Matrix4x4_transpose}, 
    {"affineInvert", _wrap_Matrix4x4_affineInvert}, 
    {"invertTranspose", _wrap_Matrix4x4_invertTranspose}, 
    {"affineInvertTranspose", _wrap_Matrix4x4_affineInvertTranspose}, 
    {"scale", _wrap_Matrix4x4_scale}, 
    {"rotate", _wrap_Matrix4x4_rotate}, 
    {"translate", _wrap_Matrix4x4_translate}, 
    {"setEntry", _wrap_Matrix4x4_setEntry}, 
    {"setScale", _wrap_Matrix4x4_setScale}, 
    {"setUniformScale", _wrap_Matrix4x4_setUniformScale}, 
    {"setTranslation", _wrap_Matrix4x4_setTranslation}, 
    {"setTranslationPart", _wrap_Matrix4x4_setTranslationPart}, 
    {"setRotationAxis", _wrap_Matrix4x4_setRotationAxis}, 
    {"setRotationX", _wrap_Matrix4x4_setRotationX}, 
    {"setRotationY", _wrap_Matrix4x4_setRotationY}, 
    {"setRotationZ", _wrap_Matrix4x4_setRotationZ}, 
    {"setRotationEuler", _wrap_Matrix4x4_setRotationEuler}, 
    {"setRotationPartEuler", _wrap_Matrix4x4_setRotationPartEuler}, 
    {"getEntry", _wrap_Matrix4x4_getEntry}, 
    {"getRotatedVector3", _wrap_Matrix4x4_getRotatedVector3}, 
    {"getInverseRotatedVector3", _wrap_Matrix4x4_getInverseRotatedVector3}, 
    {"getTranslatedVector3", _wrap_Matrix4x4_getTranslatedVector3}, 
    {"getInversetranslatedVector3", _wrap_Matrix4x4_getInversetranslatedVector3}, 
    {"getTranslationPart", _wrap_Matrix4x4_getTranslationPart}, 
    {"getEulerAngles", _wrap_Matrix4x4_getEulerAngles}, 
    {"getScale", _wrap_Matrix4x4_getScale}, 
    {"getRow", _wrap_Matrix4x4_getRow}, 
    {"getColumn", _wrap_Matrix4x4_getColumn}, 
    {"getInverse", _wrap_Matrix4x4_getInverse}, 
    {"getTranspose", _wrap_Matrix4x4_getTranspose}, 
    {"getInversetranspose", _wrap_Matrix4x4_getInversetranspose}, 
    {"getAffineInverse", _wrap_Matrix4x4_getAffineInverse}, 
    {"getAffineInverseTranspose", _wrap_Matrix4x4_getAffineInverseTranspose}, 
    {"rotateVector3", _wrap_Matrix4x4_rotateVector3}, 
    {"inverseRotateVector3", _wrap_Matrix4x4_inverseRotateVector3}, 
    {"translateVector3", _wrap_Matrix4x4_translateVector3}, 
    {"inversetranslateVector3", _wrap_Matrix4x4_inversetranslateVector3}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Matrix4x4_attributes[] = {
    { "entries", _wrap_Matrix4x4_entries_get, _wrap_Matrix4x4_entries_set},
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Matrix4x4_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Matrix4x4_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Matrix4x4_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Matrix4x4_bases[] = {0};
static const char *swig_Neo_Matrix4x4_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Matrix4x4 = { "Matrix4x4", &SWIGTYPE_p_Neo__Matrix4x4,_wrap_new_Matrix4x4, swig_delete_Matrix4x4, swig_Neo_Matrix4x4_methods, swig_Neo_Matrix4x4_attributes, { "Matrix4x4", swig_Neo_Matrix4x4_cls_methods, swig_Neo_Matrix4x4_cls_attributes, swig_Neo_Matrix4x4_cls_constants }, swig_Neo_Matrix4x4_bases, swig_Neo_Matrix4x4_base_names };

static int _wrap_Quaternion_values_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("Neo::Quaternion::values",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::values",1,"Neo::Quaternion *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Quaternion::values",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_values_set",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_values_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->values;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_values_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::values",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_values_get",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (float *)(float *) ((arg1)->values);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",0,0)
  result = (Neo::Quaternion *)new Neo::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::Quaternion",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Quaternion::Quaternion",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"Neo::Vector3 const &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,(Neo::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::Quaternion",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = 0 ;
  Neo::Quaternion arg2 ;
  float arg3 ;
  Neo::Quaternion *argp2 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"Neo::Quaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"Neo::Quaternion");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::Quaternion",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Neo__Quaternion);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (Neo::Quaternion *)new Neo::Quaternion((Neo::Quaternion const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Quaternion::Quaternion()\n"
    "    Neo::Quaternion::Quaternion(float,float,float,float)\n"
    "    Neo::Quaternion::Quaternion(float,Neo::Vector3 const &)\n"
    "    Neo::Quaternion::Quaternion(float,float,float)\n"
    "    Neo::Quaternion::Quaternion(Neo::Quaternion const &,Neo::Quaternion,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___mul(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  Neo::Quaternion result;
  
  SWIG_check_num_args("Neo::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::operator *",1,"Neo::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::operator *",2,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->operator *((Neo::Quaternion const &)*arg2);
  {
    Neo::Quaternion * resultptr = new Neo::Quaternion((const Neo::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion result;
  
  SWIG_check_num_args("Neo::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::operator -",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___unm",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->operator -();
  {
    Neo::Quaternion * resultptr = new Neo::Quaternion((const Neo::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::operator ==",1,"Neo::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::operator ==",2,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (bool)((Neo::Quaternion const *)arg1)->operator ==((Neo::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_normalize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::normalize",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_normalize",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::loadIdentity",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_loadIdentity",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setFromAngles(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Quaternion::setFromAngles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",1,"Neo::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setFromAngles",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setFromAngles(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_slerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  Neo::Quaternion *arg3 = 0 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Quaternion::slerp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::slerp",1,"Neo::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::slerp",2,"Neo::Quaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Quaternion::slerp",3,"Neo::Quaternion const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Quaternion::slerp",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",3,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->slerp((Neo::Quaternion const &)*arg2,(Neo::Quaternion const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_invert(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::invert",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_invert",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setFromAngleAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::setFromAngleAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::setFromAngleAxis",1,"Neo::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::setFromAngleAxis",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Quaternion::setFromAngleAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setFromAngleAxis",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setFromAngleAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setFromAngleAxis(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setFromVectors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::setFromVectors",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::setFromVectors",1,"Neo::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::setFromVectors",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Quaternion::setFromVectors",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setFromVectors",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setFromVectors",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setFromVectors",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setFromVectors((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getEulerAngles(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Quaternion::getEulerAngles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::getEulerAngles",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getEulerAngles",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->getEulerAngles();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Quaternion::getAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::getAngle",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getAngle",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (float)((Neo::Quaternion const *)arg1)->getAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Quaternion::getAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::getAxis",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getAxis",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->getAxis();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
Neo::Quaternion *arg1 = (Neo::Quaternion *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Quaternion_methods[] = {
    {"__mul", _wrap_Quaternion___mul}, 
    {"__unm", _wrap_Quaternion___unm}, 
    {"__eq", _wrap_Quaternion___eq}, 
    {"normalize", _wrap_Quaternion_normalize}, 
    {"loadIdentity", _wrap_Quaternion_loadIdentity}, 
    {"setFromAngles", _wrap_Quaternion_setFromAngles}, 
    {"slerp", _wrap_Quaternion_slerp}, 
    {"invert", _wrap_Quaternion_invert}, 
    {"setFromAngleAxis", _wrap_Quaternion_setFromAngleAxis}, 
    {"setFromVectors", _wrap_Quaternion_setFromVectors}, 
    {"getEulerAngles", _wrap_Quaternion_getEulerAngles}, 
    {"getAngle", _wrap_Quaternion_getAngle}, 
    {"getAxis", _wrap_Quaternion_getAxis}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Quaternion_attributes[] = {
    { "values", _wrap_Quaternion_values_get, _wrap_Quaternion_values_set},
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Quaternion_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Quaternion_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Quaternion_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Quaternion_bases[] = {0};
static const char *swig_Neo_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Quaternion = { "Quaternion", &SWIGTYPE_p_Neo__Quaternion,_wrap_new_Quaternion, swig_delete_Quaternion, swig_Neo_Quaternion_methods, swig_Neo_Quaternion_attributes, { "Quaternion", swig_Neo_Quaternion_cls_methods, swig_Neo_Quaternion_cls_attributes, swig_Neo_Quaternion_cls_constants }, swig_Neo_Quaternion_bases, swig_Neo_Quaternion_base_names };

static int _wrap_new_NeoEngine(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::NeoEngine",0,0)
  result = (Neo::NeoEngine *)new Neo::NeoEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getInstance",0,0)
  result = (Neo::NeoEngine *)Neo::NeoEngine::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setActive",1,"Neo::NeoEngine *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::NeoEngine::setActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setActive",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setActive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_isActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoEngine::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::isActive",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_isActive",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (bool)(arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setSoundContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  SoundContext *arg2 = (SoundContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setSoundContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setSoundContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setSoundContext",2,"SoundContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setSoundContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundContext,0))){
    SWIG_fail_ptr("NeoEngine_setSoundContext",2,SWIGTYPE_p_SoundContext);
  }
  
  (arg1)->setSoundContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setRenderingContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  RenderingContext *arg2 = (RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setRenderingContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setRenderingContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setRenderingContext",2,"RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setRenderingContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RenderingContext,0))){
    SWIG_fail_ptr("NeoEngine_setRenderingContext",2,SWIGTYPE_p_RenderingContext);
  }
  
  (arg1)->setRenderingContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setPhysicsContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  PhysicsContext *arg2 = (PhysicsContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setPhysicsContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setPhysicsContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setPhysicsContext",2,"PhysicsContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setPhysicsContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PhysicsContext,0))){
    SWIG_fail_ptr("NeoEngine_setPhysicsContext",2,SWIGTYPE_p_PhysicsContext);
  }
  
  (arg1)->setPhysicsContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setScriptContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  ScriptContext *arg2 = (ScriptContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setScriptContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setScriptContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setScriptContext",2,"ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setScriptContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ScriptContext,0))){
    SWIG_fail_ptr("NeoEngine_setScriptContext",2,SWIGTYPE_p_ScriptContext);
  }
  
  (arg1)->setScriptContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setInputContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  InputContext *arg2 = (InputContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setInputContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setInputContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setInputContext",2,"InputContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setInputContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_InputContext,0))){
    SWIG_fail_ptr("NeoEngine_setInputContext",2,SWIGTYPE_p_InputContext);
  }
  
  (arg1)->setInputContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setSystemContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  SystemContext *arg2 = (SystemContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setSystemContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setSystemContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setSystemContext",2,"SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setSystemContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SystemContext,0))){
    SWIG_fail_ptr("NeoEngine_setSystemContext",2,SWIGTYPE_p_SystemContext);
  }
  
  (arg1)->setSystemContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getSoundContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  SoundContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getSoundContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getSoundContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getSoundContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (SoundContext *)(arg1)->getSoundContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getRenderingContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  RenderingContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getRenderingContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getRenderingContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getRenderingContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (RenderingContext *)(arg1)->getRenderingContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RenderingContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getPhysicsContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  PhysicsContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getPhysicsContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getPhysicsContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getPhysicsContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (PhysicsContext *)(arg1)->getPhysicsContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PhysicsContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getScriptContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  ScriptContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getScriptContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getScriptContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getScriptContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (ScriptContext *)(arg1)->getScriptContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ScriptContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getInputContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  InputContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getInputContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getInputContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getInputContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (InputContext *)(arg1)->getInputContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_InputContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getSystemContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  SystemContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getSystemContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getSystemContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getSystemContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (SystemContext *)(arg1)->getSystemContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SystemContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getFontLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  DataLoader *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getFontLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getFontLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getFontLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (DataLoader *)(arg1)->getFontLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataLoader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getImageLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  DataLoader *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getImageLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getImageLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getImageLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (DataLoader *)(arg1)->getImageLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataLoader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getSoundLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  DataLoader *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getSoundLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getSoundLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getSoundLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (DataLoader *)(arg1)->getSoundLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataLoader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getMeshLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  DataLoader *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getMeshLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getMeshLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getMeshLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (DataLoader *)(arg1)->getMeshLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataLoader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getArmatureAnimLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  DataLoader *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getArmatureAnimLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getArmatureAnimLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getArmatureAnimLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (DataLoader *)(arg1)->getArmatureAnimLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataLoader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getTexturesAnimLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  DataLoader *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getTexturesAnimLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getTexturesAnimLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getTexturesAnimLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (DataLoader *)(arg1)->getTexturesAnimLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataLoader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getMaterialsAnimLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  DataLoader *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getMaterialsAnimLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getMaterialsAnimLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getMaterialsAnimLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (DataLoader *)(arg1)->getMaterialsAnimLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataLoader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getLevelLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  DataLoader *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getLevelLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getLevelLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getLevelLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (DataLoader *)(arg1)->getLevelLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataLoader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getBehaviorManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  BehaviorManager *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getBehaviorManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getBehaviorManager",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getBehaviorManager",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (BehaviorManager *)(arg1)->getBehaviorManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BehaviorManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getRendererManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  RendererManager *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getRendererManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getRendererManager",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getRendererManager",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (RendererManager *)(arg1)->getRendererManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RendererManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setPackageManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  PackageManager *arg2 = (PackageManager *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setPackageManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setPackageManager",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setPackageManager",2,"PackageManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setPackageManager",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PackageManager,0))){
    SWIG_fail_ptr("NeoEngine_setPackageManager",2,SWIGTYPE_p_PackageManager);
  }
  
  (arg1)->setPackageManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getPackageManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  PackageManager *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getPackageManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getPackageManager",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getPackageManager",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (PackageManager *)(arg1)->getPackageManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PackageManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_updateRequests(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::updateRequests",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::updateRequests",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_updateRequests",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  (arg1)->updateRequests();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Level *arg2 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setLevel",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setLevel",2,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setLevel",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("NeoEngine_setLevel",2,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->setLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_loadLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoEngine::loadLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::loadLevel",1,"Neo::NeoEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::NeoEngine::loadLevel",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_loadLevel",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->loadLevel((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_requestLoadLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::requestLoadLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::requestLoadLevel",1,"Neo::NeoEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::NeoEngine::requestLoadLevel",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_requestLoadLevel",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->requestLoadLevel((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_doesLevelExist(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoEngine::doesLevelExist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::doesLevelExist",1,"Neo::NeoEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::NeoEngine::doesLevelExist",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_doesLevelExist",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->doesLevelExist((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Level *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getLevel",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getLevel",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::Level *)(arg1)->getLevel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Level,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setGame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::NeoGame *arg2 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setGame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setGame",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setGame",2,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setGame",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoEngine_setGame",2,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->setGame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getGame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::NeoGame *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getGame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getGame",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getGame",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::NeoGame *)(arg1)->getGame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoGame,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setRenderer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Renderer *arg2 = (Renderer *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setRenderer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setRenderer",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setRenderer",2,"Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setRenderer",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Renderer,0))){
    SWIG_fail_ptr("NeoEngine_setRenderer",2,SWIGTYPE_p_Renderer);
  }
  
  (arg1)->setRenderer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getRenderer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Renderer *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getRenderer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getRenderer",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getRenderer",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Renderer *)(arg1)->getRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Renderer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NeoEngine(void *obj) {
Neo::NeoEngine *arg1 = (Neo::NeoEngine *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_NeoEngine_methods[] = {
    {"setActive", _wrap_NeoEngine_setActive}, 
    {"isActive", _wrap_NeoEngine_isActive}, 
    {"setSoundContext", _wrap_NeoEngine_setSoundContext}, 
    {"setRenderingContext", _wrap_NeoEngine_setRenderingContext}, 
    {"setPhysicsContext", _wrap_NeoEngine_setPhysicsContext}, 
    {"setScriptContext", _wrap_NeoEngine_setScriptContext}, 
    {"setInputContext", _wrap_NeoEngine_setInputContext}, 
    {"setSystemContext", _wrap_NeoEngine_setSystemContext}, 
    {"getSoundContext", _wrap_NeoEngine_getSoundContext}, 
    {"getRenderingContext", _wrap_NeoEngine_getRenderingContext}, 
    {"getPhysicsContext", _wrap_NeoEngine_getPhysicsContext}, 
    {"getScriptContext", _wrap_NeoEngine_getScriptContext}, 
    {"getInputContext", _wrap_NeoEngine_getInputContext}, 
    {"getSystemContext", _wrap_NeoEngine_getSystemContext}, 
    {"getFontLoader", _wrap_NeoEngine_getFontLoader}, 
    {"getImageLoader", _wrap_NeoEngine_getImageLoader}, 
    {"getSoundLoader", _wrap_NeoEngine_getSoundLoader}, 
    {"getMeshLoader", _wrap_NeoEngine_getMeshLoader}, 
    {"getArmatureAnimLoader", _wrap_NeoEngine_getArmatureAnimLoader}, 
    {"getTexturesAnimLoader", _wrap_NeoEngine_getTexturesAnimLoader}, 
    {"getMaterialsAnimLoader", _wrap_NeoEngine_getMaterialsAnimLoader}, 
    {"getLevelLoader", _wrap_NeoEngine_getLevelLoader}, 
    {"getBehaviorManager", _wrap_NeoEngine_getBehaviorManager}, 
    {"getRendererManager", _wrap_NeoEngine_getRendererManager}, 
    {"setPackageManager", _wrap_NeoEngine_setPackageManager}, 
    {"getPackageManager", _wrap_NeoEngine_getPackageManager}, 
    {"updateRequests", _wrap_NeoEngine_updateRequests}, 
    {"setLevel", _wrap_NeoEngine_setLevel}, 
    {"loadLevel", _wrap_NeoEngine_loadLevel}, 
    {"requestLoadLevel", _wrap_NeoEngine_requestLoadLevel}, 
    {"doesLevelExist", _wrap_NeoEngine_doesLevelExist}, 
    {"getLevel", _wrap_NeoEngine_getLevel}, 
    {"setGame", _wrap_NeoEngine_setGame}, 
    {"getGame", _wrap_NeoEngine_getGame}, 
    {"setRenderer", _wrap_NeoEngine_setRenderer}, 
    {"getRenderer", _wrap_NeoEngine_getRenderer}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_NeoEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_NeoEngine_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_NeoEngine_cls_methods[] = {
    {"getInstance", _wrap_NeoEngine_getInstance}, 
    {0,0}
};
static swig_lua_const_info swig_Neo_NeoEngine_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_NeoEngine_bases[] = {0};
static const char *swig_Neo_NeoEngine_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_NeoEngine = { "NeoEngine", &SWIGTYPE_p_Neo__NeoEngine,_wrap_new_NeoEngine, swig_delete_NeoEngine, swig_Neo_NeoEngine_methods, swig_Neo_NeoEngine_attributes, { "NeoEngine", swig_Neo_NeoEngine_cls_methods, swig_Neo_NeoEngine_cls_attributes, swig_Neo_NeoEngine_cls_constants }, swig_Neo_NeoEngine_bases, swig_Neo_NeoEngine_base_names };

static int _wrap_SubGame_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::SubGame::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubGame::update",1,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("SubGame_update",1,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubGame_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::SubGame::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubGame::draw",1,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("SubGame_draw",1,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubGame_onBegin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::SubGame::onBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubGame::onBegin",1,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("SubGame_onBegin",1,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->onBegin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubGame_onEnd(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::SubGame::onEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubGame::onEnd",1,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("SubGame_onEnd",1,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->onEnd();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SubGame(void *obj) {
Neo::SubGame *arg1 = (Neo::SubGame *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_SubGame_methods[] = {
    {"update", _wrap_SubGame_update}, 
    {"draw", _wrap_SubGame_draw}, 
    {"onBegin", _wrap_SubGame_onBegin}, 
    {"onEnd", _wrap_SubGame_onEnd}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_SubGame_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_SubGame_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_SubGame_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_SubGame_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_SubGame_bases[] = {0};
static const char *swig_Neo_SubGame_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_SubGame = { "SubGame", &SWIGTYPE_p_Neo__SubGame,0, swig_delete_SubGame, swig_Neo_SubGame_methods, swig_Neo_SubGame_attributes, { "SubGame", swig_Neo_SubGame_cls_methods, swig_Neo_SubGame_cls_attributes, swig_Neo_SubGame_cls_constants }, swig_Neo_SubGame_bases, swig_Neo_SubGame_base_names };

static int _wrap_new_NeoGame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::NeoGame",0,0)
  result = (Neo::NeoGame *)new Neo::NeoGame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoGame,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_isRunning(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoGame::isRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::isRunning",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_isRunning",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  result = (bool)(arg1)->isRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_hasPostEffects(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoGame::hasPostEffects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::hasPostEffects",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_hasPostEffects",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  result = (bool)(arg1)->hasPostEffects();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_enablePostEffects(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::enablePostEffects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::enablePostEffects",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_enablePostEffects",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->enablePostEffects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_disablePostEffects(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::disablePostEffects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::disablePostEffects",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_disablePostEffects",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->disablePostEffects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_getPostProcessor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  PostProcessor *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::getPostProcessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::getPostProcessor",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_getPostProcessor",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  result = (PostProcessor *)(arg1)->getPostProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PostProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_begin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::begin",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_begin",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->begin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_end(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::end",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_end",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->end();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::update",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_update",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::draw",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_draw",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onBegin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onBegin",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onBegin",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onBegin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onEnd(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onEnd",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onEnd",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onEnd();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onBeginLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onBeginLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onBeginLevel",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onBeginLevel",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onBeginLevel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onEndLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onEndLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onEndLevel",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onEndLevel",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onEndLevel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onBeginScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onBeginScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onBeginScene",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onBeginScene",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onBeginScene();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onEndScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onEndScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onEndScene",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onEndScene",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onEndScene();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_registerSubGame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  Neo::SubGame *arg2 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::registerSubGame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::registerSubGame",1,"Neo::NeoGame *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoGame::registerSubGame",2,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_registerSubGame",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("NeoGame_registerSubGame",2,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->registerSubGame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NeoGame(void *obj) {
Neo::NeoGame *arg1 = (Neo::NeoGame *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_NeoGame_methods[] = {
    {"isRunning", _wrap_NeoGame_isRunning}, 
    {"hasPostEffects", _wrap_NeoGame_hasPostEffects}, 
    {"enablePostEffects", _wrap_NeoGame_enablePostEffects}, 
    {"disablePostEffects", _wrap_NeoGame_disablePostEffects}, 
    {"getPostProcessor", _wrap_NeoGame_getPostProcessor}, 
    {"begin", _wrap_NeoGame_begin}, 
    {"end", _wrap_NeoGame_end}, 
    {"update", _wrap_NeoGame_update}, 
    {"draw", _wrap_NeoGame_draw}, 
    {"onBegin", _wrap_NeoGame_onBegin}, 
    {"onEnd", _wrap_NeoGame_onEnd}, 
    {"onBeginLevel", _wrap_NeoGame_onBeginLevel}, 
    {"onEndLevel", _wrap_NeoGame_onEndLevel}, 
    {"onBeginScene", _wrap_NeoGame_onBeginScene}, 
    {"onEndScene", _wrap_NeoGame_onEndScene}, 
    {"registerSubGame", _wrap_NeoGame_registerSubGame}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_NeoGame_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_NeoGame_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_NeoGame_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_NeoGame_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_NeoGame_bases[] = {0};
static const char *swig_Neo_NeoGame_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_NeoGame = { "NeoGame", &SWIGTYPE_p_Neo__NeoGame,_wrap_new_NeoGame, swig_delete_NeoGame, swig_Neo_NeoGame_methods, swig_Neo_NeoGame_attributes, { "NeoGame", swig_Neo_NeoGame_cls_methods, swig_Neo_NeoGame_cls_attributes, swig_Neo_NeoGame_cls_constants }, swig_Neo_NeoGame_bases, swig_Neo_NeoGame_base_names };

static int _wrap_new_Object3d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::Object3d",0,0)
  result = (Neo::Object3d *)new Neo::Object3d();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Object3d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::Object3d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Object3d::Object3d",1,"Neo::Object3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("new_Object3d",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Object3d *)new Neo::Object3d((Neo::Object3d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Object3d(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Object3d__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Object3d, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Object3d__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Object3d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Object3d::Object3d()\n"
    "    Neo::Object3d::Object3d(Neo::Object3d const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Object3d_updateMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::updateMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::updateMatrix",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_updateMatrix",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->updateMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_computeLocalMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::computeLocalMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::computeLocalMatrix",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_computeLocalMatrix",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->computeLocalMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getMatrix",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getMatrix",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Matrix4x4 *)(arg1)->getMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_unlinkChildren(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::unlinkChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::unlinkChildren",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_unlinkChildren",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->unlinkChildren();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_computeChildrenMatrices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::computeChildrenMatrices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::computeChildrenMatrices",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_computeChildrenMatrices",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->computeChildrenMatrices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  NeoVariable arg3 ;
  NeoVariable *argp3 ;
  
  SWIG_check_num_args("Neo::Object3d::setAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setAttribute",1,"Neo::Object3d *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Object3d::setAttribute",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Object3d::setAttribute",3,"NeoVariable");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setAttribute",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_NeoVariable,0))){
    SWIG_fail_ptr("Object3d_setAttribute",3,SWIGTYPE_p_NeoVariable);
  }
  arg3 = *argp3;
  
  (arg1)->setAttribute((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  NeoVariable result;
  
  SWIG_check_num_args("Neo::Object3d::getAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getAttribute",1,"Neo::Object3d *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Object3d::getAttribute",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getAttribute",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->getAttribute((char const *)arg2);
  {
    NeoVariable * resultptr = new NeoVariable((const NeoVariable &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NeoVariable,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getUniformRotatedVector(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getUniformRotatedVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getUniformRotatedVector",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getUniformRotatedVector",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getUniformRotatedVector",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getUniformRotatedVector",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (arg1)->getUniformRotatedVector((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getInverseRotatedVector(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getInverseRotatedVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getInverseRotatedVector",1,"Neo::Object3d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getInverseRotatedVector",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getInverseRotatedVector",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getInverseRotatedVector",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Object3d const *)arg1)->getInverseRotatedVector((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getRotatedVector(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getRotatedVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getRotatedVector",1,"Neo::Object3d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getRotatedVector",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getRotatedVector",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getRotatedVector",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Object3d const *)arg1)->getRotatedVector((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getInversePosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getInversePosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getInversePosition",1,"Neo::Object3d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getInversePosition",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getInversePosition",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getInversePosition",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Object3d const *)arg1)->getInversePosition((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getTransformedVector(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getTransformedVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getTransformedVector",1,"Neo::Object3d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getTransformedVector",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getTransformedVector",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getTransformedVector",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Object3d const *)arg1)->getTransformedVector((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setPosition",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setPosition",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setPosition",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_setPosition",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setPosition((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getTransformedPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getTransformedPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getTransformedPosition",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getTransformedPosition",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getTransformedPosition();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getPosition",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getPosition",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getPosition();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setEulerRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setEulerRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setEulerRotation",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setEulerRotation",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setEulerRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_setEulerRotation",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setEulerRotation((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setAxisAngleRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Object3d::setAxisAngleRotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setAxisAngleRotation",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setAxisAngleRotation",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Object3d::setAxisAngleRotation",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setAxisAngleRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_setAxisAngleRotation",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setAxisAngleRotation((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_addAxisAngleRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Object3d::addAxisAngleRotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::addAxisAngleRotation",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::addAxisAngleRotation",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Object3d::addAxisAngleRotation",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_addAxisAngleRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_addAxisAngleRotation",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->addAxisAngleRotation((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setRotation",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setRotation",2,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Object3d_setRotation",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->setRotation((Neo::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getTransformedRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getTransformedRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getTransformedRotation",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getTransformedRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getTransformedRotation();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getEulerRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getEulerRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getEulerRotation",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getEulerRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getEulerRotation();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Quaternion result;
  
  SWIG_check_num_args("Neo::Object3d::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getRotation",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getRotation();
  {
    Neo::Quaternion * resultptr = new Neo::Quaternion((const Neo::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setScale",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setScale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setScale",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_setScale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setScale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getTransformedScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getTransformedScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getTransformedScale",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getTransformedScale",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getTransformedScale();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getScale",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getScale",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getScale();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_linkTo(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::linkTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::linkTo",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::linkTo",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_linkTo",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_linkTo",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->linkTo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_unLink(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::unLink",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::unLink",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_unLink",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->unLink();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setParent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setParent",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::setParent",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setParent",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setParent",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->setParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_addChild(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::addChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::addChild",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::addChild",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_addChild",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_addChild",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->addChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_hasParent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Object3d::hasParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::hasParent",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_hasParent",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (bool)(arg1)->hasParent();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getChildrenNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Object3d::getChildrenNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getChildrenNumber",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getChildrenNumber",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (unsigned int)(arg1)->getChildrenNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getParent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getParent",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getParent",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Object3d *)(arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getChild(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getChild",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::getChild",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getChild",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Object3d *)(arg1)->getChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Neo::Object3d::getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getId",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getId",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (unsigned long)(arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("Neo::Object3d::setId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setId",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::setId",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setId",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_updateBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::updateBehaviors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::updateBehaviors",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_updateBehaviors",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->updateBehaviors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_drawBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::drawBehaviors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::drawBehaviors",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_drawBehaviors",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->drawBehaviors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_deleteBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Object3d::deleteBehavior",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::deleteBehavior",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::deleteBehavior",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_deleteBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->deleteBehavior(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_invertBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::Object3d::invertBehavior",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::invertBehavior",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::invertBehavior",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Object3d::invertBehavior",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_invertBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->invertBehavior(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_changeBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Behavior *arg3 = (Behavior *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::changeBehavior",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::changeBehavior",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::changeBehavior",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Object3d::changeBehavior",3,"Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_changeBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Behavior,0))){
    SWIG_fail_ptr("Object3d_changeBehavior",3,SWIGTYPE_p_Behavior);
  }
  
  (arg1)->changeBehavior(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_addBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Behavior *arg2 = (Behavior *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::addBehavior",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::addBehavior",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::addBehavior",2,"Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_addBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Behavior,0))){
    SWIG_fail_ptr("Object3d_addBehavior",2,SWIGTYPE_p_Behavior);
  }
  
  (arg1)->addBehavior(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getBehaviorsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Object3d::getBehaviorsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getBehaviorsNumber",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getBehaviorsNumber",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (unsigned int)(arg1)->getBehaviorsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Behavior *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getBehavior",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getBehavior",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::getBehavior",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Behavior *)(arg1)->getBehavior(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Behavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_needToUpdate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Object3d::needToUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::needToUpdate",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_needToUpdate",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (bool)(arg1)->needToUpdate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::Object3d::setActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setActive",1,"Neo::Object3d *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::Object3d::setActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setActive",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setActive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_isActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Object3d::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::isActive",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_isActive",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (bool)(arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::Object3d::setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setVisible",1,"Neo::Object3d *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::Object3d::setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setVisible",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Object3d::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::isVisible",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_isVisible",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (bool)(arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_updateVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::updateVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::updateVisibility",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::updateVisibility",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_updateVisibility",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("Object3d_updateVisibility",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setName",1,"Neo::Object3d *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Object3d::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setName",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getName",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getName",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (char *)(arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Object3d::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getType",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getType",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::update",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_update",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Object3d(void *obj) {
Neo::Object3d *arg1 = (Neo::Object3d *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Object3d_methods[] = {
    {"updateMatrix", _wrap_Object3d_updateMatrix}, 
    {"computeLocalMatrix", _wrap_Object3d_computeLocalMatrix}, 
    {"getMatrix", _wrap_Object3d_getMatrix}, 
    {"unlinkChildren", _wrap_Object3d_unlinkChildren}, 
    {"computeChildrenMatrices", _wrap_Object3d_computeChildrenMatrices}, 
    {"setAttribute", _wrap_Object3d_setAttribute}, 
    {"getAttribute", _wrap_Object3d_getAttribute}, 
    {"getUniformRotatedVector", _wrap_Object3d_getUniformRotatedVector}, 
    {"getInverseRotatedVector", _wrap_Object3d_getInverseRotatedVector}, 
    {"getRotatedVector", _wrap_Object3d_getRotatedVector}, 
    {"getInversePosition", _wrap_Object3d_getInversePosition}, 
    {"getTransformedVector", _wrap_Object3d_getTransformedVector}, 
    {"setPosition", _wrap_Object3d_setPosition}, 
    {"getTransformedPosition", _wrap_Object3d_getTransformedPosition}, 
    {"getPosition", _wrap_Object3d_getPosition}, 
    {"setEulerRotation", _wrap_Object3d_setEulerRotation}, 
    {"setAxisAngleRotation", _wrap_Object3d_setAxisAngleRotation}, 
    {"addAxisAngleRotation", _wrap_Object3d_addAxisAngleRotation}, 
    {"setRotation", _wrap_Object3d_setRotation}, 
    {"getTransformedRotation", _wrap_Object3d_getTransformedRotation}, 
    {"getEulerRotation", _wrap_Object3d_getEulerRotation}, 
    {"getRotation", _wrap_Object3d_getRotation}, 
    {"setScale", _wrap_Object3d_setScale}, 
    {"getTransformedScale", _wrap_Object3d_getTransformedScale}, 
    {"getScale", _wrap_Object3d_getScale}, 
    {"linkTo", _wrap_Object3d_linkTo}, 
    {"unLink", _wrap_Object3d_unLink}, 
    {"setParent", _wrap_Object3d_setParent}, 
    {"addChild", _wrap_Object3d_addChild}, 
    {"hasParent", _wrap_Object3d_hasParent}, 
    {"getChildrenNumber", _wrap_Object3d_getChildrenNumber}, 
    {"getParent", _wrap_Object3d_getParent}, 
    {"getChild", _wrap_Object3d_getChild}, 
    {"getId", _wrap_Object3d_getId}, 
    {"setId", _wrap_Object3d_setId}, 
    {"updateBehaviors", _wrap_Object3d_updateBehaviors}, 
    {"drawBehaviors", _wrap_Object3d_drawBehaviors}, 
    {"deleteBehavior", _wrap_Object3d_deleteBehavior}, 
    {"invertBehavior", _wrap_Object3d_invertBehavior}, 
    {"changeBehavior", _wrap_Object3d_changeBehavior}, 
    {"addBehavior", _wrap_Object3d_addBehavior}, 
    {"getBehaviorsNumber", _wrap_Object3d_getBehaviorsNumber}, 
    {"getBehavior", _wrap_Object3d_getBehavior}, 
    {"needToUpdate", _wrap_Object3d_needToUpdate}, 
    {"setActive", _wrap_Object3d_setActive}, 
    {"isActive", _wrap_Object3d_isActive}, 
    {"setVisible", _wrap_Object3d_setVisible}, 
    {"isVisible", _wrap_Object3d_isVisible}, 
    {"updateVisibility", _wrap_Object3d_updateVisibility}, 
    {"setName", _wrap_Object3d_setName}, 
    {"getName", _wrap_Object3d_getName}, 
    {"getType", _wrap_Object3d_getType}, 
    {"update", _wrap_Object3d_update}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Object3d_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Object3d_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Object3d_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Object3d_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Object3d_bases[] = {0};
static const char *swig_Neo_Object3d_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Object3d = { "Object3d", &SWIGTYPE_p_Neo__Object3d,_wrap_new_Object3d, swig_delete_Object3d, swig_Neo_Object3d_methods, swig_Neo_Object3d_attributes, { "Object3d", swig_Neo_Object3d_cls_methods, swig_Neo_Object3d_cls_attributes, swig_Neo_Object3d_cls_constants }, swig_Neo_Object3d_bases, swig_Neo_Object3d_base_names };

static int _wrap_new_Scene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::Scene",0,0)
  result = (Neo::Scene *)new Neo::Scene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getName",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (char *)(arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getAmbientLight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Scene::getAmbientLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getAmbientLight",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getAmbientLight",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (arg1)->getAmbientLight();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setAmbientLight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Neo::Scene::setAmbientLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setAmbientLight",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::setAmbientLight",2,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setAmbientLight",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Scene_setAmbientLight",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->setAmbientLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setDataMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::M_DATA_MODES arg2 ;
  
  SWIG_check_num_args("Neo::Scene::setDataMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setDataMode",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::setDataMode",2,"Neo::M_DATA_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setDataMode",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (Neo::M_DATA_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setDataMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getDataMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::M_DATA_MODES result;
  
  SWIG_check_num_args("Neo::Scene::getDataMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getDataMode",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getDataMode",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::M_DATA_MODES)(arg1)->getDataMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setScriptFilename(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::setScriptFilename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setScriptFilename",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::setScriptFilename",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setScriptFilename",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setScriptFilename((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getScriptFilename(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getScriptFilename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getScriptFilename",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getScriptFilename",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (char *)(arg1)->getScriptFilename();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setGravity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Scene::setGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setGravity",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::setGravity",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setGravity",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Scene_setGravity",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setGravity((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getGravity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Scene::getGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getGravity",1,"Neo::Scene const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getGravity",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = ((Neo::Scene const *)arg1)->getGravity();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_playLoopSounds(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::playLoopSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::playLoopSounds",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_playLoopSounds",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->playLoopSounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_stopAllSounds(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::stopAllSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::stopAllSounds",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_stopAllSounds",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->stopAllSounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_deleteObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::deleteObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::deleteObject",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::deleteObject",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_deleteObject",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Scene_deleteObject",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->deleteObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewCamera__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewCamera",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewCamera",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::OCamera *)(arg1)->addNewCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewCamera__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg2 = 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewCamera",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewCamera",2,"Neo::OCamera const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewCamera",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("Scene_addNewCamera",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::OCamera *)(arg1)->addNewCamera((Neo::OCamera const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewCamera(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Scene_addNewCamera__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewCamera__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewCamera'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewCamera()\n"
    "    Neo::Scene::addNewCamera(Neo::OCamera const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewLight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewLight",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewLight",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::OLight *)(arg1)->addNewLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewGroup__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewGroup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewGroup",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewGroup",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::Object3d *)(arg1)->addNewGroup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewGroup__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *arg2 = 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewGroup",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewGroup",2,"Neo::Object3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewGroup",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Scene_addNewGroup",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Object3d *)(arg1)->addNewGroup((Neo::Object3d const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewGroup(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Scene_addNewGroup__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Object3d, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewGroup__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewGroup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewGroup()\n"
    "    Neo::Scene::addNewGroup(Neo::Object3d const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewLight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OLight *arg2 = 0 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewLight",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewLight",2,"Neo::OLight const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewLight",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("Scene_addNewLight",2,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (Neo::OLight *)(arg1)->addNewLight((Neo::OLight const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewLight(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Scene_addNewLight__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OLight, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewLight__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewLight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewLight()\n"
    "    Neo::Scene::addNewLight(Neo::OLight const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::MeshRef *arg2 = (Neo::MeshRef *) 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewEntity",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::addNewEntity",2,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewEntity",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("Scene_addNewEntity",2,SWIGTYPE_p_Neo__MeshRef);
  }
  
  result = (Neo::OEntity *)(arg1)->addNewEntity(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewEntity",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewEntity",2,"Neo::OEntity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewEntity",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("Scene_addNewEntity",2,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::OEntity *)(arg1)->addNewEntity((Neo::OEntity const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewEntity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__MeshRef, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewEntity__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewEntity__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewEntity(Neo::MeshRef *)\n"
    "    Neo::Scene::addNewEntity(Neo::OEntity const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewSound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::SoundRef *arg2 = (Neo::SoundRef *) 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewSound",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::addNewSound",2,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewSound",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("Scene_addNewSound",2,SWIGTYPE_p_Neo__SoundRef);
  }
  
  result = (Neo::OSound *)(arg1)->addNewSound(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewSound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OSound *arg2 = 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewSound",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewSound",2,"Neo::OSound const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewSound",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("Scene_addNewSound",2,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (Neo::OSound *)(arg1)->addNewSound((Neo::OSound const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewSound(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__SoundRef, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewSound__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OSound, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewSound__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewSound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewSound(Neo::SoundRef *)\n"
    "    Neo::Scene::addNewSound(Neo::OSound const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::FontRef *arg2 = (Neo::FontRef *) 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewText",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::addNewText",2,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewText",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("Scene_addNewText",2,SWIGTYPE_p_Neo__FontRef);
  }
  
  result = (Neo::OText *)(arg1)->addNewText(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OText *arg2 = 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewText",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewText",2,"Neo::OText const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewText",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("Scene_addNewText",2,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::OText *)(arg1)->addNewText((Neo::OText const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewText(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__FontRef, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewText__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OText, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewText__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewText(Neo::FontRef *)\n"
    "    Neo::Scene::addNewText(Neo::OText const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_getObjectsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getObjectsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectsNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectsNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getObjectsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCamerasNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getCamerasNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCamerasNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCamerasNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getCamerasNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getLightsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getLightsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getLightsNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getLightsNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getLightsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getEntitiesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getEntitiesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getEntitiesNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getEntitiesNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getEntitiesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getSoundsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getSoundsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getSoundsNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getSoundsNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getSoundsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getTextsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getTextsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getTextsNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getTextsNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getTextsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setCurrentCameraId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Scene::setCurrentCameraId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setCurrentCameraId",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::setCurrentCameraId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setCurrentCameraId",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setCurrentCameraId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCurrentCameraId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getCurrentCameraId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCurrentCameraId",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCurrentCameraId",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getCurrentCameraId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCurrentCamera(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getCurrentCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCurrentCamera",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCurrentCamera",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::OCamera *)(arg1)->getCurrentCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setCurrentFrame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Scene::setCurrentFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setCurrentFrame",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::setCurrentFrame",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setCurrentFrame",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCurrentFrame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCurrentFrame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Scene::getCurrentFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCurrentFrame",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCurrentFrame",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (int)(arg1)->getCurrentFrame();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObjectByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getObjectByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getObjectByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::Object3d *)(arg1)->getObjectByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObjectByHandle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned long arg2 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getObjectByHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectByHandle",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getObjectByHandle",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectByHandle",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (Neo::Object3d *)(arg1)->getObjectByHandle(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getLightByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getLightByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getLightByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getLightByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getLightByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OLight *)(arg1)->getLightByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCameraByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getCameraByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCameraByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getCameraByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCameraByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OCamera *)(arg1)->getCameraByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getEntityByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getEntityByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getEntityByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getEntityByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getEntityByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OEntity *)(arg1)->getEntityByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getSoundByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getSoundByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getSoundByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getSoundByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getSoundByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OSound *)(arg1)->getSoundByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getTextByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getTextByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getTextByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getTextByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getTextByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OText *)(arg1)->getTextByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObjectIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Scene::getObjectIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectIndex",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getObjectIndex",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Scene::getObjectIndex",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Scene_getObjectIndex",3,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->getObjectIndex((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObjectByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getObjectByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getObjectByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Object3d *)(arg1)->getObjectByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getLightByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getLightByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getLightByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getLightByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getLightByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OLight *)(arg1)->getLightByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCameraByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getCameraByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCameraByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getCameraByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCameraByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OCamera *)(arg1)->getCameraByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getEntityByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getEntityByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getEntityByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getEntityByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getEntityByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OEntity *)(arg1)->getEntityByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getSoundByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getSoundByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getSoundByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getSoundByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getSoundByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OSound *)(arg1)->getSoundByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getTextByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getTextByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getTextByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getTextByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getTextByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OText *)(arg1)->getTextByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_begin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::begin",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_begin",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->begin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_end(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::end",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_end",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->end();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_prepareCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::prepareCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::prepareCollisionShape",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::prepareCollisionShape",2,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_prepareCollisionShape",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("Scene_prepareCollisionShape",2,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->prepareCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_prepareCollisionObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::prepareCollisionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::prepareCollisionObject",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::prepareCollisionObject",2,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_prepareCollisionObject",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("Scene_prepareCollisionObject",2,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->prepareCollisionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_prepareConstraints(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::prepareConstraints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::prepareConstraints",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::prepareConstraints",2,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_prepareConstraints",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("Scene_prepareConstraints",2,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->prepareConstraints(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_preparePhysics(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::preparePhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::preparePhysics",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_preparePhysics",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->preparePhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_updatePhysics(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::updatePhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::updatePhysics",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_updatePhysics",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->updatePhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::update",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_update",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_updateObjectsBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::updateObjectsBehaviors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::updateObjectsBehaviors",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_updateObjectsBehaviors",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->updateObjectsBehaviors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_drawObjectsBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::drawObjectsBehaviors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::drawObjectsBehaviors",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_drawObjectsBehaviors",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->drawObjectsBehaviors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_updateObjectsMatrices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::updateObjectsMatrices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::updateObjectsMatrices",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_updateObjectsMatrices",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->updateObjectsMatrices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::draw",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::draw",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_draw",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("Scene_draw",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Scene(void *obj) {
Neo::Scene *arg1 = (Neo::Scene *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Scene_methods[] = {
    {"setName", _wrap_Scene_setName}, 
    {"getName", _wrap_Scene_getName}, 
    {"getAmbientLight", _wrap_Scene_getAmbientLight}, 
    {"setAmbientLight", _wrap_Scene_setAmbientLight}, 
    {"setDataMode", _wrap_Scene_setDataMode}, 
    {"getDataMode", _wrap_Scene_getDataMode}, 
    {"setScriptFilename", _wrap_Scene_setScriptFilename}, 
    {"getScriptFilename", _wrap_Scene_getScriptFilename}, 
    {"setGravity", _wrap_Scene_setGravity}, 
    {"getGravity", _wrap_Scene_getGravity}, 
    {"playLoopSounds", _wrap_Scene_playLoopSounds}, 
    {"stopAllSounds", _wrap_Scene_stopAllSounds}, 
    {"deleteObject", _wrap_Scene_deleteObject}, 
    {"addNewCamera", _wrap_Scene_addNewCamera}, 
    {"addNewGroup", _wrap_Scene_addNewGroup}, 
    {"addNewLight", _wrap_Scene_addNewLight}, 
    {"addNewEntity", _wrap_Scene_addNewEntity}, 
    {"addNewSound", _wrap_Scene_addNewSound}, 
    {"addNewText", _wrap_Scene_addNewText}, 
    {"getObjectsNumber", _wrap_Scene_getObjectsNumber}, 
    {"getCamerasNumber", _wrap_Scene_getCamerasNumber}, 
    {"getLightsNumber", _wrap_Scene_getLightsNumber}, 
    {"getEntitiesNumber", _wrap_Scene_getEntitiesNumber}, 
    {"getSoundsNumber", _wrap_Scene_getSoundsNumber}, 
    {"getTextsNumber", _wrap_Scene_getTextsNumber}, 
    {"setCurrentCameraId", _wrap_Scene_setCurrentCameraId}, 
    {"getCurrentCameraId", _wrap_Scene_getCurrentCameraId}, 
    {"getCurrentCamera", _wrap_Scene_getCurrentCamera}, 
    {"setCurrentFrame", _wrap_Scene_setCurrentFrame}, 
    {"getCurrentFrame", _wrap_Scene_getCurrentFrame}, 
    {"getObjectByName", _wrap_Scene_getObjectByName}, 
    {"getObjectByHandle", _wrap_Scene_getObjectByHandle}, 
    {"getLightByName", _wrap_Scene_getLightByName}, 
    {"getCameraByName", _wrap_Scene_getCameraByName}, 
    {"getEntityByName", _wrap_Scene_getEntityByName}, 
    {"getSoundByName", _wrap_Scene_getSoundByName}, 
    {"getTextByName", _wrap_Scene_getTextByName}, 
    {"getObjectIndex", _wrap_Scene_getObjectIndex}, 
    {"getObjectByIndex", _wrap_Scene_getObjectByIndex}, 
    {"getLightByIndex", _wrap_Scene_getLightByIndex}, 
    {"getCameraByIndex", _wrap_Scene_getCameraByIndex}, 
    {"getEntityByIndex", _wrap_Scene_getEntityByIndex}, 
    {"getSoundByIndex", _wrap_Scene_getSoundByIndex}, 
    {"getTextByIndex", _wrap_Scene_getTextByIndex}, 
    {"begin", _wrap_Scene_begin}, 
    {"end", _wrap_Scene_end}, 
    {"prepareCollisionShape", _wrap_Scene_prepareCollisionShape}, 
    {"prepareCollisionObject", _wrap_Scene_prepareCollisionObject}, 
    {"prepareConstraints", _wrap_Scene_prepareConstraints}, 
    {"preparePhysics", _wrap_Scene_preparePhysics}, 
    {"updatePhysics", _wrap_Scene_updatePhysics}, 
    {"update", _wrap_Scene_update}, 
    {"updateObjectsBehaviors", _wrap_Scene_updateObjectsBehaviors}, 
    {"drawObjectsBehaviors", _wrap_Scene_drawObjectsBehaviors}, 
    {"updateObjectsMatrices", _wrap_Scene_updateObjectsMatrices}, 
    {"draw", _wrap_Scene_draw}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Scene_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Scene_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Scene_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Scene_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Scene_bases[] = {0};
static const char *swig_Neo_Scene_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Scene = { "Scene", &SWIGTYPE_p_Neo__Scene,_wrap_new_Scene, swig_delete_Scene, swig_Neo_Scene_methods, swig_Neo_Scene_attributes, { "Scene", swig_Neo_Scene_cls_methods, swig_Neo_Scene_cls_attributes, swig_Neo_Scene_cls_constants }, swig_Neo_Scene_bases, swig_Neo_Scene_base_names };

static int _wrap_new_Level(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::Level",0,0)
  result = (Neo::Level *)new Neo::Level();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Level,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::Level::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::clear",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_clear",1,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_clearScenes(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::Level::clearScenes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::clearScenes",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_clearScenes",1,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->clearScenes();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getFXManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  FXManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getFXManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getFXManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getFXManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (FXManager *)(arg1)->getFXManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FXManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_createFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::ShaderRef *arg2 = (Neo::ShaderRef *) 0 ;
  Neo::ShaderRef *arg3 = (Neo::ShaderRef *) 0 ;
  FXRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::createFX",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::createFX",1,"Neo::Level *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Level::createFX",2,"Neo::ShaderRef *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Level::createFX",3,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_createFX",1,SWIGTYPE_p_Neo__Level);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("Level_createFX",2,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("Level_createFX",3,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  result = (FXRef *)(arg1)->createFX(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FXRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getFontManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getFontManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getFontManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getFontManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (DataManager *)(arg1)->getFontManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getTextureManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getTextureManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getTextureManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getTextureManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (DataManager *)(arg1)->getTextureManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getShaderManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getShaderManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getShaderManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getShaderManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (DataManager *)(arg1)->getShaderManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getSoundManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getSoundManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getSoundManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getSoundManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (DataManager *)(arg1)->getSoundManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getMeshManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getMeshManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getMeshManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getMeshManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (DataManager *)(arg1)->getMeshManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getArmatureAnimManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getArmatureAnimManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getArmatureAnimManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getArmatureAnimManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (DataManager *)(arg1)->getArmatureAnimManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getTexturesAnimManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getTexturesAnimManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getTexturesAnimManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getTexturesAnimManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (DataManager *)(arg1)->getTexturesAnimManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getMaterialsAnimManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getMaterialsAnimManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getMaterialsAnimManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getMaterialsAnimManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (DataManager *)(arg1)->getMaterialsAnimManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadFont(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::FontRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadFont",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadFont",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadFont",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::FontRef *)(arg1)->loadFont((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FontRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadMesh__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::MeshRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadMesh",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadMesh",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadMesh",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadMesh",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadMesh",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::MeshRef *)(arg1)->loadMesh((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MeshRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadMesh__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadMesh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadMesh",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadMesh",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadMesh",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::MeshRef *)(arg1)->loadMesh((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MeshRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadMesh(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadMesh__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadMesh__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadMesh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadMesh(char const *,bool const)\n"
    "    Neo::Level::loadMesh(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadArmatureAnim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadArmatureAnim",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadArmatureAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::ArmatureAnimRef *)(arg1)->loadArmatureAnim((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadArmatureAnim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadArmatureAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadArmatureAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::ArmatureAnimRef *)(arg1)->loadArmatureAnim((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadArmatureAnim(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadArmatureAnim__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadArmatureAnim__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadArmatureAnim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadArmatureAnim(char const *,bool const)\n"
    "    Neo::Level::loadArmatureAnim(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadTexturesAnim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexturesAnim",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexturesAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::TexturesAnimRef *)(arg1)->loadTexturesAnim((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexturesAnim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexturesAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexturesAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::TexturesAnimRef *)(arg1)->loadTexturesAnim((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexturesAnim(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadTexturesAnim__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadTexturesAnim__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadTexturesAnim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadTexturesAnim(char const *,bool const)\n"
    "    Neo::Level::loadTexturesAnim(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadMaterialsAnim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadMaterialsAnim",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadMaterialsAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::MaterialsAnimRef *)(arg1)->loadMaterialsAnim((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadMaterialsAnim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadMaterialsAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadMaterialsAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::MaterialsAnimRef *)(arg1)->loadMaterialsAnim((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadMaterialsAnim(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadMaterialsAnim__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadMaterialsAnim__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadMaterialsAnim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadMaterialsAnim(char const *,bool const)\n"
    "    Neo::Level::loadMaterialsAnim(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadTexture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexture",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexture",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadTexture",3,"bool const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Neo::Level::loadTexture",4,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexture",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexture",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexture",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadTexture",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexture",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexture__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexture",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexture",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexture",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexture(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadTexture__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadTexture__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Level_loadTexture__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadTexture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadTexture(char const *,bool const,bool const)\n"
    "    Neo::Level::loadTexture(char const *,bool const)\n"
    "    Neo::Level::loadTexture(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadSound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::SoundRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadSound",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadSound",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadSound",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadSound",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadSound",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::SoundRef *)(arg1)->loadSound((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SoundRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadSound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadSound",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadSound",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadSound",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::SoundRef *)(arg1)->loadSound((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SoundRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadSound(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadSound__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadSound__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadSound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadSound(char const *,bool const)\n"
    "    Neo::Level::loadSound(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  M_SHADER_TYPES arg3 ;
  M_SHADER_TYPES *argp3 ;
  Neo::ShaderRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadShader",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadShader",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadShader",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Level::loadShader",3,"M_SHADER_TYPES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadShader",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_M_SHADER_TYPES,0))){
    SWIG_fail_ptr("Level_loadShader",3,SWIGTYPE_p_M_SHADER_TYPES);
  }
  arg3 = *argp3;
  
  result = (Neo::ShaderRef *)(arg1)->loadShader((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ShaderRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_sendToUpdateQueue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataRef *arg2 = (DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::Level::sendToUpdateQueue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::sendToUpdateQueue",1,"Neo::Level *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Level::sendToUpdateQueue",2,"DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_sendToUpdateQueue",1,SWIGTYPE_p_Neo__Level);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DataRef,0))){
    SWIG_fail_ptr("Level_sendToUpdateQueue",2,SWIGTYPE_p_DataRef);
  }
  
  (arg1)->sendToUpdateQueue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_sendToClearQueue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  DataRef *arg2 = (DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::Level::sendToClearQueue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::sendToClearQueue",1,"Neo::Level *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Level::sendToClearQueue",2,"DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_sendToClearQueue",1,SWIGTYPE_p_Neo__Level);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DataRef,0))){
    SWIG_fail_ptr("Level_sendToClearQueue",2,SWIGTYPE_p_DataRef);
  }
  
  (arg1)->sendToClearQueue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_updateQueueDatas(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::Level::updateQueueDatas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::updateQueueDatas",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_updateQueueDatas",1,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->updateQueueDatas();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_clearQueueDatas(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::Level::clearQueueDatas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::clearQueueDatas",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_clearQueueDatas",1,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->clearQueueDatas();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_changeCurrentScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Level::changeCurrentScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::changeCurrentScene",1,"Neo::Level *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Level::changeCurrentScene",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_changeCurrentScene",1,SWIGTYPE_p_Neo__Level);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->changeCurrentScene(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_deleteScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Level::deleteScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::deleteScene",1,"Neo::Level *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Level::deleteScene",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_deleteScene",1,SWIGTYPE_p_Neo__Level);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->deleteScene(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getSceneIndexByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Level::getSceneIndexByName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getSceneIndexByName",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::getSceneIndexByName",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Level::getSceneIndexByName",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getSceneIndexByName",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Level_getSceneIndexByName",3,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->getSceneIndexByName((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_addNewScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::addNewScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::addNewScene",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_addNewScene",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::Scene *)(arg1)->addNewScene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getSceneByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getSceneByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getSceneByName",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::getSceneByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getSceneByName",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::Scene *)(arg1)->getSceneByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getCurrentScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getCurrentScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getCurrentScene",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getCurrentScene",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::Scene *)(arg1)->getCurrentScene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_setCurrentSceneId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Level::setCurrentSceneId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::setCurrentSceneId",1,"Neo::Level *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Level::setCurrentSceneId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_setCurrentSceneId",1,SWIGTYPE_p_Neo__Level);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setCurrentSceneId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getCurrentSceneId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Level::getCurrentSceneId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getCurrentSceneId",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getCurrentSceneId",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (unsigned int)(arg1)->getCurrentSceneId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getScenesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Level::getScenesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getScenesNumber",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getScenesNumber",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (unsigned int)(arg1)->getScenesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getSceneByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getSceneByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getSceneByIndex",1,"Neo::Level *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Level::getSceneByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getSceneByIndex",1,SWIGTYPE_p_Neo__Level);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Scene *)(arg1)->getSceneByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Level(void *obj) {
Neo::Level *arg1 = (Neo::Level *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Level_methods[] = {
    {"clear", _wrap_Level_clear}, 
    {"clearScenes", _wrap_Level_clearScenes}, 
    {"getFXManager", _wrap_Level_getFXManager}, 
    {"createFX", _wrap_Level_createFX}, 
    {"getFontManager", _wrap_Level_getFontManager}, 
    {"getTextureManager", _wrap_Level_getTextureManager}, 
    {"getShaderManager", _wrap_Level_getShaderManager}, 
    {"getSoundManager", _wrap_Level_getSoundManager}, 
    {"getMeshManager", _wrap_Level_getMeshManager}, 
    {"getArmatureAnimManager", _wrap_Level_getArmatureAnimManager}, 
    {"getTexturesAnimManager", _wrap_Level_getTexturesAnimManager}, 
    {"getMaterialsAnimManager", _wrap_Level_getMaterialsAnimManager}, 
    {"loadFont", _wrap_Level_loadFont}, 
    {"loadMesh", _wrap_Level_loadMesh}, 
    {"loadArmatureAnim", _wrap_Level_loadArmatureAnim}, 
    {"loadTexturesAnim", _wrap_Level_loadTexturesAnim}, 
    {"loadMaterialsAnim", _wrap_Level_loadMaterialsAnim}, 
    {"loadTexture", _wrap_Level_loadTexture}, 
    {"loadSound", _wrap_Level_loadSound}, 
    {"loadShader", _wrap_Level_loadShader}, 
    {"sendToUpdateQueue", _wrap_Level_sendToUpdateQueue}, 
    {"sendToClearQueue", _wrap_Level_sendToClearQueue}, 
    {"updateQueueDatas", _wrap_Level_updateQueueDatas}, 
    {"clearQueueDatas", _wrap_Level_clearQueueDatas}, 
    {"changeCurrentScene", _wrap_Level_changeCurrentScene}, 
    {"deleteScene", _wrap_Level_deleteScene}, 
    {"getSceneIndexByName", _wrap_Level_getSceneIndexByName}, 
    {"addNewScene", _wrap_Level_addNewScene}, 
    {"getSceneByName", _wrap_Level_getSceneByName}, 
    {"getCurrentScene", _wrap_Level_getCurrentScene}, 
    {"setCurrentSceneId", _wrap_Level_setCurrentSceneId}, 
    {"getCurrentSceneId", _wrap_Level_getCurrentSceneId}, 
    {"getScenesNumber", _wrap_Level_getScenesNumber}, 
    {"getSceneByIndex", _wrap_Level_getSceneByIndex}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Level_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Level_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Level_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Level_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Level_bases[] = {0};
static const char *swig_Neo_Level_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Level = { "Level", &SWIGTYPE_p_Neo__Level,_wrap_new_Level, swig_delete_Level, swig_Neo_Level_methods, swig_Neo_Level_attributes, { "Level", swig_Neo_Level_cls_methods, swig_Neo_Level_cls_attributes, swig_Neo_Level_cls_constants }, swig_Neo_Level_bases, swig_Neo_Level_base_names };

static int _wrap_new_TexturePass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Texture *arg1 = (Texture *) 0 ;
  TEX_COMBINE_MODES arg2 ;
  unsigned int arg3 ;
  TEX_COMBINE_MODES *argp2 ;
  Neo::TexturePass *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturePass::TexturePass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::TexturePass",1,"Texture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::TexturePass::TexturePass",2,"TEX_COMBINE_MODES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::TexturePass::TexturePass",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Texture,0))){
    SWIG_fail_ptr("new_TexturePass",1,SWIGTYPE_p_Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TEX_COMBINE_MODES,0))){
    SWIG_fail_ptr("new_TexturePass",2,SWIGTYPE_p_TEX_COMBINE_MODES);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Neo::TexturePass *)new Neo::TexturePass(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturePass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TexturePass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = 0 ;
  Neo::TexturePass *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturePass::TexturePass",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::TexturePass::TexturePass",1,"Neo::TexturePass const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("new_TexturePass",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  result = (Neo::TexturePass *)new Neo::TexturePass((Neo::TexturePass const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturePass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TexturePass(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__TexturePass, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TexturePass__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TEX_COMBINE_MODES, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TexturePass__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TexturePass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::TexturePass::TexturePass(Texture *,TEX_COMBINE_MODES,unsigned int)\n"
    "    Neo::TexturePass::TexturePass(Neo::TexturePass const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TexturePass_setMapChannel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::TexturePass::setMapChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::setMapChannel",1,"Neo::TexturePass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TexturePass::setMapChannel",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_setMapChannel",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setMapChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_setTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  SWIG_check_num_args("Neo::TexturePass::setTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::setTexture",1,"Neo::TexturePass *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::TexturePass::setTexture",2,"Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_setTexture",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Texture,0))){
    SWIG_fail_ptr("TexturePass_setTexture",2,SWIGTYPE_p_Texture);
  }
  
  (arg1)->setTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_getMapChannel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TexturePass::getMapChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::getMapChannel",1,"Neo::TexturePass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_getMapChannel",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  result = (unsigned int)(arg1)->getMapChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_getTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturePass::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::getTexture",1,"Neo::TexturePass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_getTexture",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  result = (Texture *)(arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_setCombineMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  TEX_COMBINE_MODES arg2 ;
  TEX_COMBINE_MODES *argp2 ;
  
  SWIG_check_num_args("Neo::TexturePass::setCombineMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::setCombineMode",1,"Neo::TexturePass *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::TexturePass::setCombineMode",2,"TEX_COMBINE_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_setCombineMode",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TEX_COMBINE_MODES,0))){
    SWIG_fail_ptr("TexturePass_setCombineMode",2,SWIGTYPE_p_TEX_COMBINE_MODES);
  }
  arg2 = *argp2;
  
  (arg1)->setCombineMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_getCombineMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  TEX_COMBINE_MODES result;
  
  SWIG_check_num_args("Neo::TexturePass::getCombineMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::getCombineMode",1,"Neo::TexturePass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_getCombineMode",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  result = (arg1)->getCombineMode();
  {
    TEX_COMBINE_MODES * resultptr = new TEX_COMBINE_MODES((const TEX_COMBINE_MODES &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TEX_COMBINE_MODES,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TexturePass(void *obj) {
Neo::TexturePass *arg1 = (Neo::TexturePass *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_TexturePass_methods[] = {
    {"setMapChannel", _wrap_TexturePass_setMapChannel}, 
    {"setTexture", _wrap_TexturePass_setTexture}, 
    {"getMapChannel", _wrap_TexturePass_getMapChannel}, 
    {"getTexture", _wrap_TexturePass_getTexture}, 
    {"setCombineMode", _wrap_TexturePass_setCombineMode}, 
    {"getCombineMode", _wrap_TexturePass_getCombineMode}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_TexturePass_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_TexturePass_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_TexturePass_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_TexturePass_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_TexturePass_bases[] = {0};
static const char *swig_Neo_TexturePass_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_TexturePass = { "TexturePass", &SWIGTYPE_p_Neo__TexturePass,_wrap_new_TexturePass, swig_delete_TexturePass, swig_Neo_TexturePass_methods, swig_Neo_TexturePass_attributes, { "TexturePass", swig_Neo_TexturePass_cls_methods, swig_Neo_TexturePass_cls_attributes, swig_Neo_TexturePass_cls_constants }, swig_Neo_TexturePass_bases, swig_Neo_TexturePass_base_names };

static int _wrap_new_Material__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::Material",0,0)
  result = (Neo::Material *)new Neo::Material();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Material__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = 0 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::Material",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Material::Material",1,"Neo::Material const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("new_Material",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (Neo::Material *)new Neo::Material((Neo::Material const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Material(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Material__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Material__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Material'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Material::Material()\n"
    "    Neo::Material::Material(Neo::Material const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Material_setType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Material::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setType",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::setType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setType",1,SWIGTYPE_p_Neo__Material);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Material::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getType",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getType",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  FXRef *arg2 = (FXRef *) 0 ;
  
  SWIG_check_num_args("Neo::Material::setFXRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setFXRef",1,"Neo::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Material::setFXRef",2,"FXRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setFXRef",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FXRef,0))){
    SWIG_fail_ptr("Material_setFXRef",2,SWIGTYPE_p_FXRef);
  }
  
  (arg1)->setFXRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setZFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  FXRef *arg2 = (FXRef *) 0 ;
  
  SWIG_check_num_args("Neo::Material::setZFXRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setZFXRef",1,"Neo::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Material::setZFXRef",2,"FXRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setZFXRef",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FXRef,0))){
    SWIG_fail_ptr("Material_setZFXRef",2,SWIGTYPE_p_FXRef);
  }
  
  (arg1)->setZFXRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  FXRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::getFXRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getFXRef",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getFXRef",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (FXRef *)(arg1)->getFXRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FXRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getZFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  FXRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::getZFXRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getZFXRef",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getZFXRef",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (FXRef *)(arg1)->getZFXRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FXRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setBlendMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  BLENDING_MODES arg2 ;
  BLENDING_MODES *argp2 ;
  
  SWIG_check_num_args("Neo::Material::setBlendMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setBlendMode",1,"Neo::Material *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Material::setBlendMode",2,"BLENDING_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setBlendMode",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BLENDING_MODES,0))){
    SWIG_fail_ptr("Material_setBlendMode",2,SWIGTYPE_p_BLENDING_MODES);
  }
  arg2 = *argp2;
  
  (arg1)->setBlendMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getBlendMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  BLENDING_MODES result;
  
  SWIG_check_num_args("Neo::Material::getBlendMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getBlendMode",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getBlendMode",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (arg1)->getBlendMode();
  {
    BLENDING_MODES * resultptr = new BLENDING_MODES((const BLENDING_MODES &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BLENDING_MODES,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setOpacity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Material::setOpacity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setOpacity",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::setOpacity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setOpacity",1,SWIGTYPE_p_Neo__Material);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setOpacity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setShininess(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Material::setShininess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setShininess",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::setShininess",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setShininess",1,SWIGTYPE_p_Neo__Material);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setShininess(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setCustomValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Material::setCustomValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setCustomValue",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::setCustomValue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setCustomValue",1,SWIGTYPE_p_Neo__Material);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCustomValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Material::setDiffuse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setDiffuse",1,"Neo::Material *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Material::setDiffuse",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setDiffuse",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Material_setDiffuse",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setDiffuse((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Material::setSpecular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setSpecular",1,"Neo::Material *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Material::setSpecular",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setSpecular",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Material_setSpecular",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setSpecular((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setEmit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Material::setEmit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setEmit",1,"Neo::Material *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Material::setEmit",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setEmit",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Material_setEmit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setEmit((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setCustomColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Material::setCustomColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setCustomColor",1,"Neo::Material *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Material::setCustomColor",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setCustomColor",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Material_setCustomColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setCustomColor((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getOpacity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Material::getOpacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getOpacity",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getOpacity",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (float)(arg1)->getOpacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getShininess(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Material::getShininess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getShininess",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getShininess",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (float)(arg1)->getShininess();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getCustomValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Material::getCustomValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getCustomValue",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getCustomValue",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (float)(arg1)->getCustomValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getEmit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Material::getEmit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getEmit",1,"Neo::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getEmit",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = ((Neo::Material const *)arg1)->getEmit();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Material::getDiffuse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getDiffuse",1,"Neo::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getDiffuse",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = ((Neo::Material const *)arg1)->getDiffuse();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Material::getSpecular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getSpecular",1,"Neo::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getSpecular",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = ((Neo::Material const *)arg1)->getSpecular();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getCustomColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Material::getCustomColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getCustomColor",1,"Neo::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getCustomColor",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = ((Neo::Material const *)arg1)->getCustomColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_allocTexturesPass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Material::allocTexturesPass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::allocTexturesPass",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::allocTexturesPass",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_allocTexturesPass",1,SWIGTYPE_p_Neo__Material);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocTexturesPass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_clearTexturesPass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  
  SWIG_check_num_args("Neo::Material::clearTexturesPass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::clearTexturesPass",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_clearTexturesPass",1,SWIGTYPE_p_Neo__Material);
  }
  
  (arg1)->clearTexturesPass();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_addTexturePass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  TEX_COMBINE_MODES arg3 ;
  unsigned int arg4 ;
  TEX_COMBINE_MODES *argp3 ;
  
  SWIG_check_num_args("Neo::Material::addTexturePass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::addTexturePass",1,"Neo::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Material::addTexturePass",2,"Texture *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Material::addTexturePass",3,"TEX_COMBINE_MODES");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Material::addTexturePass",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_addTexturePass",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Texture,0))){
    SWIG_fail_ptr("Material_addTexturePass",2,SWIGTYPE_p_Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_TEX_COMBINE_MODES,0))){
    SWIG_fail_ptr("Material_addTexturePass",3,SWIGTYPE_p_TEX_COMBINE_MODES);
  }
  arg3 = *argp3;
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->addTexturePass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getTexturesPassNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Material::getTexturesPassNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getTexturesPassNumber",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getTexturesPassNumber",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (unsigned int)(arg1)->getTexturesPassNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getTexturePass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  unsigned int arg2 ;
  Neo::TexturePass *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::getTexturePass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getTexturePass",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::getTexturePass",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getTexturePass",1,SWIGTYPE_p_Neo__Material);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::TexturePass *)(arg1)->getTexturePass(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturePass,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Material(void *obj) {
Neo::Material *arg1 = (Neo::Material *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Material_methods[] = {
    {"setType", _wrap_Material_setType}, 
    {"getType", _wrap_Material_getType}, 
    {"setFXRef", _wrap_Material_setFXRef}, 
    {"setZFXRef", _wrap_Material_setZFXRef}, 
    {"getFXRef", _wrap_Material_getFXRef}, 
    {"getZFXRef", _wrap_Material_getZFXRef}, 
    {"setBlendMode", _wrap_Material_setBlendMode}, 
    {"getBlendMode", _wrap_Material_getBlendMode}, 
    {"setOpacity", _wrap_Material_setOpacity}, 
    {"setShininess", _wrap_Material_setShininess}, 
    {"setCustomValue", _wrap_Material_setCustomValue}, 
    {"setDiffuse", _wrap_Material_setDiffuse}, 
    {"setSpecular", _wrap_Material_setSpecular}, 
    {"setEmit", _wrap_Material_setEmit}, 
    {"setCustomColor", _wrap_Material_setCustomColor}, 
    {"getOpacity", _wrap_Material_getOpacity}, 
    {"getShininess", _wrap_Material_getShininess}, 
    {"getCustomValue", _wrap_Material_getCustomValue}, 
    {"getEmit", _wrap_Material_getEmit}, 
    {"getDiffuse", _wrap_Material_getDiffuse}, 
    {"getSpecular", _wrap_Material_getSpecular}, 
    {"getCustomColor", _wrap_Material_getCustomColor}, 
    {"allocTexturesPass", _wrap_Material_allocTexturesPass}, 
    {"clearTexturesPass", _wrap_Material_clearTexturesPass}, 
    {"addTexturePass", _wrap_Material_addTexturePass}, 
    {"getTexturesPassNumber", _wrap_Material_getTexturesPassNumber}, 
    {"getTexturePass", _wrap_Material_getTexturePass}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Material_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Material_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Material_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Material_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Material_bases[] = {0};
static const char *swig_Neo_Material_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Material = { "Material", &SWIGTYPE_p_Neo__Material,_wrap_new_Material, swig_delete_Material, swig_Neo_Material_methods, swig_Neo_Material_attributes, { "Material", swig_Neo_Material_cls_methods, swig_Neo_Material_cls_attributes, swig_Neo_Material_cls_constants }, swig_Neo_Material_bases, swig_Neo_Material_base_names };

static int _wrap_new_MaterialDisplay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  PRIMITIVE_TYPES arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  PRIMITIVE_TYPES *argp1 ;
  Neo::MaterialDisplay *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::MaterialDisplay",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::MaterialDisplay",1,"PRIMITIVE_TYPES");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialDisplay::MaterialDisplay",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::MaterialDisplay::MaterialDisplay",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_PRIMITIVE_TYPES,0))){
    SWIG_fail_ptr("new_MaterialDisplay",1,SWIGTYPE_p_PRIMITIVE_TYPES);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Neo::MaterialDisplay *)new Neo::MaterialDisplay(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialDisplay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MaterialDisplay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = 0 ;
  Neo::MaterialDisplay *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::MaterialDisplay",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::MaterialDisplay",1,"Neo::MaterialDisplay const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("new_MaterialDisplay",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (Neo::MaterialDisplay *)new Neo::MaterialDisplay((Neo::MaterialDisplay const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialDisplay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MaterialDisplay(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__MaterialDisplay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MaterialDisplay__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_PRIMITIVE_TYPES, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_MaterialDisplay__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MaterialDisplay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::MaterialDisplay::MaterialDisplay(PRIMITIVE_TYPES,unsigned int,unsigned int)\n"
    "    Neo::MaterialDisplay::MaterialDisplay(Neo::MaterialDisplay const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MaterialDisplay_getPrimitiveType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  PRIMITIVE_TYPES result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getPrimitiveType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getPrimitiveType",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getPrimitiveType",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (arg1)->getPrimitiveType();
  {
    PRIMITIVE_TYPES * resultptr = new PRIMITIVE_TYPES((const PRIMITIVE_TYPES &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_PRIMITIVE_TYPES,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getBegin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getBegin",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getBegin",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (unsigned int)(arg1)->getBegin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getSize",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getSize",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (unsigned int)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_setCullMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  CULL_MODES arg2 ;
  CULL_MODES *argp2 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::setCullMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::setCullMode",1,"Neo::MaterialDisplay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::MaterialDisplay::setCullMode",2,"CULL_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_setCullMode",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CULL_MODES,0))){
    SWIG_fail_ptr("MaterialDisplay_setCullMode",2,SWIGTYPE_p_CULL_MODES);
  }
  arg2 = *argp2;
  
  (arg1)->setCullMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getCullMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  CULL_MODES result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getCullMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getCullMode",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getCullMode",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (arg1)->getCullMode();
  {
    CULL_MODES * resultptr = new CULL_MODES((const CULL_MODES &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CULL_MODES,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_setMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::Material *arg2 = (Neo::Material *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::setMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::setMaterial",1,"Neo::MaterialDisplay *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::MaterialDisplay::setMaterial",2,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_setMaterial",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("MaterialDisplay_setMaterial",2,SWIGTYPE_p_Neo__Material);
  }
  
  (arg1)->setMaterial(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getMaterial",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getMaterial",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (Neo::Material *)(arg1)->getMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_setVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::setVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::setVisibility",1,"Neo::MaterialDisplay *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::MaterialDisplay::setVisibility",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_setVisibility",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::isVisible",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_isVisible",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (bool)(arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MaterialDisplay(void *obj) {
Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_MaterialDisplay_methods[] = {
    {"getPrimitiveType", _wrap_MaterialDisplay_getPrimitiveType}, 
    {"getBegin", _wrap_MaterialDisplay_getBegin}, 
    {"getSize", _wrap_MaterialDisplay_getSize}, 
    {"setCullMode", _wrap_MaterialDisplay_setCullMode}, 
    {"getCullMode", _wrap_MaterialDisplay_getCullMode}, 
    {"setMaterial", _wrap_MaterialDisplay_setMaterial}, 
    {"getMaterial", _wrap_MaterialDisplay_getMaterial}, 
    {"setVisibility", _wrap_MaterialDisplay_setVisibility}, 
    {"isVisible", _wrap_MaterialDisplay_isVisible}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_MaterialDisplay_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_MaterialDisplay_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_MaterialDisplay_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_MaterialDisplay_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_MaterialDisplay_bases[] = {0};
static const char *swig_Neo_MaterialDisplay_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_MaterialDisplay = { "MaterialDisplay", &SWIGTYPE_p_Neo__MaterialDisplay,_wrap_new_MaterialDisplay, swig_delete_MaterialDisplay, swig_Neo_MaterialDisplay_methods, swig_Neo_MaterialDisplay_attributes, { "MaterialDisplay", swig_Neo_MaterialDisplay_cls_methods, swig_Neo_MaterialDisplay_cls_attributes, swig_Neo_MaterialDisplay_cls_constants }, swig_Neo_MaterialDisplay_bases, swig_Neo_MaterialDisplay_base_names };

static int _wrap_new_SubMesh(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::SubMesh",0,0)
  result = (Neo::SubMesh *)new Neo::SubMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SubMesh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearMorphingData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearMorphingData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearMorphingData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearMorphingData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearMorphingData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_createMorphingData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  MorphingData *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::createMorphingData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::createMorphingData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_createMorphingData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (MorphingData *)(arg1)->createMorphingData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MorphingData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getMorphingData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  MorphingData *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getMorphingData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getMorphingData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getMorphingData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (MorphingData *)(arg1)->getMorphingData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MorphingData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearSkinData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearSkinData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearSkinData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearSkinData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearSkinData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_createSkinData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  SkinData *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::createSkinData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::createSkinData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_createSkinData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (SkinData *)(arg1)->createSkinData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SkinData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getSkinData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  SkinData *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getSkinData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getSkinData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getSkinData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (SkinData *)(arg1)->getSkinData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SkinData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearIndices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearIndices",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearIndices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearIndices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearVertices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearVertices",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearVertices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearVertices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearNormals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearNormals",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearNormals",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearNormals();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearTangents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearTangents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearTangents",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearTangents",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearTangents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearTexCoords(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearTexCoords",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearTexCoords",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearTexCoords();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearColors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearColors",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearColors",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearColors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocIndices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  VAR_TYPES arg3 ;
  VAR_TYPES *argp3 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocIndices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocIndices",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocIndices",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::SubMesh::allocIndices",3,"VAR_TYPES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocIndices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_VAR_TYPES,0))){
    SWIG_fail_ptr("SubMesh_allocIndices",3,SWIGTYPE_p_VAR_TYPES);
  }
  arg3 = *argp3;
  
  result = (void *)(arg1)->allocIndices(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocColors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocColors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocColors",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocColors",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocColors",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Color *)(arg1)->allocColors(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocVertices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocVertices",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocVertices",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocVertices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Vector3 *)(arg1)->allocVertices(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocNormals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocNormals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocNormals",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocNormals",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocNormals",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Vector3 *)(arg1)->allocNormals(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocTangents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocTangents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocTangents",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocTangents",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocTangents",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Vector3 *)(arg1)->allocTangents(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocTexCoords(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocTexCoords",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocTexCoords",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocTexCoords",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocTexCoords",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Vector2 *)(arg1)->allocTexCoords(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getIndicesSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getIndicesSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getIndicesSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getIndicesSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getIndicesSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getVerticesSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getVerticesSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getVerticesSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getVerticesSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getVerticesSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getNormalsSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getNormalsSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getNormalsSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getNormalsSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getNormalsSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getTangentsSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getTangentsSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getTangentsSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getTangentsSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getTangentsSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getTexCoordsSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getTexCoordsSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getTexCoordsSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getTexCoordsSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getTexCoordsSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getColorsSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getColorsSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getColorsSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getColorsSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getColorsSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getIndicesType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  VAR_TYPES result;
  
  SWIG_check_num_args("Neo::SubMesh::getIndicesType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getIndicesType",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getIndicesType",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (arg1)->getIndicesType();
  {
    VAR_TYPES * resultptr = new VAR_TYPES((const VAR_TYPES &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_VAR_TYPES,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getIndices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getIndices",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getIndices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (void *)(arg1)->getIndices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getColors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getColors",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getColors",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Color *)(arg1)->getColors();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getVertices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getVertices",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getVertices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector3 *)(arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getNormals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getNormals",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getNormals",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector3 *)(arg1)->getNormals();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getTangents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getTangents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getTangents",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getTangents",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector3 *)(arg1)->getTangents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getTexCoords(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getTexCoords",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getTexCoords",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector2 *)(arg1)->getTexCoords();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearVBO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearVBO",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearVBO",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearVBO();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getVBOid1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getVBOid1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getVBOid1",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getVBOid1",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int *)(arg1)->getVBOid1();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getVBOid2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getVBOid2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getVBOid2",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getVBOid2",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int *)(arg1)->getVBOid2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearMapChannelOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearMapChannelOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearMapChannelOffset",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearMapChannelOffset",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearMapChannelOffset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_setMapChannelOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::SubMesh::setMapChannelOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::setMapChannelOffset",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::setMapChannelOffset",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SubMesh::setMapChannelOffset",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_setMapChannelOffset",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setMapChannelOffset(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_isMapChannelExist(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::SubMesh::isMapChannelExist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::isMapChannelExist",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::isMapChannelExist",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_isMapChannelExist",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isMapChannelExist(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getMapChannelOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getMapChannelOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getMapChannelOffset",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::getMapChannelOffset",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getMapChannelOffset",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->getMapChannelOffset(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getMapChannelOffsets(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  map< unsigned int,unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getMapChannelOffsets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getMapChannelOffsets",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getMapChannelOffsets",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (map< unsigned int,unsigned int > *)(arg1)->getMapChannelOffsets();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mapT_unsigned_int_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocDisplays(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocDisplays",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocDisplays",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocDisplays",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocDisplays",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocDisplays(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearDisplays(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearDisplays",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearDisplays",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearDisplays",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearDisplays();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_addNewDisplay(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  PRIMITIVE_TYPES *argp2 ;
  Neo::MaterialDisplay *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::addNewDisplay",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::addNewDisplay",1,"Neo::SubMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::SubMesh::addNewDisplay",2,"PRIMITIVE_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SubMesh::addNewDisplay",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::SubMesh::addNewDisplay",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_addNewDisplay",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_PRIMITIVE_TYPES,0))){
    SWIG_fail_ptr("SubMesh_addNewDisplay",2,SWIGTYPE_p_PRIMITIVE_TYPES);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Neo::MaterialDisplay *)(arg1)->addNewDisplay(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialDisplay,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getDisplaysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getDisplaysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getDisplaysNumber",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getDisplaysNumber",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getDisplaysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getDisplay(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::MaterialDisplay *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getDisplay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getDisplay",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::getDisplay",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getDisplay",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::MaterialDisplay *)(arg1)->getDisplay(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialDisplay,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getBoundingBox",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getBoundingBox",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Box3d *)(arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Box3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_hasTransparency(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::SubMesh::hasTransparency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::hasTransparency",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_hasTransparency",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (bool)(arg1)->hasTransparency();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SubMesh(void *obj) {
Neo::SubMesh *arg1 = (Neo::SubMesh *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_SubMesh_methods[] = {
    {"clearMorphingData", _wrap_SubMesh_clearMorphingData}, 
    {"createMorphingData", _wrap_SubMesh_createMorphingData}, 
    {"getMorphingData", _wrap_SubMesh_getMorphingData}, 
    {"clearSkinData", _wrap_SubMesh_clearSkinData}, 
    {"createSkinData", _wrap_SubMesh_createSkinData}, 
    {"getSkinData", _wrap_SubMesh_getSkinData}, 
    {"clearIndices", _wrap_SubMesh_clearIndices}, 
    {"clearVertices", _wrap_SubMesh_clearVertices}, 
    {"clearNormals", _wrap_SubMesh_clearNormals}, 
    {"clearTangents", _wrap_SubMesh_clearTangents}, 
    {"clearTexCoords", _wrap_SubMesh_clearTexCoords}, 
    {"clearColors", _wrap_SubMesh_clearColors}, 
    {"allocIndices", _wrap_SubMesh_allocIndices}, 
    {"allocColors", _wrap_SubMesh_allocColors}, 
    {"allocVertices", _wrap_SubMesh_allocVertices}, 
    {"allocNormals", _wrap_SubMesh_allocNormals}, 
    {"allocTangents", _wrap_SubMesh_allocTangents}, 
    {"allocTexCoords", _wrap_SubMesh_allocTexCoords}, 
    {"getIndicesSize", _wrap_SubMesh_getIndicesSize}, 
    {"getVerticesSize", _wrap_SubMesh_getVerticesSize}, 
    {"getNormalsSize", _wrap_SubMesh_getNormalsSize}, 
    {"getTangentsSize", _wrap_SubMesh_getTangentsSize}, 
    {"getTexCoordsSize", _wrap_SubMesh_getTexCoordsSize}, 
    {"getColorsSize", _wrap_SubMesh_getColorsSize}, 
    {"getIndicesType", _wrap_SubMesh_getIndicesType}, 
    {"getIndices", _wrap_SubMesh_getIndices}, 
    {"getColors", _wrap_SubMesh_getColors}, 
    {"getVertices", _wrap_SubMesh_getVertices}, 
    {"getNormals", _wrap_SubMesh_getNormals}, 
    {"getTangents", _wrap_SubMesh_getTangents}, 
    {"getTexCoords", _wrap_SubMesh_getTexCoords}, 
    {"clearVBO", _wrap_SubMesh_clearVBO}, 
    {"getVBOid1", _wrap_SubMesh_getVBOid1}, 
    {"getVBOid2", _wrap_SubMesh_getVBOid2}, 
    {"clearMapChannelOffset", _wrap_SubMesh_clearMapChannelOffset}, 
    {"setMapChannelOffset", _wrap_SubMesh_setMapChannelOffset}, 
    {"isMapChannelExist", _wrap_SubMesh_isMapChannelExist}, 
    {"getMapChannelOffset", _wrap_SubMesh_getMapChannelOffset}, 
    {"getMapChannelOffsets", _wrap_SubMesh_getMapChannelOffsets}, 
    {"allocDisplays", _wrap_SubMesh_allocDisplays}, 
    {"clearDisplays", _wrap_SubMesh_clearDisplays}, 
    {"addNewDisplay", _wrap_SubMesh_addNewDisplay}, 
    {"getDisplaysNumber", _wrap_SubMesh_getDisplaysNumber}, 
    {"getDisplay", _wrap_SubMesh_getDisplay}, 
    {"getBoundingBox", _wrap_SubMesh_getBoundingBox}, 
    {"hasTransparency", _wrap_SubMesh_hasTransparency}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_SubMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_SubMesh_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_SubMesh_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_SubMesh_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_SubMesh_bases[] = {0};
static const char *swig_Neo_SubMesh_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_SubMesh = { "SubMesh", &SWIGTYPE_p_Neo__SubMesh,_wrap_new_SubMesh, swig_delete_SubMesh, swig_Neo_SubMesh_methods, swig_Neo_SubMesh_attributes, { "SubMesh", swig_Neo_SubMesh_cls_methods, swig_Neo_SubMesh_cls_attributes, swig_Neo_SubMesh_cls_constants }, swig_Neo_SubMesh_bases, swig_Neo_SubMesh_base_names };

static int _wrap_new_AnimRange(lua_State* L) {
  int SWIG_arg = 0;
  Neo::AnimRange *result = 0 ;
  
  SWIG_check_num_args("Neo::AnimRange::AnimRange",0,0)
  result = (Neo::AnimRange *)new Neo::AnimRange();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__AnimRange,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimRange_loops_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::AnimRange *arg1 = (Neo::AnimRange *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::AnimRange::loops",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::AnimRange::loops",1,"Neo::AnimRange *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::AnimRange::loops",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__AnimRange,0))){
    SWIG_fail_ptr("AnimRange_loops_set",1,SWIGTYPE_p_Neo__AnimRange);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->loops = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimRange_loops_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::AnimRange *arg1 = (Neo::AnimRange *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::AnimRange::loops",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::AnimRange::loops",1,"Neo::AnimRange *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__AnimRange,0))){
    SWIG_fail_ptr("AnimRange_loops_get",1,SWIGTYPE_p_Neo__AnimRange);
  }
  
  result = (int) ((arg1)->loops);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnimRange(void *obj) {
Neo::AnimRange *arg1 = (Neo::AnimRange *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_AnimRange_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Neo_AnimRange_attributes[] = {
    { "loops", _wrap_AnimRange_loops_get, _wrap_AnimRange_loops_set},
    {0,0,0}
};
static swig_lua_attribute swig_Neo_AnimRange_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_AnimRange_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_AnimRange_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_AnimRange_bases[] = {0};
static const char *swig_Neo_AnimRange_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_AnimRange = { "AnimRange", &SWIGTYPE_p_Neo__AnimRange,_wrap_new_AnimRange, swig_delete_AnimRange, swig_Neo_AnimRange_methods, swig_Neo_AnimRange_attributes, { "AnimRange", swig_Neo_AnimRange_cls_methods, swig_Neo_AnimRange_cls_attributes, swig_Neo_AnimRange_cls_constants }, swig_Neo_AnimRange_bases, swig_Neo_AnimRange_base_names };

static int _wrap_new_Mesh(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::Mesh",0,0)
  result = (Neo::Mesh *)new Neo::Mesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Mesh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getNew",0,0)
  result = (Neo::Mesh *)Neo::Mesh::getNew();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Mesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::destroy",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_destroy",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clear",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clear",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearAnimsRanges(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearAnimsRanges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearAnimsRanges",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearAnimsRanges",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearAnimsRanges();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_allocAnimsRanges(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::AnimRange *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::allocAnimsRanges",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::allocAnimsRanges",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::allocAnimsRanges",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_allocAnimsRanges",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::AnimRange *)(arg1)->allocAnimsRanges(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__AnimRange,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getAnimsRangesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Mesh::getAnimsRangesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getAnimsRangesNumber",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getAnimsRangesNumber",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (unsigned int)(arg1)->getAnimsRangesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getAnimsRanges(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::AnimRange *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getAnimsRanges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getAnimsRanges",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getAnimsRanges",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::AnimRange *)(arg1)->getAnimsRanges();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__AnimRange,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_setArmatureAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::ArmatureAnimRef *arg2 = (Neo::ArmatureAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::setArmatureAnimRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::setArmatureAnimRef",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Mesh::setArmatureAnimRef",2,"Neo::ArmatureAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_setArmatureAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__ArmatureAnimRef,0))){
    SWIG_fail_ptr("Mesh_setArmatureAnimRef",2,SWIGTYPE_p_Neo__ArmatureAnimRef);
  }
  
  (arg1)->setArmatureAnimRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getArmatureAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getArmatureAnimRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getArmatureAnimRef",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getArmatureAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::ArmatureAnimRef *)(arg1)->getArmatureAnimRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getArmatureAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  ArmatureAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getArmatureAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getArmatureAnim",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getArmatureAnim",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (ArmatureAnim *)(arg1)->getArmatureAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ArmatureAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_setTexturesAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TexturesAnimRef *arg2 = (Neo::TexturesAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::setTexturesAnimRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::setTexturesAnimRef",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Mesh::setTexturesAnimRef",2,"Neo::TexturesAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_setTexturesAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TexturesAnimRef,0))){
    SWIG_fail_ptr("Mesh_setTexturesAnimRef",2,SWIGTYPE_p_Neo__TexturesAnimRef);
  }
  
  (arg1)->setTexturesAnimRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getTexturesAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getTexturesAnimRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getTexturesAnimRef",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getTexturesAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::TexturesAnimRef *)(arg1)->getTexturesAnimRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getTexturesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  TexturesAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getTexturesAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getTexturesAnim",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getTexturesAnim",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (TexturesAnim *)(arg1)->getTexturesAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TexturesAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_setMaterialsAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::MaterialsAnimRef *arg2 = (Neo::MaterialsAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::setMaterialsAnimRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::setMaterialsAnimRef",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Mesh::setMaterialsAnimRef",2,"Neo::MaterialsAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_setMaterialsAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__MaterialsAnimRef,0))){
    SWIG_fail_ptr("Mesh_setMaterialsAnimRef",2,SWIGTYPE_p_Neo__MaterialsAnimRef);
  }
  
  (arg1)->setMaterialsAnimRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getMaterialsAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getMaterialsAnimRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getMaterialsAnimRef",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getMaterialsAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::MaterialsAnimRef *)(arg1)->getMaterialsAnimRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getMaterialsAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  MaterialsAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getMaterialsAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getMaterialsAnim",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getMaterialsAnim",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (MaterialsAnim *)(arg1)->getMaterialsAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MaterialsAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearArmature(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearArmature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearArmature",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearArmature",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearArmature();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_createArmature(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Armature *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::createArmature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::createArmature",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_createArmature",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Armature *)(arg1)->createArmature();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Armature,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getArmature(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Armature *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getArmature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getArmature",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getArmature",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Armature *)(arg1)->getArmature();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Armature,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_allocTextures(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Mesh::allocTextures",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::allocTextures",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::allocTextures",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_allocTextures",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocTextures(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearTextures(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearTextures",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearTextures",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearTextures();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_addNewTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::addNewTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::addNewTexture",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Mesh::addNewTexture",2,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_addNewTexture",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("Mesh_addNewTexture",2,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (Texture *)(arg1)->addNewTexture(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getTexturesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Mesh::getTexturesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getTexturesNumber",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getTexturesNumber",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (unsigned int)(arg1)->getTexturesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getTexture",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::getTexture",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getTexture",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Texture *)(arg1)->getTexture(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_allocMaterials(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Mesh::allocMaterials",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::allocMaterials",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::allocMaterials",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_allocMaterials",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocMaterials(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearMaterials(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearMaterials",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearMaterials",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearMaterials",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearMaterials();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_addNewMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::addNewMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::addNewMaterial",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_addNewMaterial",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::Material *)(arg1)->addNewMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getMaterialsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Mesh::getMaterialsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getMaterialsNumber",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getMaterialsNumber",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (unsigned int)(arg1)->getMaterialsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getMaterial",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::getMaterial",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getMaterial",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Material *)(arg1)->getMaterial(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearSubMeshs(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearSubMeshs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearSubMeshs",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearSubMeshs",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearSubMeshs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_allocSubMeshs(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::SubMesh *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::allocSubMeshs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::allocSubMeshs",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::allocSubMeshs",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_allocSubMeshs",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::SubMesh *)(arg1)->allocSubMeshs(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SubMesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getSubMeshsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Mesh::getSubMeshsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getSubMeshsNumber",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getSubMeshsNumber",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (unsigned int)(arg1)->getSubMeshsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getSubMeshs(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::SubMesh *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getSubMeshs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getSubMeshs",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getSubMeshs",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::SubMesh *)(arg1)->getSubMeshs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SubMesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_updateBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::updateBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::updateBoundingBox",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_updateBoundingBox",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->updateBoundingBox();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getBoundingBox",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getBoundingBox",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Box3d *)(arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Box3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mesh(void *obj) {
Neo::Mesh *arg1 = (Neo::Mesh *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Mesh_methods[] = {
    {"destroy", _wrap_Mesh_destroy}, 
    {"clear", _wrap_Mesh_clear}, 
    {"clearAnimsRanges", _wrap_Mesh_clearAnimsRanges}, 
    {"allocAnimsRanges", _wrap_Mesh_allocAnimsRanges}, 
    {"getAnimsRangesNumber", _wrap_Mesh_getAnimsRangesNumber}, 
    {"getAnimsRanges", _wrap_Mesh_getAnimsRanges}, 
    {"setArmatureAnimRef", _wrap_Mesh_setArmatureAnimRef}, 
    {"getArmatureAnimRef", _wrap_Mesh_getArmatureAnimRef}, 
    {"getArmatureAnim", _wrap_Mesh_getArmatureAnim}, 
    {"setTexturesAnimRef", _wrap_Mesh_setTexturesAnimRef}, 
    {"getTexturesAnimRef", _wrap_Mesh_getTexturesAnimRef}, 
    {"getTexturesAnim", _wrap_Mesh_getTexturesAnim}, 
    {"setMaterialsAnimRef", _wrap_Mesh_setMaterialsAnimRef}, 
    {"getMaterialsAnimRef", _wrap_Mesh_getMaterialsAnimRef}, 
    {"getMaterialsAnim", _wrap_Mesh_getMaterialsAnim}, 
    {"clearArmature", _wrap_Mesh_clearArmature}, 
    {"createArmature", _wrap_Mesh_createArmature}, 
    {"getArmature", _wrap_Mesh_getArmature}, 
    {"allocTextures", _wrap_Mesh_allocTextures}, 
    {"clearTextures", _wrap_Mesh_clearTextures}, 
    {"addNewTexture", _wrap_Mesh_addNewTexture}, 
    {"getTexturesNumber", _wrap_Mesh_getTexturesNumber}, 
    {"getTexture", _wrap_Mesh_getTexture}, 
    {"allocMaterials", _wrap_Mesh_allocMaterials}, 
    {"clearMaterials", _wrap_Mesh_clearMaterials}, 
    {"addNewMaterial", _wrap_Mesh_addNewMaterial}, 
    {"getMaterialsNumber", _wrap_Mesh_getMaterialsNumber}, 
    {"getMaterial", _wrap_Mesh_getMaterial}, 
    {"clearSubMeshs", _wrap_Mesh_clearSubMeshs}, 
    {"allocSubMeshs", _wrap_Mesh_allocSubMeshs}, 
    {"getSubMeshsNumber", _wrap_Mesh_getSubMeshsNumber}, 
    {"getSubMeshs", _wrap_Mesh_getSubMeshs}, 
    {"updateBoundingBox", _wrap_Mesh_updateBoundingBox}, 
    {"getBoundingBox", _wrap_Mesh_getBoundingBox}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Mesh_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Mesh_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Mesh_cls_methods[] = {
    {"getNew", _wrap_Mesh_getNew}, 
    {0,0}
};
static swig_lua_const_info swig_Neo_Mesh_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Mesh_bases[] = {0};
static const char *swig_Neo_Mesh_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Mesh = { "Mesh", &SWIGTYPE_p_Neo__Mesh,_wrap_new_Mesh, swig_delete_Mesh, swig_Neo_Mesh_methods, swig_Neo_Mesh_attributes, { "Mesh", swig_Neo_Mesh_cls_methods, swig_Neo_Mesh_cls_attributes, swig_Neo_Mesh_cls_constants }, swig_Neo_Mesh_bases, swig_Neo_Mesh_base_names };

static int _wrap_new_PhysicsConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::PhysicsConstraint",0,0)
  result = (Neo::PhysicsConstraint *)new Neo::PhysicsConstraint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::PhysicsConstraint",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::PhysicsConstraint",1,"Neo::PhysicsConstraint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("new_PhysicsConstraint",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::PhysicsConstraint *)new Neo::PhysicsConstraint((Neo::PhysicsConstraint const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsConstraint(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsConstraint__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsConstraint__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PhysicsConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsConstraint::PhysicsConstraint()\n"
    "    Neo::PhysicsConstraint::PhysicsConstraint(Neo::PhysicsConstraint const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsConstraint_constraintId_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::constraintId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::constraintId",1,"Neo::PhysicsConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::constraintId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_constraintId_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->constraintId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_constraintId_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::constraintId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::constraintId",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_constraintId_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (unsigned int) ((arg1)->constraintId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_parentObjectId_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::parentObjectId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::parentObjectId",1,"Neo::PhysicsConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::parentObjectId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentObjectId_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->parentObjectId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_parentObjectId_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::parentObjectId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::parentObjectId",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentObjectId_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (unsigned int) ((arg1)->parentObjectId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_parentName_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::parentName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::parentName",1,"Neo::PhysicsConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::parentName",2,"String");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentName_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_String,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentName_set",2,SWIGTYPE_p_String);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->parentName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_parentName_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  String result;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::parentName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::parentName",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentName_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result =  ((arg1)->parentName);
  {
    String * resultptr = new String((const String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_pivot_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::pivot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::pivot",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::pivot",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_pivot_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_pivot_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->pivot = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_pivot_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::pivot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::pivot",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_pivot_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->pivot);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_lowerLinearLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::lowerLinearLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerLinearLimit",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerLinearLimit",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerLinearLimit_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerLinearLimit_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->lowerLinearLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_lowerLinearLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::lowerLinearLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerLinearLimit",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerLinearLimit_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->lowerLinearLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_upperLinearLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::upperLinearLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::upperLinearLimit",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::upperLinearLimit",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperLinearLimit_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperLinearLimit_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->upperLinearLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_upperLinearLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::upperLinearLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::upperLinearLimit",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperLinearLimit_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->upperLinearLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_lowerAngularLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::lowerAngularLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerAngularLimit",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerAngularLimit",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerAngularLimit_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerAngularLimit_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->lowerAngularLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_lowerAngularLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::lowerAngularLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerAngularLimit",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerAngularLimit_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->lowerAngularLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_upperAngularLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::upperAngularLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::upperAngularLimit",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::upperAngularLimit",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperAngularLimit_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperAngularLimit_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->upperAngularLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_upperAngularLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::upperAngularLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::upperAngularLimit",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperAngularLimit_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->upperAngularLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_disableParentCollision_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::disableParentCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::disableParentCollision",1,"Neo::PhysicsConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::disableParentCollision",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_disableParentCollision_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->disableParentCollision = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_disableParentCollision_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::disableParentCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::disableParentCollision",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_disableParentCollision_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (bool) ((arg1)->disableParentCollision);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsConstraint(void *obj) {
Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_PhysicsConstraint_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Neo_PhysicsConstraint_attributes[] = {
    { "constraintId", _wrap_PhysicsConstraint_constraintId_get, _wrap_PhysicsConstraint_constraintId_set},
    { "parentObjectId", _wrap_PhysicsConstraint_parentObjectId_get, _wrap_PhysicsConstraint_parentObjectId_set},
    { "parentName", _wrap_PhysicsConstraint_parentName_get, _wrap_PhysicsConstraint_parentName_set},
    { "pivot", _wrap_PhysicsConstraint_pivot_get, _wrap_PhysicsConstraint_pivot_set},
    { "lowerLinearLimit", _wrap_PhysicsConstraint_lowerLinearLimit_get, _wrap_PhysicsConstraint_lowerLinearLimit_set},
    { "upperLinearLimit", _wrap_PhysicsConstraint_upperLinearLimit_get, _wrap_PhysicsConstraint_upperLinearLimit_set},
    { "lowerAngularLimit", _wrap_PhysicsConstraint_lowerAngularLimit_get, _wrap_PhysicsConstraint_lowerAngularLimit_set},
    { "upperAngularLimit", _wrap_PhysicsConstraint_upperAngularLimit_get, _wrap_PhysicsConstraint_upperAngularLimit_set},
    { "disableParentCollision", _wrap_PhysicsConstraint_disableParentCollision_get, _wrap_PhysicsConstraint_disableParentCollision_set},
    {0,0,0}
};
static swig_lua_attribute swig_Neo_PhysicsConstraint_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_PhysicsConstraint_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_PhysicsConstraint_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_PhysicsConstraint_bases[] = {0};
static const char *swig_Neo_PhysicsConstraint_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_PhysicsConstraint = { "PhysicsConstraint", &SWIGTYPE_p_Neo__PhysicsConstraint,_wrap_new_PhysicsConstraint, swig_delete_PhysicsConstraint, swig_Neo_PhysicsConstraint_methods, swig_Neo_PhysicsConstraint_attributes, { "PhysicsConstraint", swig_Neo_PhysicsConstraint_cls_methods, swig_Neo_PhysicsConstraint_cls_attributes, swig_Neo_PhysicsConstraint_cls_constants }, swig_Neo_PhysicsConstraint_bases, swig_Neo_PhysicsConstraint_base_names };

static int _wrap_new_PhysicsProperties__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::PhysicsProperties",0,0)
  result = (Neo::PhysicsProperties *)new Neo::PhysicsProperties();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsProperties__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::PhysicsProperties",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::PhysicsProperties",1,"Neo::PhysicsProperties const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("new_PhysicsProperties",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::PhysicsProperties *)new Neo::PhysicsProperties((Neo::PhysicsProperties const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsProperties(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsProperties__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsProperties, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsProperties__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PhysicsProperties'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsProperties::PhysicsProperties()\n"
    "    Neo::PhysicsProperties::PhysicsProperties(Neo::PhysicsProperties const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsProperties_deleteConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::deleteConstraint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::deleteConstraint",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_deleteConstraint",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  (arg1)->deleteConstraint();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_createConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::createConstraint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::createConstraint",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_createConstraint",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::PhysicsConstraint *)(arg1)->createConstraint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getConstraint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getConstraint",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getConstraint",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::PhysicsConstraint *)(arg1)->getConstraint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setShapeId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setShapeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setShapeId",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setShapeId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setShapeId",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setShapeId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getShapeId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getShapeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getShapeId",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getShapeId",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (unsigned int)(arg1)->getShapeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setCollisionObjectId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setCollisionObjectId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setCollisionObjectId",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setCollisionObjectId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setCollisionObjectId",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setCollisionObjectId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getCollisionObjectId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getCollisionObjectId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getCollisionObjectId",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getCollisionObjectId",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (unsigned int)(arg1)->getCollisionObjectId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::COLLISION_SHAPE_TYPE arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setCollisionShape",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setCollisionShape",2,"Neo::COLLISION_SHAPE_TYPE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setCollisionShape",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (Neo::COLLISION_SHAPE_TYPE)(int)lua_tonumber(L, 2);
  (arg1)->setCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::COLLISION_SHAPE_TYPE result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getCollisionShape",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getCollisionShape",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::COLLISION_SHAPE_TYPE)(arg1)->getCollisionShape();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setGhost(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setGhost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setGhost",1,"Neo::PhysicsProperties *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setGhost",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setGhost",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setGhost(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_isGhost(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::isGhost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::isGhost",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_isGhost",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (bool)(arg1)->isGhost();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setMass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setMass",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setMass",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setMass",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getMass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getMass",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getMass",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setFriction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setFriction",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setFriction",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setFriction",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setFriction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getFriction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getFriction",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getFriction",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getFriction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setRestitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setRestitution",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setRestitution",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setRestitution",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRestitution(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getRestitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getRestitution",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getRestitution",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getRestitution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setLinearDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setLinearDamping",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setLinearDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setLinearDamping",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLinearDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getLinearDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getLinearDamping",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getLinearDamping",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getLinearDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setAngularDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setAngularDamping",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setAngularDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setAngularDamping",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAngularDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getAngularDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getAngularDamping",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getAngularDamping",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getAngularDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setAngularFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setAngularFactor",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setAngularFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setAngularFactor",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAngularFactor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getAngularFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getAngularFactor",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getAngularFactor",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getAngularFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setLinearFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setLinearFactor",1,"Neo::PhysicsProperties *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setLinearFactor",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setLinearFactor",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsProperties_setLinearFactor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setLinearFactor((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getLinearFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getLinearFactor",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getLinearFactor",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::Vector3 *)(arg1)->getLinearFactor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsProperties(void *obj) {
Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_PhysicsProperties_methods[] = {
    {"deleteConstraint", _wrap_PhysicsProperties_deleteConstraint}, 
    {"createConstraint", _wrap_PhysicsProperties_createConstraint}, 
    {"getConstraint", _wrap_PhysicsProperties_getConstraint}, 
    {"setShapeId", _wrap_PhysicsProperties_setShapeId}, 
    {"getShapeId", _wrap_PhysicsProperties_getShapeId}, 
    {"setCollisionObjectId", _wrap_PhysicsProperties_setCollisionObjectId}, 
    {"getCollisionObjectId", _wrap_PhysicsProperties_getCollisionObjectId}, 
    {"setCollisionShape", _wrap_PhysicsProperties_setCollisionShape}, 
    {"getCollisionShape", _wrap_PhysicsProperties_getCollisionShape}, 
    {"setGhost", _wrap_PhysicsProperties_setGhost}, 
    {"isGhost", _wrap_PhysicsProperties_isGhost}, 
    {"setMass", _wrap_PhysicsProperties_setMass}, 
    {"getMass", _wrap_PhysicsProperties_getMass}, 
    {"setFriction", _wrap_PhysicsProperties_setFriction}, 
    {"getFriction", _wrap_PhysicsProperties_getFriction}, 
    {"setRestitution", _wrap_PhysicsProperties_setRestitution}, 
    {"getRestitution", _wrap_PhysicsProperties_getRestitution}, 
    {"setLinearDamping", _wrap_PhysicsProperties_setLinearDamping}, 
    {"getLinearDamping", _wrap_PhysicsProperties_getLinearDamping}, 
    {"setAngularDamping", _wrap_PhysicsProperties_setAngularDamping}, 
    {"getAngularDamping", _wrap_PhysicsProperties_getAngularDamping}, 
    {"setAngularFactor", _wrap_PhysicsProperties_setAngularFactor}, 
    {"getAngularFactor", _wrap_PhysicsProperties_getAngularFactor}, 
    {"setLinearFactor", _wrap_PhysicsProperties_setLinearFactor}, 
    {"getLinearFactor", _wrap_PhysicsProperties_getLinearFactor}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_PhysicsProperties_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_PhysicsProperties_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_PhysicsProperties_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_PhysicsProperties_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_PhysicsProperties_bases[] = {0};
static const char *swig_Neo_PhysicsProperties_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_PhysicsProperties = { "PhysicsProperties", &SWIGTYPE_p_Neo__PhysicsProperties,_wrap_new_PhysicsProperties, swig_delete_PhysicsProperties, swig_Neo_PhysicsProperties_methods, swig_Neo_PhysicsProperties_attributes, { "PhysicsProperties", swig_Neo_PhysicsProperties_cls_methods, swig_Neo_PhysicsProperties_cls_attributes, swig_Neo_PhysicsProperties_cls_constants }, swig_Neo_PhysicsProperties_bases, swig_Neo_PhysicsProperties_base_names };

static int _wrap_new_OEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MeshRef *arg1 = (Neo::MeshRef *) 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::OEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::OEntity",1,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("new_OEntity",1,SWIGTYPE_p_Neo__MeshRef);
  }
  
  result = (Neo::OEntity *)new Neo::OEntity(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::OEntity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OEntity::OEntity",1,"Neo::OEntity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("new_OEntity",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::OEntity *)new Neo::OEntity((Neo::OEntity const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OEntity(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__MeshRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OEntity__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OEntity__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OEntity::OEntity(Neo::MeshRef *)\n"
    "    Neo::OEntity::OEntity(Neo::OEntity const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OEntity_enableOccluder(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::enableOccluder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::enableOccluder",1,"Neo::OEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OEntity::enableOccluder",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_enableOccluder",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableOccluder(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_isOccluder(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::isOccluder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::isOccluder",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_isOccluder",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->isOccluder();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OEntity::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getType",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getType",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::setActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setActive",1,"Neo::OEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OEntity::setActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setActive",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setActive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setInvisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::setInvisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setInvisible",1,"Neo::OEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OEntity::setInvisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setInvisible",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInvisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_isInvisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::isInvisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::isInvisible",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_isInvisible",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->isInvisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getMesh(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::Mesh *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getMesh",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getMesh",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::Mesh *)(arg1)->getMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Mesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setMeshRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::MeshRef *arg2 = (Neo::MeshRef *) 0 ;
  
  SWIG_check_num_args("Neo::OEntity::setMeshRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setMeshRef",1,"Neo::OEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OEntity::setMeshRef",2,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setMeshRef",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("OEntity_setMeshRef",2,SWIGTYPE_p_Neo__MeshRef);
  }
  
  (arg1)->setMeshRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getMeshRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getMeshRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getMeshRef",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getMeshRef",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::MeshRef *)(arg1)->getMeshRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MeshRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_changeAnimation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::changeAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::changeAnimation",1,"Neo::OEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OEntity::changeAnimation",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_changeAnimation",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->changeAnimation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_isAnimationOver(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::isAnimationOver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::isAnimationOver",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_isAnimationOver",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->isAnimationOver();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setAnimationSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::setAnimationSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setAnimationSpeed",1,"Neo::OEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OEntity::setAnimationSpeed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setAnimationSpeed",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAnimationSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setCurrentFrame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::setCurrentFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setCurrentFrame",1,"Neo::OEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OEntity::setCurrentFrame",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setCurrentFrame",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCurrentFrame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getAnimationId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::OEntity::getAnimationId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getAnimationId",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getAnimationId",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (unsigned int)(arg1)->getAnimationId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getAnimationSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OEntity::getAnimationSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getAnimationSpeed",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getAnimationSpeed",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (float)(arg1)->getAnimationSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getCurrentFrame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OEntity::getCurrentFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getCurrentFrame",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getCurrentFrame",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (float)(arg1)->getCurrentFrame();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_deletePhysicsProperties(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::OEntity::deletePhysicsProperties",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::deletePhysicsProperties",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_deletePhysicsProperties",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->deletePhysicsProperties();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_createPhysicsProperties(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::createPhysicsProperties",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::createPhysicsProperties",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_createPhysicsProperties",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::PhysicsProperties *)(arg1)->createPhysicsProperties();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getPhysicsProperties(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getPhysicsProperties",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getPhysicsProperties",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getPhysicsProperties",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::PhysicsProperties *)(arg1)->getPhysicsProperties();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getBoundingBox",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getBoundingBox",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Box3d *)(arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Box3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_hasShadow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::hasShadow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::hasShadow",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_hasShadow",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->hasShadow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_enableShadow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::enableShadow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::enableShadow",1,"Neo::OEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OEntity::enableShadow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_enableShadow",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableShadow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::OEntity::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::update",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_update",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_updateVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OEntity::updateVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::updateVisibility",1,"Neo::OEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OEntity::updateVisibility",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_updateVisibility",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OEntity_updateVisibility",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OEntity(void *obj) {
Neo::OEntity *arg1 = (Neo::OEntity *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_OEntity_methods[] = {
    {"enableOccluder", _wrap_OEntity_enableOccluder}, 
    {"isOccluder", _wrap_OEntity_isOccluder}, 
    {"getType", _wrap_OEntity_getType}, 
    {"setActive", _wrap_OEntity_setActive}, 
    {"setInvisible", _wrap_OEntity_setInvisible}, 
    {"isInvisible", _wrap_OEntity_isInvisible}, 
    {"getMesh", _wrap_OEntity_getMesh}, 
    {"setMeshRef", _wrap_OEntity_setMeshRef}, 
    {"getMeshRef", _wrap_OEntity_getMeshRef}, 
    {"changeAnimation", _wrap_OEntity_changeAnimation}, 
    {"isAnimationOver", _wrap_OEntity_isAnimationOver}, 
    {"setAnimationSpeed", _wrap_OEntity_setAnimationSpeed}, 
    {"setCurrentFrame", _wrap_OEntity_setCurrentFrame}, 
    {"getAnimationId", _wrap_OEntity_getAnimationId}, 
    {"getAnimationSpeed", _wrap_OEntity_getAnimationSpeed}, 
    {"getCurrentFrame", _wrap_OEntity_getCurrentFrame}, 
    {"deletePhysicsProperties", _wrap_OEntity_deletePhysicsProperties}, 
    {"createPhysicsProperties", _wrap_OEntity_createPhysicsProperties}, 
    {"getPhysicsProperties", _wrap_OEntity_getPhysicsProperties}, 
    {"getBoundingBox", _wrap_OEntity_getBoundingBox}, 
    {"hasShadow", _wrap_OEntity_hasShadow}, 
    {"enableShadow", _wrap_OEntity_enableShadow}, 
    {"update", _wrap_OEntity_update}, 
    {"updateVisibility", _wrap_OEntity_updateVisibility}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_OEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_OEntity_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_OEntity_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_OEntity_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_OEntity_bases[] = {0,0};
static const char *swig_Neo_OEntity_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_Neo_OEntity = { "OEntity", &SWIGTYPE_p_Neo__OEntity,_wrap_new_OEntity, swig_delete_OEntity, swig_Neo_OEntity_methods, swig_Neo_OEntity_attributes, { "OEntity", swig_Neo_OEntity_cls_methods, swig_Neo_OEntity_cls_attributes, swig_Neo_OEntity_cls_constants }, swig_Neo_OEntity_bases, swig_Neo_OEntity_base_names };

static int _wrap_new_OLight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::OLight::OLight",0,0)
  result = (Neo::OLight *)new Neo::OLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OLight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = 0 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::OLight::OLight",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OLight::OLight",1,"Neo::OLight const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("new_OLight",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (Neo::OLight *)new Neo::OLight((Neo::OLight const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OLight(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OLight__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OLight, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OLight__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OLight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OLight::OLight()\n"
    "    Neo::OLight::OLight(Neo::OLight const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OLight_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OLight::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getType",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getType",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setLightType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::LIGHT_TYPES arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setLightType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setLightType",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setLightType",2,"Neo::LIGHT_TYPES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setLightType",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (Neo::LIGHT_TYPES)(int)lua_tonumber(L, 2);
  (arg1)->setLightType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getLightType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::LIGHT_TYPES result;
  
  SWIG_check_num_args("Neo::OLight::getLightType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getLightType",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getLightType",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (Neo::LIGHT_TYPES)(arg1)->getLightType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_castShadow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OLight::castShadow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::castShadow",1,"Neo::OLight *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OLight::castShadow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_castShadow",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->castShadow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setShadowQuality(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setShadowQuality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setShadowQuality",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setShadowQuality",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setShadowQuality",1,SWIGTYPE_p_Neo__OLight);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setShadowQuality(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setShadowBias(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setShadowBias",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setShadowBias",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setShadowBias",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setShadowBias",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setShadowBias(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setShadowBlur(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setShadowBlur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setShadowBlur",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setShadowBlur",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setShadowBlur",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setShadowBlur(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_isCastingShadow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OLight::isCastingShadow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::isCastingShadow",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_isCastingShadow",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (bool)(arg1)->isCastingShadow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getShadowQuality(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::OLight::getShadowQuality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getShadowQuality",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getShadowQuality",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (unsigned int)(arg1)->getShadowQuality();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getShadowBias(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getShadowBias",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getShadowBias",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getShadowBias",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getShadowBias();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getShadowBlur(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getShadowBlur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getShadowBlur",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getShadowBlur",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getShadowBlur();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setRadius",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setRadius",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setRadius",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getRadius",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getRadius",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setIntensity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setIntensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setIntensity",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setIntensity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setIntensity",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setIntensity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::OLight::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setColor",1,"Neo::OLight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OLight::setColor",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setColor",1,SWIGTYPE_p_Neo__OLight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OLight_setColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setColor((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getIntensity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getIntensity",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getIntensity",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getIntensity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OLight::getColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getColor",1,"Neo::OLight const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getColor",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = ((Neo::OLight const *)arg1)->getColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getFinalColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OLight::getFinalColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getFinalColor",1,"Neo::OLight const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getFinalColor",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = ((Neo::OLight const *)arg1)->getFinalColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setSpotAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setSpotAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setSpotAngle",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setSpotAngle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setSpotAngle",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpotAngle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setSpotExponent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setSpotExponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setSpotExponent",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setSpotExponent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setSpotExponent",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpotExponent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getSpotAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getSpotAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getSpotAngle",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getSpotAngle",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getSpotAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getSpotExponent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getSpotExponent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getSpotExponent",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getSpotExponent",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getSpotExponent();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_updateVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OLight::updateVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::updateVisibility",1,"Neo::OLight *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OLight::updateVisibility",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_updateVisibility",1,SWIGTYPE_p_Neo__OLight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OLight_updateVisibility",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OLight(void *obj) {
Neo::OLight *arg1 = (Neo::OLight *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_OLight_methods[] = {
    {"getType", _wrap_OLight_getType}, 
    {"setLightType", _wrap_OLight_setLightType}, 
    {"getLightType", _wrap_OLight_getLightType}, 
    {"castShadow", _wrap_OLight_castShadow}, 
    {"setShadowQuality", _wrap_OLight_setShadowQuality}, 
    {"setShadowBias", _wrap_OLight_setShadowBias}, 
    {"setShadowBlur", _wrap_OLight_setShadowBlur}, 
    {"isCastingShadow", _wrap_OLight_isCastingShadow}, 
    {"getShadowQuality", _wrap_OLight_getShadowQuality}, 
    {"getShadowBias", _wrap_OLight_getShadowBias}, 
    {"getShadowBlur", _wrap_OLight_getShadowBlur}, 
    {"setRadius", _wrap_OLight_setRadius}, 
    {"getRadius", _wrap_OLight_getRadius}, 
    {"setIntensity", _wrap_OLight_setIntensity}, 
    {"setColor", _wrap_OLight_setColor}, 
    {"getIntensity", _wrap_OLight_getIntensity}, 
    {"getColor", _wrap_OLight_getColor}, 
    {"getFinalColor", _wrap_OLight_getFinalColor}, 
    {"setSpotAngle", _wrap_OLight_setSpotAngle}, 
    {"setSpotExponent", _wrap_OLight_setSpotExponent}, 
    {"getSpotAngle", _wrap_OLight_getSpotAngle}, 
    {"getSpotExponent", _wrap_OLight_getSpotExponent}, 
    {"updateVisibility", _wrap_OLight_updateVisibility}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_OLight_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_OLight_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_OLight_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_OLight_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_OLight_bases[] = {0,0};
static const char *swig_Neo_OLight_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_Neo_OLight = { "OLight", &SWIGTYPE_p_Neo__OLight,_wrap_new_OLight, swig_delete_OLight, swig_Neo_OLight_methods, swig_Neo_OLight_attributes, { "OLight", swig_Neo_OLight_cls_methods, swig_Neo_OLight_cls_attributes, swig_Neo_OLight_cls_constants }, swig_Neo_OLight_bases, swig_Neo_OLight_base_names };

static int _wrap_new_OSound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::OSound::OSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::OSound",1,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("new_OSound",1,SWIGTYPE_p_Neo__SoundRef);
  }
  
  result = (Neo::OSound *)new Neo::OSound(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OSound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::OSound::OSound",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OSound::OSound",1,"Neo::OSound const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("new_OSound",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (Neo::OSound *)new Neo::OSound((Neo::OSound const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OSound(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__SoundRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OSound__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OSound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OSound__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OSound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OSound::OSound(Neo::SoundRef *)\n"
    "    Neo::OSound::OSound(Neo::OSound const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OSound_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OSound::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getType",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getType",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setSoundRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  Neo::SoundRef *arg2 = (Neo::SoundRef *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::setSoundRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setSoundRef",1,"Neo::OSound *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OSound::setSoundRef",2,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setSoundRef",1,SWIGTYPE_p_Neo__OSound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("OSound_setSoundRef",2,SWIGTYPE_p_Neo__SoundRef);
  }
  
  (arg1)->setSoundRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getSoundRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OSound::getSoundRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getSoundRef",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getSoundRef",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (Neo::SoundRef *)(arg1)->getSoundRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SoundRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getSourceId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::OSound::getSourceId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getSourceId",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getSourceId",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (unsigned int)(arg1)->getSourceId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setLooping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setLooping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setLooping",1,"Neo::OSound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OSound::setLooping",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setLooping",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setLooping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setRelative(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setRelative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setRelative",1,"Neo::OSound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OSound::setRelative",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setRelative",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRelative(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setPitch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setPitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setPitch",1,"Neo::OSound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OSound::setPitch",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setPitch",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setPitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setGain",1,"Neo::OSound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OSound::setGain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setGain",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setRadius",1,"Neo::OSound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OSound::setRadius",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setRadius",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setRolloff(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setRolloff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setRolloff",1,"Neo::OSound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OSound::setRolloff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setRolloff",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRolloff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OSound::isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::isPlaying",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_isPlaying",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (bool)(arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_isLooping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OSound::isLooping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::isLooping",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_isLooping",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (bool)(arg1)->isLooping();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_isRelative(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OSound::isRelative",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::isRelative",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_isRelative",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (bool)(arg1)->isRelative();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getPitch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getPitch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getPitch",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getPitch",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getPitch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getGain(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getGain",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getGain",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getGain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getRadius",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getRadius",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getRolloff(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getRolloff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getRolloff",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getRolloff",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getRolloff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getTimePos(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getTimePos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getTimePos",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getTimePos",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getTimePos();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getSoundDuration(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getSoundDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getSoundDuration",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getSoundDuration",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getSoundDuration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_play(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::play",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_play",1,SWIGTYPE_p_Neo__OSound);
  }
  
  (arg1)->play();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_pause(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::pause",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_pause",1,SWIGTYPE_p_Neo__OSound);
  }
  
  (arg1)->pause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_stop(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::stop",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_stop",1,SWIGTYPE_p_Neo__OSound);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::update",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_update",1,SWIGTYPE_p_Neo__OSound);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OSound(void *obj) {
Neo::OSound *arg1 = (Neo::OSound *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_OSound_methods[] = {
    {"getType", _wrap_OSound_getType}, 
    {"setSoundRef", _wrap_OSound_setSoundRef}, 
    {"getSoundRef", _wrap_OSound_getSoundRef}, 
    {"getSourceId", _wrap_OSound_getSourceId}, 
    {"setLooping", _wrap_OSound_setLooping}, 
    {"setRelative", _wrap_OSound_setRelative}, 
    {"setPitch", _wrap_OSound_setPitch}, 
    {"setGain", _wrap_OSound_setGain}, 
    {"setRadius", _wrap_OSound_setRadius}, 
    {"setRolloff", _wrap_OSound_setRolloff}, 
    {"isPlaying", _wrap_OSound_isPlaying}, 
    {"isLooping", _wrap_OSound_isLooping}, 
    {"isRelative", _wrap_OSound_isRelative}, 
    {"getPitch", _wrap_OSound_getPitch}, 
    {"getGain", _wrap_OSound_getGain}, 
    {"getRadius", _wrap_OSound_getRadius}, 
    {"getRolloff", _wrap_OSound_getRolloff}, 
    {"getTimePos", _wrap_OSound_getTimePos}, 
    {"getSoundDuration", _wrap_OSound_getSoundDuration}, 
    {"play", _wrap_OSound_play}, 
    {"pause", _wrap_OSound_pause}, 
    {"stop", _wrap_OSound_stop}, 
    {"update", _wrap_OSound_update}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_OSound_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_OSound_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_OSound_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_OSound_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_OSound_bases[] = {0,0};
static const char *swig_Neo_OSound_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_Neo_OSound = { "OSound", &SWIGTYPE_p_Neo__OSound,_wrap_new_OSound, swig_delete_OSound, swig_Neo_OSound_methods, swig_Neo_OSound_attributes, { "OSound", swig_Neo_OSound_cls_methods, swig_Neo_OSound_cls_attributes, swig_Neo_OSound_cls_constants }, swig_Neo_OSound_bases, swig_Neo_OSound_base_names };

static int _wrap_new_OText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FontRef *arg1 = (Neo::FontRef *) 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::OText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::OText",1,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("new_OText",1,SWIGTYPE_p_Neo__FontRef);
  }
  
  result = (Neo::OText *)new Neo::OText(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::OText",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OText::OText",1,"Neo::OText const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("new_OText",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::OText *)new Neo::OText((Neo::OText const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OText(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__FontRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OText__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OText__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OText::OText(Neo::FontRef *)\n"
    "    Neo::OText::OText(Neo::OText const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OText_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OText::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getType",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getType",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setFontRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::FontRef *arg2 = (Neo::FontRef *) 0 ;
  
  SWIG_check_num_args("Neo::OText::setFontRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setFontRef",1,"Neo::OText *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OText::setFontRef",2,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setFontRef",1,SWIGTYPE_p_Neo__OText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("OText_setFontRef",2,SWIGTYPE_p_Neo__FontRef);
  }
  
  (arg1)->setFontRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getFont(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Font *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getFont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getFont",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getFont",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Font *)(arg1)->getFont();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Font,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getFontRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::FontRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getFontRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getFontRef",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getFontRef",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::FontRef *)(arg1)->getFontRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FontRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setText(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::OText::setText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setText",1,"Neo::OText *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::OText::setText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setText",1,SWIGTYPE_p_Neo__OText);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setText((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getText(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getText",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getText",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (char *)(arg1)->getText();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getLinesOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  vector< float > *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getLinesOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getLinesOffset",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getLinesOffset",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (vector< float > *)(arg1)->getLinesOffset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setAlign(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::TEXT_ALIGN_MODES arg2 ;
  
  SWIG_check_num_args("Neo::OText::setAlign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setAlign",1,"Neo::OText *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OText::setAlign",2,"Neo::TEXT_ALIGN_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setAlign",1,SWIGTYPE_p_Neo__OText);
  }
  
  arg2 = (Neo::TEXT_ALIGN_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setAlign(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getAlign(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::TEXT_ALIGN_MODES result;
  
  SWIG_check_num_args("Neo::OText::getAlign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getAlign",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getAlign",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::TEXT_ALIGN_MODES)(arg1)->getAlign();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OText::setSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setSize",1,"Neo::OText *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OText::setSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setSize",1,SWIGTYPE_p_Neo__OText);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OText::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getSize",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getSize",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (float)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::OText::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setColor",1,"Neo::OText *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OText::setColor",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setColor",1,SWIGTYPE_p_Neo__OText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("OText_setColor",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setColor((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::OText::getColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getColor",1,"Neo::OText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getColor",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = ((Neo::OText const *)arg1)->getColor();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getBoundingBox",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getBoundingBox",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Box3d *)(arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Box3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_updateVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OText::updateVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::updateVisibility",1,"Neo::OText *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OText::updateVisibility",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_updateVisibility",1,SWIGTYPE_p_Neo__OText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OText_updateVisibility",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OText(void *obj) {
Neo::OText *arg1 = (Neo::OText *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_OText_methods[] = {
    {"getType", _wrap_OText_getType}, 
    {"setFontRef", _wrap_OText_setFontRef}, 
    {"getFont", _wrap_OText_getFont}, 
    {"getFontRef", _wrap_OText_getFontRef}, 
    {"setText", _wrap_OText_setText}, 
    {"getText", _wrap_OText_getText}, 
    {"getLinesOffset", _wrap_OText_getLinesOffset}, 
    {"setAlign", _wrap_OText_setAlign}, 
    {"getAlign", _wrap_OText_getAlign}, 
    {"setSize", _wrap_OText_setSize}, 
    {"getSize", _wrap_OText_getSize}, 
    {"setColor", _wrap_OText_setColor}, 
    {"getColor", _wrap_OText_getColor}, 
    {"getBoundingBox", _wrap_OText_getBoundingBox}, 
    {"updateVisibility", _wrap_OText_updateVisibility}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_OText_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_OText_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_OText_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_OText_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_OText_bases[] = {0,0};
static const char *swig_Neo_OText_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_Neo_OText = { "OText", &SWIGTYPE_p_Neo__OText,_wrap_new_OText, swig_delete_OText, swig_Neo_OText_methods, swig_Neo_OText_attributes, { "OText", swig_Neo_OText_cls_methods, swig_Neo_OText_cls_attributes, swig_Neo_OText_cls_constants }, swig_Neo_OText_bases, swig_Neo_OText_base_names };

static int _wrap_new_OCamera__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::OCamera",0,0)
  result = (Neo::OCamera *)new Neo::OCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OCamera__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::OCamera",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OCamera::OCamera",1,"Neo::OCamera const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("new_OCamera",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::OCamera *)new Neo::OCamera((Neo::OCamera const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OCamera(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OCamera__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OCamera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OCamera__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OCamera'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OCamera::OCamera()\n"
    "    Neo::OCamera::OCamera(Neo::OCamera const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OCamera_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OCamera::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getType",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getType",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_enableFog(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::enableFog",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::enableFog",1,"Neo::OCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OCamera::enableFog",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_enableFog",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableFog(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getFogColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OCamera::getFogColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getFogColor",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getFogColor",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (arg1)->getFogColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setFogColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Neo::OCamera::setFogColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setFogColor",1,"Neo::OCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OCamera::setFogColor",2,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setFogColor",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OCamera_setFogColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->setFogColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_enableOrtho(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::enableOrtho",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::enableOrtho",1,"Neo::OCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OCamera::enableOrtho",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_enableOrtho",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableOrtho(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setFov(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setFov",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setFov",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setFov",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setFov",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setFov(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setFogDistance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setFogDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setFogDistance",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setFogDistance",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setFogDistance",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setFogDistance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setClippingNear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setClippingNear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setClippingNear",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setClippingNear",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setClippingNear",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setClippingNear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setClippingFar(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setClippingFar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setClippingFar",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setClippingFar",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setClippingFar",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setClippingFar(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_isOrtho(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OCamera::isOrtho",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::isOrtho",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_isOrtho",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (bool)(arg1)->isOrtho();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_hasFog(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OCamera::hasFog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::hasFog",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_hasFog",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (bool)(arg1)->hasFog();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getClippingNear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OCamera::getClippingNear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getClippingNear",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getClippingNear",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (float)(arg1)->getClippingNear();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getClippingFar(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OCamera::getClippingFar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getClippingFar",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getClippingFar",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (float)(arg1)->getClippingFar();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getFov(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OCamera::getFov",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getFov",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getFov",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (float)(arg1)->getFov();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getFogDistance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OCamera::getFogDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getFogDistance",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getFogDistance",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (float)(arg1)->getFogDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setClearColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Neo::OCamera::setClearColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setClearColor",1,"Neo::OCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OCamera::setClearColor",2,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setClearColor",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OCamera_setClearColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->setClearColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getClearColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OCamera::getClearColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getClearColor",1,"Neo::OCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getClearColor",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = ((Neo::OCamera const *)arg1)->getClearColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getProjectedPoint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OCamera::getProjectedPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getProjectedPoint",1,"Neo::OCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OCamera::getProjectedPoint",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getProjectedPoint",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OCamera_getProjectedPoint",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::OCamera const *)arg1)->getProjectedPoint((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getUnProjectedPoint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OCamera::getUnProjectedPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getUnProjectedPoint",1,"Neo::OCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OCamera::getUnProjectedPoint",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getUnProjectedPoint",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OCamera_getUnProjectedPoint",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::OCamera const *)arg1)->getUnProjectedPoint((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getCurrentViewMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getCurrentViewMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getCurrentViewMatrix",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getCurrentViewMatrix",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::Matrix4x4 *)(arg1)->getCurrentViewMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getCurrentProjMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getCurrentProjMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getCurrentProjMatrix",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getCurrentProjMatrix",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::Matrix4x4 *)(arg1)->getCurrentProjMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getCurrentViewport(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getCurrentViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getCurrentViewport",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getCurrentViewport",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (int *)(arg1)->getCurrentViewport();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getFrustum(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Frustum *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getFrustum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getFrustum",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getFrustum",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Frustum *)(arg1)->getFrustum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Frustum,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setSceneLayer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setSceneLayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setSceneLayer",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setSceneLayer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setSceneLayer",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setSceneLayer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getSceneLayer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::OCamera::getSceneLayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getSceneLayer",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getSceneLayer",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (unsigned int)(arg1)->getSceneLayer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setRenderColorTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::setRenderColorTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setRenderColorTexture",1,"Neo::OCamera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OCamera::setRenderColorTexture",2,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setRenderColorTexture",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("OCamera_setRenderColorTexture",2,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->setRenderColorTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setRenderDepthTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::setRenderDepthTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setRenderDepthTexture",1,"Neo::OCamera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OCamera::setRenderDepthTexture",2,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setRenderDepthTexture",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("OCamera_setRenderDepthTexture",2,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->setRenderDepthTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getRenderColorTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getRenderColorTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getRenderColorTexture",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getRenderColorTexture",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::TextureRef *)(arg1)->getRenderColorTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getRenderDepthTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getRenderDepthTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getRenderDepthTexture",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getRenderDepthTexture",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::TextureRef *)(arg1)->getRenderDepthTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_drawSkybox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::drawSkybox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::drawSkybox",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_drawSkybox",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->drawSkybox();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_loadSkybox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::loadSkybox",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::loadSkybox",1,"Neo::OCamera *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::OCamera::loadSkybox",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_loadSkybox",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->loadSkybox((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getSkybox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Skybox *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getSkybox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getSkybox",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getSkybox",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Skybox *)(arg1)->getSkybox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Skybox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_updateListener(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::updateListener",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::updateListener",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_updateListener",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateListener();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_enable(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::enable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::enable",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_enable",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->enable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OCamera(void *obj) {
Neo::OCamera *arg1 = (Neo::OCamera *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_OCamera_methods[] = {
    {"getType", _wrap_OCamera_getType}, 
    {"enableFog", _wrap_OCamera_enableFog}, 
    {"getFogColor", _wrap_OCamera_getFogColor}, 
    {"setFogColor", _wrap_OCamera_setFogColor}, 
    {"enableOrtho", _wrap_OCamera_enableOrtho}, 
    {"setFov", _wrap_OCamera_setFov}, 
    {"setFogDistance", _wrap_OCamera_setFogDistance}, 
    {"setClippingNear", _wrap_OCamera_setClippingNear}, 
    {"setClippingFar", _wrap_OCamera_setClippingFar}, 
    {"isOrtho", _wrap_OCamera_isOrtho}, 
    {"hasFog", _wrap_OCamera_hasFog}, 
    {"getClippingNear", _wrap_OCamera_getClippingNear}, 
    {"getClippingFar", _wrap_OCamera_getClippingFar}, 
    {"getFov", _wrap_OCamera_getFov}, 
    {"getFogDistance", _wrap_OCamera_getFogDistance}, 
    {"setClearColor", _wrap_OCamera_setClearColor}, 
    {"getClearColor", _wrap_OCamera_getClearColor}, 
    {"getProjectedPoint", _wrap_OCamera_getProjectedPoint}, 
    {"getUnProjectedPoint", _wrap_OCamera_getUnProjectedPoint}, 
    {"getCurrentViewMatrix", _wrap_OCamera_getCurrentViewMatrix}, 
    {"getCurrentProjMatrix", _wrap_OCamera_getCurrentProjMatrix}, 
    {"getCurrentViewport", _wrap_OCamera_getCurrentViewport}, 
    {"getFrustum", _wrap_OCamera_getFrustum}, 
    {"setSceneLayer", _wrap_OCamera_setSceneLayer}, 
    {"getSceneLayer", _wrap_OCamera_getSceneLayer}, 
    {"setRenderColorTexture", _wrap_OCamera_setRenderColorTexture}, 
    {"setRenderDepthTexture", _wrap_OCamera_setRenderDepthTexture}, 
    {"getRenderColorTexture", _wrap_OCamera_getRenderColorTexture}, 
    {"getRenderDepthTexture", _wrap_OCamera_getRenderDepthTexture}, 
    {"drawSkybox", _wrap_OCamera_drawSkybox}, 
    {"loadSkybox", _wrap_OCamera_loadSkybox}, 
    {"getSkybox", _wrap_OCamera_getSkybox}, 
    {"updateListener", _wrap_OCamera_updateListener}, 
    {"enable", _wrap_OCamera_enable}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_OCamera_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_OCamera_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_OCamera_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_OCamera_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_OCamera_bases[] = {0,0};
static const char *swig_Neo_OCamera_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_Neo_OCamera = { "OCamera", &SWIGTYPE_p_Neo__OCamera,_wrap_new_OCamera, swig_delete_OCamera, swig_Neo_OCamera_methods, swig_Neo_OCamera_attributes, { "OCamera", swig_Neo_OCamera_cls_methods, swig_Neo_OCamera_cls_attributes, swig_Neo_OCamera_cls_constants }, swig_Neo_OCamera_bases, swig_Neo_OCamera_base_names };

static int _wrap_new_Texture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  Neo::Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::Texture::Texture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::Texture",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("new_Texture",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (Neo::Texture *)new Neo::Texture(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Texture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Texture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = 0 ;
  Neo::Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::Texture::Texture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Texture::Texture",1,"Neo::Texture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("new_Texture",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (Neo::Texture *)new Neo::Texture((Neo::Texture const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Texture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Texture(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__TextureRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Texture__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Texture__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Texture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Texture::Texture(Neo::TextureRef *)\n"
    "    Neo::Texture::Texture(Neo::Texture const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Texture_setTextureRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::Texture::setTextureRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setTextureRef",1,"Neo::Texture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Texture::setTextureRef",2,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setTextureRef",1,SWIGTYPE_p_Neo__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("Texture_setTextureRef",2,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->setTextureRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getTextureRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Texture::getTextureRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getTextureRef",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getTextureRef",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (Neo::TextureRef *)(arg1)->getTextureRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setGenMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  TEX_GEN_MODES arg2 ;
  TEX_GEN_MODES *argp2 ;
  
  SWIG_check_num_args("Neo::Texture::setGenMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setGenMode",1,"Neo::Texture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Texture::setGenMode",2,"TEX_GEN_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setGenMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TEX_GEN_MODES,0))){
    SWIG_fail_ptr("Texture_setGenMode",2,SWIGTYPE_p_TEX_GEN_MODES);
  }
  arg2 = *argp2;
  
  (arg1)->setGenMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getGenMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  TEX_GEN_MODES result;
  
  SWIG_check_num_args("Neo::Texture::getGenMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getGenMode",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getGenMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (arg1)->getGenMode();
  {
    TEX_GEN_MODES * resultptr = new TEX_GEN_MODES((const TEX_GEN_MODES &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TEX_GEN_MODES,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setUWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  WRAP_MODES arg2 ;
  WRAP_MODES *argp2 ;
  
  SWIG_check_num_args("Neo::Texture::setUWrapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setUWrapMode",1,"Neo::Texture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Texture::setUWrapMode",2,"WRAP_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setUWrapMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_WRAP_MODES,0))){
    SWIG_fail_ptr("Texture_setUWrapMode",2,SWIGTYPE_p_WRAP_MODES);
  }
  arg2 = *argp2;
  
  (arg1)->setUWrapMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setVWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  WRAP_MODES arg2 ;
  WRAP_MODES *argp2 ;
  
  SWIG_check_num_args("Neo::Texture::setVWrapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setVWrapMode",1,"Neo::Texture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Texture::setVWrapMode",2,"WRAP_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setVWrapMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_WRAP_MODES,0))){
    SWIG_fail_ptr("Texture_setVWrapMode",2,SWIGTYPE_p_WRAP_MODES);
  }
  arg2 = *argp2;
  
  (arg1)->setVWrapMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getUWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  WRAP_MODES result;
  
  SWIG_check_num_args("Neo::Texture::getUWrapMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getUWrapMode",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getUWrapMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (arg1)->getUWrapMode();
  {
    WRAP_MODES * resultptr = new WRAP_MODES((const WRAP_MODES &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_WRAP_MODES,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getVWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  WRAP_MODES result;
  
  SWIG_check_num_args("Neo::Texture::getVWrapMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getVWrapMode",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getVWrapMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (arg1)->getVWrapMode();
  {
    WRAP_MODES * resultptr = new WRAP_MODES((const WRAP_MODES &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_WRAP_MODES,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setTexTranslate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Texture::setTexTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setTexTranslate",1,"Neo::Texture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Texture::setTexTranslate",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setTexTranslate",1,SWIGTYPE_p_Neo__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Texture_setTexTranslate",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->setTexTranslate((Neo::Vector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setTexScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Texture::setTexScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setTexScale",1,"Neo::Texture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Texture::setTexScale",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setTexScale",1,SWIGTYPE_p_Neo__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Texture_setTexScale",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->setTexScale((Neo::Vector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setTexRotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Texture::setTexRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setTexRotate",1,"Neo::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Texture::setTexRotate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setTexRotate",1,SWIGTYPE_p_Neo__Texture);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setTexRotate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getTexTranslate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Texture::getTexTranslate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getTexTranslate",1,"Neo::Texture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getTexTranslate",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = ((Neo::Texture const *)arg1)->getTexTranslate();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getTexScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Texture::getTexScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getTexScale",1,"Neo::Texture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getTexScale",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = ((Neo::Texture const *)arg1)->getTexScale();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getTexRotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Texture::getTexRotate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getTexRotate",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getTexRotate",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (float)(arg1)->getTexRotate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Texture(void *obj) {
Neo::Texture *arg1 = (Neo::Texture *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Texture_methods[] = {
    {"setTextureRef", _wrap_Texture_setTextureRef}, 
    {"getTextureRef", _wrap_Texture_getTextureRef}, 
    {"setGenMode", _wrap_Texture_setGenMode}, 
    {"getGenMode", _wrap_Texture_getGenMode}, 
    {"setUWrapMode", _wrap_Texture_setUWrapMode}, 
    {"setVWrapMode", _wrap_Texture_setVWrapMode}, 
    {"getUWrapMode", _wrap_Texture_getUWrapMode}, 
    {"getVWrapMode", _wrap_Texture_getVWrapMode}, 
    {"setTexTranslate", _wrap_Texture_setTexTranslate}, 
    {"setTexScale", _wrap_Texture_setTexScale}, 
    {"setTexRotate", _wrap_Texture_setTexRotate}, 
    {"getTexTranslate", _wrap_Texture_getTexTranslate}, 
    {"getTexScale", _wrap_Texture_getTexScale}, 
    {"getTexRotate", _wrap_Texture_getTexRotate}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Texture_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Texture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Texture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Texture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Texture_bases[] = {0};
static const char *swig_Neo_Texture_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Texture = { "Texture", &SWIGTYPE_p_Neo__Texture,_wrap_new_Texture, swig_delete_Texture, swig_Neo_Texture_methods, swig_Neo_Texture_attributes, { "Texture", swig_Neo_Texture_cls_methods, swig_Neo_Texture_cls_attributes, swig_Neo_Texture_cls_constants }, swig_Neo_Texture_bases, swig_Neo_Texture_base_names };

static int _wrap_new_TextureRef(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::TextureRef",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::TextureRef::TextureRef",1,"unsigned int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::TextureRef::TextureRef",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::TextureRef::TextureRef",3,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::TextureRef *)new Neo::TextureRef(arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::clear",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_clear",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::destroy",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_destroy",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getNew(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::getNew",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::TextureRef::getNew",1,"unsigned int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::TextureRef::getNew",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::TextureRef::getNew",3,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::TextureRef *)Neo::TextureRef::getNew(arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::update",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_update",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::TextureRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getType",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getType",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_isMipmapEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::TextureRef::isMipmapEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::isMipmapEnabled",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_isMipmapEnabled",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (bool)(arg1)->isMipmapEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getComponents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureRef::getComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getComponents",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getComponents",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (unsigned int)(arg1)->getComponents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureRef::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getWidth",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getWidth",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (unsigned int)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureRef::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getHeight",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getHeight",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (unsigned int)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_setWidth(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::TextureRef::setWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::setWidth",1,"Neo::TextureRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TextureRef::setWidth",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_setWidth",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_setHeight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::TextureRef::setHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::setHeight",1,"Neo::TextureRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TextureRef::setHeight",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_setHeight",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_setTextureId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::TextureRef::setTextureId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::setTextureId",1,"Neo::TextureRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TextureRef::setTextureId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_setTextureId",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setTextureId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getTextureId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureRef::getTextureId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getTextureId",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getTextureId",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (unsigned int)(arg1)->getTextureId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TextureRef(void *obj) {
Neo::TextureRef *arg1 = (Neo::TextureRef *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_TextureRef_methods[] = {
    {"clear", _wrap_TextureRef_clear}, 
    {"destroy", _wrap_TextureRef_destroy}, 
    {"update", _wrap_TextureRef_update}, 
    {"getType", _wrap_TextureRef_getType}, 
    {"isMipmapEnabled", _wrap_TextureRef_isMipmapEnabled}, 
    {"getComponents", _wrap_TextureRef_getComponents}, 
    {"getWidth", _wrap_TextureRef_getWidth}, 
    {"getHeight", _wrap_TextureRef_getHeight}, 
    {"setWidth", _wrap_TextureRef_setWidth}, 
    {"setHeight", _wrap_TextureRef_setHeight}, 
    {"setTextureId", _wrap_TextureRef_setTextureId}, 
    {"getTextureId", _wrap_TextureRef_getTextureId}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_TextureRef_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_TextureRef_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_TextureRef_cls_methods[] = {
    {"getNew", _wrap_TextureRef_getNew}, 
    {0,0}
};
static swig_lua_const_info swig_Neo_TextureRef_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_TextureRef_bases[] = {0};
static const char *swig_Neo_TextureRef_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_TextureRef = { "TextureRef", &SWIGTYPE_p_Neo__TextureRef,_wrap_new_TextureRef, swig_delete_TextureRef, swig_Neo_TextureRef_methods, swig_Neo_TextureRef_attributes, { "TextureRef", swig_Neo_TextureRef_cls_methods, swig_Neo_TextureRef_cls_attributes, swig_Neo_TextureRef_cls_constants }, swig_Neo_TextureRef_bases, swig_Neo_TextureRef_base_names };

static int _wrap_new_Box3d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::Box3d",0,0)
  result = (Neo::Box3d *)new Neo::Box3d();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Box3d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = 0 ;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::Box3d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Box3d::Box3d",1,"Neo::Box3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("new_Box3d",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  result = (Neo::Box3d *)new Neo::Box3d((Neo::Box3d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Box3d__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::Box3d",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Box3d::Box3d",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Box3d::Box3d",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Box3d",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Box3d",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Box3d *)new Neo::Box3d((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Box3d(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Box3d__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Box3d, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Box3d__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Box3d__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Box3d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Box3d::Box3d()\n"
    "    Neo::Box3d::Box3d(Neo::Box3d const &)\n"
    "    Neo::Box3d::Box3d(Neo::Vector3 const &,Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Box3d_min_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Box3d::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::min",1,"Neo::Box3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Box3d::min",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_min_set",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Box3d_min_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->min = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_min_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::min",1,"Neo::Box3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_min_get",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->min);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_max_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Box3d::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::max",1,"Neo::Box3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Box3d::max",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_max_set",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Box3d_max_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->max = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_max_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::max",1,"Neo::Box3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_max_get",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->max);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_initFromPoints(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::Box3d::initFromPoints",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::initFromPoints",1,"Neo::Box3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Box3d::initFromPoints",2,"Neo::Vector3 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Box3d::initFromPoints",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_initFromPoints",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Box3d_initFromPoints",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->initFromPoints((Neo::Vector3 const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_isInCollisionWith(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Box3d *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Box3d::isInCollisionWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::isInCollisionWith",1,"Neo::Box3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Box3d::isInCollisionWith",2,"Neo::Box3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_isInCollisionWith",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_isInCollisionWith",2,SWIGTYPE_p_Neo__Box3d);
  }
  
  result = (bool)(arg1)->isInCollisionWith((Neo::Box3d const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Box3d(void *obj) {
Neo::Box3d *arg1 = (Neo::Box3d *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Box3d_methods[] = {
    {"initFromPoints", _wrap_Box3d_initFromPoints}, 
    {"isInCollisionWith", _wrap_Box3d_isInCollisionWith}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Box3d_attributes[] = {
    { "min", _wrap_Box3d_min_get, _wrap_Box3d_min_set},
    { "max", _wrap_Box3d_max_get, _wrap_Box3d_max_set},
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Box3d_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Box3d_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Box3d_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Box3d_bases[] = {0};
static const char *swig_Neo_Box3d_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Box3d = { "Box3d", &SWIGTYPE_p_Neo__Box3d,_wrap_new_Box3d, swig_delete_Box3d, swig_Neo_Box3d_methods, swig_Neo_Box3d_attributes, { "Box3d", swig_Neo_Box3d_cls_methods, swig_Neo_Box3d_cls_attributes, swig_Neo_Box3d_cls_constants }, swig_Neo_Box3d_bases, swig_Neo_Box3d_base_names };

static int _wrap_new_Armature(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *result = 0 ;
  
  SWIG_check_num_args("Neo::Armature::Armature",0,0)
  result = (Neo::Armature *)new Neo::Armature();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Armature,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_clearBones(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  SWIG_check_num_args("Neo::Armature::clearBones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::clearBones",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_clearBones",1,SWIGTYPE_p_Neo__Armature);
  }
  
  (arg1)->clearBones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_allocBones(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Armature::allocBones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::allocBones",1,"Neo::Armature *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Armature::allocBones",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_allocBones",1,SWIGTYPE_p_Neo__Armature);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocBones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_getBoneId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Armature::getBoneId",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::getBoneId",1,"Neo::Armature *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Armature::getBoneId",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Armature::getBoneId",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_getBoneId",1,SWIGTYPE_p_Neo__Armature);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Armature_getBoneId",3,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->getBoneId((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_addNewBone(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  Neo::OBone *result = 0 ;
  
  SWIG_check_num_args("Neo::Armature::addNewBone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::addNewBone",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_addNewBone",1,SWIGTYPE_p_Neo__Armature);
  }
  
  result = (Neo::OBone *)(arg1)->addNewBone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OBone,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_getBoneByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OBone *result = 0 ;
  
  SWIG_check_num_args("Neo::Armature::getBoneByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::getBoneByName",1,"Neo::Armature *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Armature::getBoneByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_getBoneByName",1,SWIGTYPE_p_Neo__Armature);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OBone *)(arg1)->getBoneByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OBone,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_getBonesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Armature::getBonesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::getBonesNumber",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_getBonesNumber",1,SWIGTYPE_p_Neo__Armature);
  }
  
  result = (unsigned int)(arg1)->getBonesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_getBone(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  unsigned int arg2 ;
  Neo::OBone *result = 0 ;
  
  SWIG_check_num_args("Neo::Armature::getBone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::getBone",1,"Neo::Armature *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Armature::getBone",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_getBone",1,SWIGTYPE_p_Neo__Armature);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OBone *)(arg1)->getBone(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OBone,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_constructBonesInversePoseMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  SWIG_check_num_args("Neo::Armature::constructBonesInversePoseMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::constructBonesInversePoseMatrix",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_constructBonesInversePoseMatrix",1,SWIGTYPE_p_Neo__Armature);
  }
  
  (arg1)->constructBonesInversePoseMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_updateBonesSkinMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  SWIG_check_num_args("Neo::Armature::updateBonesSkinMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::updateBonesSkinMatrix",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_updateBonesSkinMatrix",1,SWIGTYPE_p_Neo__Armature);
  }
  
  (arg1)->updateBonesSkinMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_processBonesLinking(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  SWIG_check_num_args("Neo::Armature::processBonesLinking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::processBonesLinking",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_processBonesLinking",1,SWIGTYPE_p_Neo__Armature);
  }
  
  (arg1)->processBonesLinking();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Armature(void *obj) {
Neo::Armature *arg1 = (Neo::Armature *) obj;
delete arg1;
}
static swig_lua_method swig_Neo_Armature_methods[] = {
    {"clearBones", _wrap_Armature_clearBones}, 
    {"allocBones", _wrap_Armature_allocBones}, 
    {"getBoneId", _wrap_Armature_getBoneId}, 
    {"addNewBone", _wrap_Armature_addNewBone}, 
    {"getBoneByName", _wrap_Armature_getBoneByName}, 
    {"getBonesNumber", _wrap_Armature_getBonesNumber}, 
    {"getBone", _wrap_Armature_getBone}, 
    {"constructBonesInversePoseMatrix", _wrap_Armature_constructBonesInversePoseMatrix}, 
    {"updateBonesSkinMatrix", _wrap_Armature_updateBonesSkinMatrix}, 
    {"processBonesLinking", _wrap_Armature_processBonesLinking}, 
    {0,0}
};
static swig_lua_attribute swig_Neo_Armature_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Neo_Armature_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo_Armature_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Neo_Armature_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Neo_Armature_bases[] = {0};
static const char *swig_Neo_Armature_base_names[] = {0};
static swig_lua_class _wrap_class_Neo_Armature = { "Armature", &SWIGTYPE_p_Neo__Armature,_wrap_new_Armature, swig_delete_Armature, swig_Neo_Armature_methods, swig_Neo_Armature_attributes, { "Armature", swig_Neo_Armature_cls_methods, swig_Neo_Armature_cls_attributes, swig_Neo_Armature_cls_constants }, swig_Neo_Armature_bases, swig_Neo_Armature_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "NeoEngine_getInstance", _wrap_NeoEngine_getInstance},
    { "Mesh_getNew", _wrap_Mesh_getNew},
    { "TextureRef_getNew", _wrap_TextureRef_getNew},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("M_OBJECT3D", 0)},
    {SWIG_LUA_CONSTTAB_INT("M_OBJECT3D_BONE", 1)},
    {SWIG_LUA_CONSTTAB_INT("M_OBJECT3D_CAMERA", 2)},
    {SWIG_LUA_CONSTTAB_INT("M_OBJECT3D_LIGHT", 3)},
    {SWIG_LUA_CONSTTAB_INT("M_OBJECT3D_ENTITY", 4)},
    {SWIG_LUA_CONSTTAB_INT("M_OBJECT3D_SOUND", 5)},
    {SWIG_LUA_CONSTTAB_INT("M_OBJECT3D_TEXT", 6)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_MESH", 0)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_TEXTURE", 1)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_SOUND", 2)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_ARMATURE_ANIM", 3)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_MATERIALS_ANIM", 4)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_TEXTURES_ANIM", 5)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_SHADER", 6)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_FONT", 7)},
    {SWIG_LUA_CONSTTAB_INT("M_DATA_STATIC", Neo::M_DATA_STATIC)},
    {SWIG_LUA_CONSTTAB_INT("M_DATA_DYNAMIC", Neo::M_DATA_DYNAMIC)},
    {SWIG_LUA_CONSTTAB_INT("M_DATA_STREAM", Neo::M_DATA_STREAM)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_BOX", Neo::COLLISION_SHAPE_BOX)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_SPHERE", Neo::COLLISION_SHAPE_SPHERE)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_CONE", Neo::COLLISION_SHAPE_CONE)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_CAPSULE", Neo::COLLISION_SHAPE_CAPSULE)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_CYLINDER", Neo::COLLISION_SHAPE_CYLINDER)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_CONVEX_HULL", Neo::COLLISION_SHAPE_CONVEX_HULL)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_TRIANGLE_MESH", Neo::COLLISION_SHAPE_TRIANGLE_MESH)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT_POINT", Neo::LIGHT_POINT)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT_SPOT", Neo::LIGHT_SPOT)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT_DIRECTIONAL", Neo::LIGHT_DIRECTIONAL)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_ALIGN_LEFT", Neo::TEXT_ALIGN_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_ALIGN_RIGHT", Neo::TEXT_ALIGN_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_ALIGN_CENTER", Neo::TEXT_ALIGN_CENTER)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Neo__TextureRefTo_p_DataRef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DataRef *)  ((Neo::TextureRef *) x));
}
static void *_p_Neo__OLightTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OLight *) x));
}
static void *_p_Neo__OSoundTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OSound *) x));
}
static void *_p_Neo__OEntityTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OEntity *) x));
}
static void *_p_Neo__OTextTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OText *) x));
}
static void *_p_Neo__OCameraTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OCamera *) x));
}
static swig_type_info _swigt__p_Armature = {"_p_Armature", "Armature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArmatureAnim = {"_p_ArmatureAnim", "ArmatureAnim *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BLENDING_MODES = {"_p_BLENDING_MODES", "BLENDING_MODES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Behavior = {"_p_Behavior", "Behavior *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BehaviorManager = {"_p_BehaviorManager", "BehaviorManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Box3d = {"_p_Box3d", "Box3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CULL_MODES = {"_p_CULL_MODES", "CULL_MODES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Color = {"_p_Color", "Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataLoader = {"_p_DataLoader", "DataLoader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataManager = {"_p_DataManager", "DataManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataRef = {"_p_DataRef", "DataRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FXManager = {"_p_FXManager", "FXManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FXRef = {"_p_FXRef", "FXRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Font = {"_p_Font", "Font *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Frustum = {"_p_Frustum", "Frustum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InputContext = {"_p_InputContext", "InputContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_M_SHADER_TYPES = {"_p_M_SHADER_TYPES", "M_SHADER_TYPES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaterialsAnim = {"_p_MaterialsAnim", "MaterialsAnim *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MorphingData = {"_p_MorphingData", "MorphingData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NeoVariable = {"_p_NeoVariable", "NeoVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__AnimRange = {"_p_Neo__AnimRange", "Neo::AnimRange *", 0, 0, (void*)&_wrap_class_Neo_AnimRange, 0};
static swig_type_info _swigt__p_Neo__Armature = {"_p_Neo__Armature", "Neo::Armature *", 0, 0, (void*)&_wrap_class_Neo_Armature, 0};
static swig_type_info _swigt__p_Neo__ArmatureAnimRef = {"_p_Neo__ArmatureAnimRef", "Neo::ArmatureAnimRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__Box3d = {"_p_Neo__Box3d", "Neo::Box3d *", 0, 0, (void*)&_wrap_class_Neo_Box3d, 0};
static swig_type_info _swigt__p_Neo__Color = {"_p_Neo__Color", "Neo::Color *", 0, 0, (void*)&_wrap_class_Neo_Color, 0};
static swig_type_info _swigt__p_Neo__FontRef = {"_p_Neo__FontRef", "Neo::FontRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__Level = {"_p_Neo__Level", "Neo::Level *", 0, 0, (void*)&_wrap_class_Neo_Level, 0};
static swig_type_info _swigt__p_Neo__Material = {"_p_Neo__Material", "Neo::Material *", 0, 0, (void*)&_wrap_class_Neo_Material, 0};
static swig_type_info _swigt__p_Neo__MaterialDisplay = {"_p_Neo__MaterialDisplay", "Neo::MaterialDisplay *", 0, 0, (void*)&_wrap_class_Neo_MaterialDisplay, 0};
static swig_type_info _swigt__p_Neo__MaterialsAnimRef = {"_p_Neo__MaterialsAnimRef", "Neo::MaterialsAnimRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__Matrix4x4 = {"_p_Neo__Matrix4x4", "Neo::Matrix4x4 *", 0, 0, (void*)&_wrap_class_Neo_Matrix4x4, 0};
static swig_type_info _swigt__p_Neo__Mesh = {"_p_Neo__Mesh", "Neo::Mesh *", 0, 0, (void*)&_wrap_class_Neo_Mesh, 0};
static swig_type_info _swigt__p_Neo__MeshRef = {"_p_Neo__MeshRef", "Neo::MeshRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__NeoEngine = {"_p_Neo__NeoEngine", "Neo::NeoEngine *", 0, 0, (void*)&_wrap_class_Neo_NeoEngine, 0};
static swig_type_info _swigt__p_Neo__NeoGame = {"_p_Neo__NeoGame", "Neo::NeoGame *", 0, 0, (void*)&_wrap_class_Neo_NeoGame, 0};
static swig_type_info _swigt__p_Neo__OBone = {"_p_Neo__OBone", "Neo::OBone *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__OCamera = {"_p_Neo__OCamera", "Neo::OCamera *", 0, 0, (void*)&_wrap_class_Neo_OCamera, 0};
static swig_type_info _swigt__p_Neo__OEntity = {"_p_Neo__OEntity", "Neo::OEntity *", 0, 0, (void*)&_wrap_class_Neo_OEntity, 0};
static swig_type_info _swigt__p_Neo__OLight = {"_p_Neo__OLight", "Neo::OLight *", 0, 0, (void*)&_wrap_class_Neo_OLight, 0};
static swig_type_info _swigt__p_Neo__OSound = {"_p_Neo__OSound", "Neo::OSound *", 0, 0, (void*)&_wrap_class_Neo_OSound, 0};
static swig_type_info _swigt__p_Neo__OText = {"_p_Neo__OText", "Neo::OText *", 0, 0, (void*)&_wrap_class_Neo_OText, 0};
static swig_type_info _swigt__p_Neo__Object3d = {"_p_Neo__Object3d", "Neo::Object3d *", 0, 0, (void*)&_wrap_class_Neo_Object3d, 0};
static swig_type_info _swigt__p_Neo__PhysicsConstraint = {"_p_Neo__PhysicsConstraint", "Neo::PhysicsConstraint *", 0, 0, (void*)&_wrap_class_Neo_PhysicsConstraint, 0};
static swig_type_info _swigt__p_Neo__PhysicsProperties = {"_p_Neo__PhysicsProperties", "Neo::PhysicsProperties *", 0, 0, (void*)&_wrap_class_Neo_PhysicsProperties, 0};
static swig_type_info _swigt__p_Neo__Quaternion = {"_p_Neo__Quaternion", "Neo::Quaternion *", 0, 0, (void*)&_wrap_class_Neo_Quaternion, 0};
static swig_type_info _swigt__p_Neo__Scene = {"_p_Neo__Scene", "Neo::Scene *", 0, 0, (void*)&_wrap_class_Neo_Scene, 0};
static swig_type_info _swigt__p_Neo__ShaderRef = {"_p_Neo__ShaderRef", "Neo::ShaderRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__SoundRef = {"_p_Neo__SoundRef", "Neo::SoundRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__SubGame = {"_p_Neo__SubGame", "Neo::SubGame *", 0, 0, (void*)&_wrap_class_Neo_SubGame, 0};
static swig_type_info _swigt__p_Neo__SubMesh = {"_p_Neo__SubMesh", "Neo::SubMesh *", 0, 0, (void*)&_wrap_class_Neo_SubMesh, 0};
static swig_type_info _swigt__p_Neo__Texture = {"_p_Neo__Texture", "Neo::Texture *", 0, 0, (void*)&_wrap_class_Neo_Texture, 0};
static swig_type_info _swigt__p_Neo__TexturePass = {"_p_Neo__TexturePass", "Neo::TexturePass *", 0, 0, (void*)&_wrap_class_Neo_TexturePass, 0};
static swig_type_info _swigt__p_Neo__TextureRef = {"_p_Neo__TextureRef", "Neo::TextureRef *", 0, 0, (void*)&_wrap_class_Neo_TextureRef, 0};
static swig_type_info _swigt__p_Neo__TexturesAnimRef = {"_p_Neo__TexturesAnimRef", "Neo::TexturesAnimRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__Vector2 = {"_p_Neo__Vector2", "Neo::Vector2 *", 0, 0, (void*)&_wrap_class_Neo_Vector2, 0};
static swig_type_info _swigt__p_Neo__Vector3 = {"_p_Neo__Vector3", "Neo::Vector3 *", 0, 0, (void*)&_wrap_class_Neo_Vector3, 0};
static swig_type_info _swigt__p_Neo__Vector4 = {"_p_Neo__Vector4", "Neo::Vector4 *", 0, 0, (void*)&_wrap_class_Neo_Vector4, 0};
static swig_type_info _swigt__p_PRIMITIVE_TYPES = {"_p_PRIMITIVE_TYPES", "PRIMITIVE_TYPES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PackageManager = {"_p_PackageManager", "PackageManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PhysicsContext = {"_p_PhysicsContext", "PhysicsContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PostProcessor = {"_p_PostProcessor", "PostProcessor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Renderer = {"_p_Renderer", "Renderer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RendererManager = {"_p_RendererManager", "RendererManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RenderingContext = {"_p_RenderingContext", "RenderingContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScriptContext = {"_p_ScriptContext", "ScriptContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SkinData = {"_p_SkinData", "SkinData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Skybox = {"_p_Skybox", "Skybox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundContext = {"_p_SoundContext", "SoundContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_String = {"_p_String", "String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SystemContext = {"_p_SystemContext", "SystemContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TEX_COMBINE_MODES = {"_p_TEX_COMBINE_MODES", "TEX_COMBINE_MODES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TEX_GEN_MODES = {"_p_TEX_GEN_MODES", "TEX_GEN_MODES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Texture = {"_p_Texture", "Texture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TexturesAnim = {"_p_TexturesAnim", "TexturesAnim *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VAR_TYPES = {"_p_VAR_TYPES", "VAR_TYPES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector3 = {"_p_Vector3", "Vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector4 = {"_p_Vector4", "Vector4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WRAP_MODES = {"_p_WRAP_MODES", "WRAP_MODES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapT_unsigned_int_unsigned_int_t = {"_p_mapT_unsigned_int_unsigned_int_t", "map< unsigned int,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_float_t = {"_p_vectorT_float_t", "vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Armature,
  &_swigt__p_ArmatureAnim,
  &_swigt__p_BLENDING_MODES,
  &_swigt__p_Behavior,
  &_swigt__p_BehaviorManager,
  &_swigt__p_Box3d,
  &_swigt__p_CULL_MODES,
  &_swigt__p_Color,
  &_swigt__p_DataLoader,
  &_swigt__p_DataManager,
  &_swigt__p_DataRef,
  &_swigt__p_FXManager,
  &_swigt__p_FXRef,
  &_swigt__p_Font,
  &_swigt__p_Frustum,
  &_swigt__p_InputContext,
  &_swigt__p_M_SHADER_TYPES,
  &_swigt__p_MaterialsAnim,
  &_swigt__p_MorphingData,
  &_swigt__p_NeoVariable,
  &_swigt__p_Neo__AnimRange,
  &_swigt__p_Neo__Armature,
  &_swigt__p_Neo__ArmatureAnimRef,
  &_swigt__p_Neo__Box3d,
  &_swigt__p_Neo__Color,
  &_swigt__p_Neo__FontRef,
  &_swigt__p_Neo__Level,
  &_swigt__p_Neo__Material,
  &_swigt__p_Neo__MaterialDisplay,
  &_swigt__p_Neo__MaterialsAnimRef,
  &_swigt__p_Neo__Matrix4x4,
  &_swigt__p_Neo__Mesh,
  &_swigt__p_Neo__MeshRef,
  &_swigt__p_Neo__NeoEngine,
  &_swigt__p_Neo__NeoGame,
  &_swigt__p_Neo__OBone,
  &_swigt__p_Neo__OCamera,
  &_swigt__p_Neo__OEntity,
  &_swigt__p_Neo__OLight,
  &_swigt__p_Neo__OSound,
  &_swigt__p_Neo__OText,
  &_swigt__p_Neo__Object3d,
  &_swigt__p_Neo__PhysicsConstraint,
  &_swigt__p_Neo__PhysicsProperties,
  &_swigt__p_Neo__Quaternion,
  &_swigt__p_Neo__Scene,
  &_swigt__p_Neo__ShaderRef,
  &_swigt__p_Neo__SoundRef,
  &_swigt__p_Neo__SubGame,
  &_swigt__p_Neo__SubMesh,
  &_swigt__p_Neo__Texture,
  &_swigt__p_Neo__TexturePass,
  &_swigt__p_Neo__TextureRef,
  &_swigt__p_Neo__TexturesAnimRef,
  &_swigt__p_Neo__Vector2,
  &_swigt__p_Neo__Vector3,
  &_swigt__p_Neo__Vector4,
  &_swigt__p_PRIMITIVE_TYPES,
  &_swigt__p_PackageManager,
  &_swigt__p_PhysicsContext,
  &_swigt__p_PostProcessor,
  &_swigt__p_Renderer,
  &_swigt__p_RendererManager,
  &_swigt__p_RenderingContext,
  &_swigt__p_ScriptContext,
  &_swigt__p_SkinData,
  &_swigt__p_Skybox,
  &_swigt__p_SoundContext,
  &_swigt__p_String,
  &_swigt__p_SystemContext,
  &_swigt__p_TEX_COMBINE_MODES,
  &_swigt__p_TEX_GEN_MODES,
  &_swigt__p_Texture,
  &_swigt__p_TexturesAnim,
  &_swigt__p_VAR_TYPES,
  &_swigt__p_Vector3,
  &_swigt__p_Vector4,
  &_swigt__p_WRAP_MODES,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_mapT_unsigned_int_unsigned_int_t,
  &_swigt__p_unsigned_int,
  &_swigt__p_vectorT_float_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Armature[] = {  {&_swigt__p_Armature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArmatureAnim[] = {  {&_swigt__p_ArmatureAnim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BLENDING_MODES[] = {  {&_swigt__p_BLENDING_MODES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Behavior[] = {  {&_swigt__p_Behavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BehaviorManager[] = {  {&_swigt__p_BehaviorManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Box3d[] = {  {&_swigt__p_Box3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CULL_MODES[] = {  {&_swigt__p_CULL_MODES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Color[] = {  {&_swigt__p_Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataLoader[] = {  {&_swigt__p_DataLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataManager[] = {  {&_swigt__p_DataManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataRef[] = {  {&_swigt__p_DataRef, 0, 0, 0},  {&_swigt__p_Neo__TextureRef, _p_Neo__TextureRefTo_p_DataRef, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FXManager[] = {  {&_swigt__p_FXManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FXRef[] = {  {&_swigt__p_FXRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Font[] = {  {&_swigt__p_Font, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Frustum[] = {  {&_swigt__p_Frustum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InputContext[] = {  {&_swigt__p_InputContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_M_SHADER_TYPES[] = {  {&_swigt__p_M_SHADER_TYPES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaterialsAnim[] = {  {&_swigt__p_MaterialsAnim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MorphingData[] = {  {&_swigt__p_MorphingData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NeoVariable[] = {  {&_swigt__p_NeoVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__AnimRange[] = {  {&_swigt__p_Neo__AnimRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Armature[] = {  {&_swigt__p_Neo__Armature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__ArmatureAnimRef[] = {  {&_swigt__p_Neo__ArmatureAnimRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Box3d[] = {  {&_swigt__p_Neo__Box3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Color[] = {  {&_swigt__p_Neo__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__FontRef[] = {  {&_swigt__p_Neo__FontRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Level[] = {  {&_swigt__p_Neo__Level, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Material[] = {  {&_swigt__p_Neo__Material, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MaterialDisplay[] = {  {&_swigt__p_Neo__MaterialDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MaterialsAnimRef[] = {  {&_swigt__p_Neo__MaterialsAnimRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Matrix4x4[] = {  {&_swigt__p_Neo__Matrix4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Mesh[] = {  {&_swigt__p_Neo__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MeshRef[] = {  {&_swigt__p_Neo__MeshRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__NeoEngine[] = {  {&_swigt__p_Neo__NeoEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__NeoGame[] = {  {&_swigt__p_Neo__NeoGame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OBone[] = {  {&_swigt__p_Neo__OBone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OCamera[] = {  {&_swigt__p_Neo__OCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OEntity[] = {  {&_swigt__p_Neo__OEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OLight[] = {  {&_swigt__p_Neo__OLight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OSound[] = {  {&_swigt__p_Neo__OSound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OText[] = {  {&_swigt__p_Neo__OText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Object3d[] = {  {&_swigt__p_Neo__OLight, _p_Neo__OLightTo_p_Neo__Object3d, 0, 0},  {&_swigt__p_Neo__OSound, _p_Neo__OSoundTo_p_Neo__Object3d, 0, 0},  {&_swigt__p_Neo__Object3d, 0, 0, 0},  {&_swigt__p_Neo__OEntity, _p_Neo__OEntityTo_p_Neo__Object3d, 0, 0},  {&_swigt__p_Neo__OText, _p_Neo__OTextTo_p_Neo__Object3d, 0, 0},  {&_swigt__p_Neo__OCamera, _p_Neo__OCameraTo_p_Neo__Object3d, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__PhysicsConstraint[] = {  {&_swigt__p_Neo__PhysicsConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__PhysicsProperties[] = {  {&_swigt__p_Neo__PhysicsProperties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Quaternion[] = {  {&_swigt__p_Neo__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Scene[] = {  {&_swigt__p_Neo__Scene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__ShaderRef[] = {  {&_swigt__p_Neo__ShaderRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SoundRef[] = {  {&_swigt__p_Neo__SoundRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SubGame[] = {  {&_swigt__p_Neo__SubGame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SubMesh[] = {  {&_swigt__p_Neo__SubMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Texture[] = {  {&_swigt__p_Neo__Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__TexturePass[] = {  {&_swigt__p_Neo__TexturePass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__TextureRef[] = {  {&_swigt__p_Neo__TextureRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__TexturesAnimRef[] = {  {&_swigt__p_Neo__TexturesAnimRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Vector2[] = {  {&_swigt__p_Neo__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Vector3[] = {  {&_swigt__p_Neo__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Vector4[] = {  {&_swigt__p_Neo__Vector4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PRIMITIVE_TYPES[] = {  {&_swigt__p_PRIMITIVE_TYPES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PackageManager[] = {  {&_swigt__p_PackageManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PhysicsContext[] = {  {&_swigt__p_PhysicsContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PostProcessor[] = {  {&_swigt__p_PostProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Renderer[] = {  {&_swigt__p_Renderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RendererManager[] = {  {&_swigt__p_RendererManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RenderingContext[] = {  {&_swigt__p_RenderingContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScriptContext[] = {  {&_swigt__p_ScriptContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SkinData[] = {  {&_swigt__p_SkinData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Skybox[] = {  {&_swigt__p_Skybox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundContext[] = {  {&_swigt__p_SoundContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_String[] = {  {&_swigt__p_String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SystemContext[] = {  {&_swigt__p_SystemContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TEX_COMBINE_MODES[] = {  {&_swigt__p_TEX_COMBINE_MODES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TEX_GEN_MODES[] = {  {&_swigt__p_TEX_GEN_MODES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Texture[] = {  {&_swigt__p_Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TexturesAnim[] = {  {&_swigt__p_TexturesAnim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VAR_TYPES[] = {  {&_swigt__p_VAR_TYPES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector3[] = {  {&_swigt__p_Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector4[] = {  {&_swigt__p_Vector4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WRAP_MODES[] = {  {&_swigt__p_WRAP_MODES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapT_unsigned_int_unsigned_int_t[] = {  {&_swigt__p_mapT_unsigned_int_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_float_t[] = {  {&_swigt__p_vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Armature,
  _swigc__p_ArmatureAnim,
  _swigc__p_BLENDING_MODES,
  _swigc__p_Behavior,
  _swigc__p_BehaviorManager,
  _swigc__p_Box3d,
  _swigc__p_CULL_MODES,
  _swigc__p_Color,
  _swigc__p_DataLoader,
  _swigc__p_DataManager,
  _swigc__p_DataRef,
  _swigc__p_FXManager,
  _swigc__p_FXRef,
  _swigc__p_Font,
  _swigc__p_Frustum,
  _swigc__p_InputContext,
  _swigc__p_M_SHADER_TYPES,
  _swigc__p_MaterialsAnim,
  _swigc__p_MorphingData,
  _swigc__p_NeoVariable,
  _swigc__p_Neo__AnimRange,
  _swigc__p_Neo__Armature,
  _swigc__p_Neo__ArmatureAnimRef,
  _swigc__p_Neo__Box3d,
  _swigc__p_Neo__Color,
  _swigc__p_Neo__FontRef,
  _swigc__p_Neo__Level,
  _swigc__p_Neo__Material,
  _swigc__p_Neo__MaterialDisplay,
  _swigc__p_Neo__MaterialsAnimRef,
  _swigc__p_Neo__Matrix4x4,
  _swigc__p_Neo__Mesh,
  _swigc__p_Neo__MeshRef,
  _swigc__p_Neo__NeoEngine,
  _swigc__p_Neo__NeoGame,
  _swigc__p_Neo__OBone,
  _swigc__p_Neo__OCamera,
  _swigc__p_Neo__OEntity,
  _swigc__p_Neo__OLight,
  _swigc__p_Neo__OSound,
  _swigc__p_Neo__OText,
  _swigc__p_Neo__Object3d,
  _swigc__p_Neo__PhysicsConstraint,
  _swigc__p_Neo__PhysicsProperties,
  _swigc__p_Neo__Quaternion,
  _swigc__p_Neo__Scene,
  _swigc__p_Neo__ShaderRef,
  _swigc__p_Neo__SoundRef,
  _swigc__p_Neo__SubGame,
  _swigc__p_Neo__SubMesh,
  _swigc__p_Neo__Texture,
  _swigc__p_Neo__TexturePass,
  _swigc__p_Neo__TextureRef,
  _swigc__p_Neo__TexturesAnimRef,
  _swigc__p_Neo__Vector2,
  _swigc__p_Neo__Vector3,
  _swigc__p_Neo__Vector4,
  _swigc__p_PRIMITIVE_TYPES,
  _swigc__p_PackageManager,
  _swigc__p_PhysicsContext,
  _swigc__p_PostProcessor,
  _swigc__p_Renderer,
  _swigc__p_RendererManager,
  _swigc__p_RenderingContext,
  _swigc__p_ScriptContext,
  _swigc__p_SkinData,
  _swigc__p_Skybox,
  _swigc__p_SoundContext,
  _swigc__p_String,
  _swigc__p_SystemContext,
  _swigc__p_TEX_COMBINE_MODES,
  _swigc__p_TEX_GEN_MODES,
  _swigc__p_Texture,
  _swigc__p_TexturesAnim,
  _swigc__p_VAR_TYPES,
  _swigc__p_Vector3,
  _swigc__p_Vector4,
  _swigc__p_WRAP_MODES,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_mapT_unsigned_int_unsigned_int_t,
  _swigc__p_unsigned_int,
  _swigc__p_vectorT_float_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

