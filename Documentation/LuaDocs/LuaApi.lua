
/**
 * Creates a 3D vector.
 * @param x The X value
 * @param y The Y value
 * @param z The Z value
 * @return The newly created 3D vector
 */
vec3(x, y, z);
length(vec3);
normalize(vec3);
dot(vecA, vecB);
cross(vecA, vecB);
getObject(name);
isKeyPressed(key);
onKeyDown(key);
onKeyUp(key);
getAxis(axis);
getProperty(name);
getTouchPosition(touchId);
getLastTouchPosition(touchId);
getTouchPhase(touchId);
getParent(object);
getChilds(object);
getClone(object);
setParent(object, parent);
getName(object);
activate(object);
deactivate(object);
isVisible(object);
isActive(object);
enableShadow(object, shadow);
isCastingShadow(object);
rotate(object, {x, y, z}, angle, "local");
translate(object, {x, y, z}, "local");
getPosition(object);
getRotation(object);
getScale(object);
setPosition(object, {x, y, z});
setRotation(object, {x, y, z});
setScale(object, {x, y, z});
getTransformedPosition(object);
getTransformedRotation(object);
getTransformedScale(object);
getInverseRotatedVector(object);
getRotatedVector(object);
getInverseVector(object);
getTransformedVector(object);
updateMatrix(object);
getMatrix(object);
getBehaviorVariable(object, behaviorId, "variableName");
setBehaviorVariable(object, behaviorId, "variableName", value);
setGravity({x, y, z});
getGravity();
getLinearDamping(object);
setLinearDamping(object, damping);
getAngularDamping(object);
setAngularDamping(object, damping);
getLinearFactor(object);
setLinearFactor(object, {x, y, z});
getAngularFactor(object);
setAngularFactor(object, factor);
getMass(object);
setMass(object, mass);
getFriction(object);
setFriction(object, friction);
getRestitution(object);
setRestitution(object, restitution);
clearForces(object);
addCentralForce(object, {x, y, z}, "local");
addTorque(object, {x, y, z}, "local");
getCentralForce(object);
getTorque(object);
isCollisionTest(object);
isCollisionBetween(object1, object2);
getNumCollisions(object);
rayHit(start, end); 
getLightColor(object);
getLightRadius(object);
getLightIntensity(object);
getLightShadowQuality(object);
getLightShadowBias(object);
getLightShadowBlur(object);
getLightSpotAngle(object);
getLightSpotExponent(object);
setLightColor(object, {r, g, b});
setLightRadius(object, radius);
setLightIntensity(object, intensity);
setLightShadowQuality(object, quality);
setLightShadowBias(object, bias);
setLightShadowBlur(object, blur);
setLightSpotAngle(object, spotAngle);
setLightSpotExponent(object, exponent); 
changeCurrentCamera(object);
getCurrentCamera(); 
getCameraClearColor(object);
getCameraFov(object);
getCameraNear(object);
getCameraFar(object);
getCameraFogDistance(object);
isCameraOrtho(object);
isCameraFogEnabled(object);
setCameraClearColor(object, {r, g, b});
setCameraFov(object, fov);
setCameraNear(object, near);
setCameraFar(object, far);
setCameraFogDistance(object, fogDistance);
enableCameraOrtho(object, ortho);
enableCameraFog(object, fog); 
enableCameraLayer(object, scene);
disableCameraLayer(object);
enableRenderToTexture(object, "textureName", renderWith, renderHeight);
disableRenderToTexture(object); 
getProjectedPoint(object, point);
getUnProjectedPoint(object, point);
setText(object , "text");
getText(object);
getTextColor(object);
setTextColor(object, {r, g, b, a});  
playSound(object);
pauseSound(object);
stopSound(object);
getSoundGain(object);
setSoundGain(object, gain); 
getCurrentAnimation(object);
changeAnimation(object, animationId);
isAnimationOver(object);
getAnimationSpeed(object);
setAnimationSpeed(object, speed);
getCurrentFrame(object);
setCurrentFrame(object, frame); 
centerCursor();
hideCursor();
showCursor();
getWindowScale();
getSystemTick();
quit();
dofile("filename.lua");
loadLevel("levelName");
getScene("sceneName");
changeScene(scene);
getCurrentSceneId();
getScenesNumber(); 
