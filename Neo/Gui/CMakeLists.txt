## Find source and headers
FILE(GLOB_RECURSE HEADERS *.h)
FILE(GLOB_RECURSE SOURCES *.c*)

IF(CMAKE_HAS_SORT)
  LIST(SORT HEADERS)
  LIST(SORT SOURCES)
ENDIF(CMAKE_HAS_SORT)

## Build TODO: Only when editor is built!
ADD_DEFINITIONS(-DM_PACKAGE_WRITABLE)

## Build
INCLUDE_DIRECTORIES(
  ${NEO_COMMON_INCLUDE_DIR}
  ${NEO_CORE_INCLUDE_DIR}
  ${NEO_ENGINE_INCLUDE_DIR}
  ${NEOGUI_INCLUDE_DIR}

  ${ASSIMP_INCLUDE_DIR}
  ${BULLET_INCLUDE_DIR}
  ${FREETYPE_INCLUDE_DIR}
  ${GLEW_INCLUDE_DIR}
  ${JPEG_INCLUDE_DIR}
  ${PNG_INCLUDE_DIR}
  ${OGG_INCLUDE_DIR}
  ${VORBIS_INCLUDE_DIR}
  ${LUA_INCLUDE_DIR}
  ${NPK_INCLUDE_DIR}
  ${OPENAL_INCLUDE_DIR}
  ${SDL_INCLUDE_DIR}
  ${TINYXML_INCLUDE_DIR}
  ${ZLIB_INCLUDE_DIR}
)

IF(${SWIG_FOUND})
  MESSAGE("Generating Lua bindings for NeoGui")

  EXECUTE_PROCESS(
	COMMAND ${SWIG_EXECUTABLE} -lua -c++ -I${NEO_CORE_INCLUDE_DIR} -I${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/NeoGui.i

	OUTPUT_VARIABLE SWIG_swiglib_output
	ERROR_VARIABLE SWIG_swiglib_error
	RESULT_VARIABLE SWIG_swiglib_result
	)

  ADD_CUSTOM_TARGET(neogui-swig
	COMMAND ${SWIG_EXECUTABLE} -lua -c++ -I${NEO_CORE_INCLUDE_DIR} -I${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/NeoGui.i
	)

  IF(NOT ${SWIG_swiglib_result} EQUAL 0)
	MESSAGE(SEND_ERROR "Generating Lua bindings for NeoGui failed with output:\n${SWIG_swiglib_error}")
  ELSE()
	SET(CMAKE_SHARED_LIBRARY_PREFIX "")
	# ADD_LIBRARY(NeoGui SHARED NeoGui_wrap.cxx)
  ENDIF(NOT ${SWIG_swiglib_result} EQUAL 0)

ELSE()
  MESSAGE("Will NOT generate Lua bindings for NeoGui")
ENDIF()

ADD_LIBRARY(NeoGui SHARED ${SOURCES} ${HEADERS} NeoGui_wrap.cxx)

# Needed for windows
TARGET_LINK_LIBRARIES(NeoGui ${NEO_CORE_LIBRARIES} ${NEO_ENGINE_LIBRARIES} ${SDL_LIBRARIES})

ADD_DEPENDENCIES(NeoGui neogui-swig)

INSTALL(TARGETS NeoGui DESTINATION ${NEO_INSTALL_DIR})
INSTALL(TARGETS NeoGui DESTINATION ${NEO_INSTALL_DIR}/SDK/lib)
INSTALL(FILES ${HEADERS} DESTINATION ${NEO_INSTALL_DIR}/SDK/include/NeoGui)

